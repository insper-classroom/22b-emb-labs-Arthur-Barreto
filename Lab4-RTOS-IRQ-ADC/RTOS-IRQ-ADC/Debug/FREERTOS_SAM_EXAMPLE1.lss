
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a0c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408a0c  00408a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00408a14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000310  204009b8  004093cc  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400cc8  004096dc  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402cc8  0040b6dc  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020ea5  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000046d1  00000000  00000000  000418e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aff5  00000000  00000000  00045fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ea8  00000000  00000000  00050faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002040  00000000  00000000  00051e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021ec5  00000000  00000000  00053e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001209b  00000000  00000000  00075d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094511  00000000  00000000  00087df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000039e4  00000000  00000000  0011c304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2c 40 20 49 0a 40 00 45 0a 40 00 45 0a 40 00     .,@ I.@.E.@.E.@.
  400010:	45 0a 40 00 45 0a 40 00 45 0a 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	05 0e 40 00 45 0a 40 00 00 00 00 00 a1 0e 40 00     ..@.E.@.......@.
  40003c:	09 0f 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     ..@.E.@.E.@.E.@.
  40004c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 0a 40 00 45 0a 40 00 00 00 00 00 7d 07 40 00     E.@.E.@.....}.@.
  40006c:	8d 07 40 00 9d 07 40 00 45 0a 40 00 45 0a 40 00     ..@...@.E.@.E.@.
  40007c:	45 0a 40 00 ad 07 40 00 bd 07 40 00 45 0a 40 00     E.@...@...@.E.@.
  40008c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 0a 40 00 45 0a 40 00 a5 06 40 00 45 0a 40 00     E.@.E.@...@.E.@.
  4000bc:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 0a 40 00 00 00 00 00 45 0a 40 00 00 00 00 00     E.@.....E.@.....
  4000dc:	45 0a 40 00 b5 06 40 00 45 0a 40 00 45 0a 40 00     E.@...@.E.@.E.@.
  4000ec:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000fc:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40010c:	45 0a 40 00 45 0a 40 00 00 00 00 00 00 00 00 00     E.@.E.@.........
  40011c:	00 00 00 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     ....E.@.E.@.E.@.
  40012c:	45 0a 40 00 45 0a 40 00 00 00 00 00 45 0a 40 00     E.@.E.@.....E.@.
  40013c:	45 0a 40 00                                         E.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00408a14 	.word	0x00408a14

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408a14 	.word	0x00408a14
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00408a14 	.word	0x00408a14
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4d10      	ldr	r5, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4c10      	ldr	r4, [pc, #64]	; (4001fc <sysclk_init+0x50>)
  4001bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4c0e      	ldr	r4, [pc, #56]	; (400204 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	4a0f      	ldr	r2, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001de:	2000      	movs	r0, #0
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	462b      	mov	r3, r5
  4001e8:	4801      	ldr	r0, [pc, #4]	; (4001f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4001ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4001ee:	4718      	bx	r3
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400bed 	.word	0x00400bed
  4001f8:	00400851 	.word	0x00400851
  4001fc:	004008a5 	.word	0x004008a5
  400200:	004008b5 	.word	0x004008b5
  400204:	004008c5 	.word	0x004008c5
  400208:	400e0600 	.word	0x400e0600
  40020c:	20183f01 	.word	0x20183f01
  400210:	004007cd 	.word	0x004007cd
  400214:	004007fd 	.word	0x004007fd
  400218:	00400b09 	.word	0x00400b09

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b990      	cbnz	r0, 400248 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  400222:	2a00      	cmp	r2, #0
  400224:	4690      	mov	r8, r2
  400226:	dd0d      	ble.n	400244 <_read+0x28>
  400228:	460c      	mov	r4, r1
  40022a:	188f      	adds	r7, r1, r2
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  400230:	4621      	mov	r1, r4
		ptr++;
  400232:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  400234:	6830      	ldr	r0, [r6, #0]
  400236:	682b      	ldr	r3, [r5, #0]
  400238:	4798      	blx	r3
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  400244:	4680      	mov	r8, r0
  400246:	e7fa      	b.n	40023e <_read+0x22>
		return -1;
  400248:	f04f 38ff 	mov.w	r8, #4294967295
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400bd0 	.word	0x20400bd0
  400254:	20400bc8 	.word	0x20400bc8

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d81e      	bhi.n	40029c <_write+0x44>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  400264:	b1ba      	cbz	r2, 400296 <_write+0x3e>
  400266:	460e      	mov	r6, r1
  400268:	460c      	mov	r4, r1
  40026a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4002a8 <_write+0x50>
  40026e:	4f0d      	ldr	r7, [pc, #52]	; (4002a4 <_write+0x4c>)
  400270:	e001      	b.n	400276 <_write+0x1e>
  400272:	3d01      	subs	r5, #1
  400274:	d00d      	beq.n	400292 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400276:	f814 1b01 	ldrb.w	r1, [r4], #1
  40027a:	f8d8 0000 	ldr.w	r0, [r8]
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	4798      	blx	r3
  400282:	2800      	cmp	r0, #0
  400284:	eba4 0006 	sub.w	r0, r4, r6
  400288:	daf3      	bge.n	400272 <_write+0x1a>
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  400296:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40029c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	20400bcc 	.word	0x20400bcc
  4002a8:	20400bd0 	.word	0x20400bd0

004002ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b2:	4b5a      	ldr	r3, [pc, #360]	; (40041c <board_init+0x170>)
  4002b4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ba:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002be:	4c58      	ldr	r4, [pc, #352]	; (400420 <board_init+0x174>)
  4002c0:	2300      	movs	r3, #0
  4002c2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c6:	6963      	ldr	r3, [r4, #20]
  4002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4002cc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002d2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f003 0607 	and.w	r6, r3, #7
    sets    = CCSIDR_SETS(ccsidr);
  4002de:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    ways    = CCSIDR_WAYS(ccsidr);
  4002e2:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002e6:	3604      	adds	r6, #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e8:	fabc f38c 	clz	r3, ip
    wshift  = __CLZ(ways) & 0x1f;
  4002ec:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4002f0:	f3bf 8f4f 	dsb	sy
  4002f4:	f04f 35ff 	mov.w	r5, #4294967295
  4002f8:	fa0e f006 	lsl.w	r0, lr, r6
  4002fc:	fa0c f703 	lsl.w	r7, ip, r3
  400300:	fa05 f606 	lsl.w	r6, r5, r6
  400304:	409d      	lsls	r5, r3
{
  400306:	463a      	mov	r2, r7

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400308:	4663      	mov	r3, ip
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0102 	orr.w	r1, r0, r2
              SCB->DCISW = sw;
            } while(tmpways--);
  40030e:	3b01      	subs	r3, #1
  400310:	442a      	add	r2, r5
              SCB->DCISW = sw;
  400312:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  400316:	1c59      	adds	r1, r3, #1
  400318:	d1f7      	bne.n	40030a <board_init+0x5e>
        } while(sets--);
  40031a:	f10e 3eff 	add.w	lr, lr, #4294967295
  40031e:	4430      	add	r0, r6
  400320:	f1be 3fff 	cmp.w	lr, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5a>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	6963      	ldr	r3, [r4, #20]
  40032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400330:	6163      	str	r3, [r4, #20]
  400332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400336:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033a:	4b3a      	ldr	r3, [pc, #232]	; (400424 <board_init+0x178>)
  40033c:	493a      	ldr	r1, [pc, #232]	; (400428 <board_init+0x17c>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033e:	4a3b      	ldr	r2, [pc, #236]	; (40042c <board_init+0x180>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400340:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40034c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400350:	f023 0301 	bic.w	r3, r3, #1
  400354:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400358:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40035c:	f023 0301 	bic.w	r3, r3, #1
  400360:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400368:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	4c30      	ldr	r4, [pc, #192]	; (400430 <board_init+0x184>)
  40036e:	200a      	movs	r0, #10
  400370:	47a0      	blx	r4
  400372:	200b      	movs	r0, #11
  400374:	47a0      	blx	r4
  400376:	200c      	movs	r0, #12
  400378:	47a0      	blx	r4
  40037a:	2010      	movs	r0, #16
  40037c:	47a0      	blx	r4
  40037e:	2011      	movs	r0, #17
  400380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400382:	f44f 7580 	mov.w	r5, #256	; 0x100
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400386:	4a2b      	ldr	r2, [pc, #172]	; (400434 <board_init+0x188>)
  400388:	f44f 6300 	mov.w	r3, #2048	; 0x800
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40038c:	492a      	ldr	r1, [pc, #168]	; (400438 <board_init+0x18c>)
		base->PIO_PUDR = mask;
  40038e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4e2a      	ldr	r6, [pc, #168]	; (40043c <board_init+0x190>)
  400394:	2010      	movs	r0, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400396:	610d      	str	r5, [r1, #16]
		base->PIO_PUDR = mask;
  400398:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039c:	f8c1 52a0 	str.w	r5, [r1, #672]	; 0x2a0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a0:	f8c1 5230 	str.w	r5, [r1, #560]	; 0x230
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003a4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003aa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4003b2:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4003b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4003ba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003be:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4003c2:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003c6:	6755      	str	r5, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003d0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003d4:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d6:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003da:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003dc:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003de:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4003e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003e8:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4003ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003f0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	6054      	str	r4, [r2, #4]
  4003f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  4003f8:	4303      	orrs	r3, r0
  4003fa:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400400:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  400404:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  400406:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400408:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  40040e:	4303      	orrs	r3, r0
  400410:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400412:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  400414:	4303      	orrs	r3, r0
  400416:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400418:	6048      	str	r0, [r1, #4]
  40041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041c:	400e1850 	.word	0x400e1850
  400420:	e000ed00 	.word	0xe000ed00
  400424:	400e0c00 	.word	0x400e0c00
  400428:	5a00080c 	.word	0x5a00080c
  40042c:	5a00070c 	.word	0x5a00070c
  400430:	004008d5 	.word	0x004008d5
  400434:	400e0e00 	.word	0x400e0e00
  400438:	400e1200 	.word	0x400e1200
  40043c:	40088000 	.word	0x40088000

00400440 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (afec == AFEC1) {
  400444:	4f17      	ldr	r7, [pc, #92]	; (4004a4 <afec_process_callback+0x64>)
{
  400446:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400448:	6b02      	ldr	r2, [r0, #48]	; 0x30
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40044a:	2400      	movs	r4, #0
	if (afec == AFEC1) {
  40044c:	1bc7      	subs	r7, r0, r7
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40044e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  400450:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4004a8 <afec_process_callback+0x68>
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400454:	2601      	movs	r6, #1
	if (afec == AFEC1) {
  400456:	fab7 f787 	clz	r7, r7
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045a:	4013      	ands	r3, r2
	if (afec == AFEC1) {
  40045c:	097f      	lsrs	r7, r7, #5
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045e:	9301      	str	r3, [sp, #4]
  400460:	01bf      	lsls	r7, r7, #6
  400462:	eb08 0507 	add.w	r5, r8, r7
  400466:	e009      	b.n	40047c <afec_process_callback+0x3c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400468:	9a01      	ldr	r2, [sp, #4]
  40046a:	4213      	tst	r3, r2
  40046c:	d002      	beq.n	400474 <afec_process_callback+0x34>
	if (afec_callback_pointer[inst_num][source]) {
  40046e:	682b      	ldr	r3, [r5, #0]
  400470:	b103      	cbz	r3, 400474 <afec_process_callback+0x34>
		afec_callback_pointer[inst_num][source]();
  400472:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400474:	3401      	adds	r4, #1
  400476:	3504      	adds	r5, #4
  400478:	2c10      	cmp	r4, #16
  40047a:	d010      	beq.n	40049e <afec_process_callback+0x5e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40047c:	2c0b      	cmp	r4, #11
			if (status & (1 << cnt)) {
  40047e:	fa06 f304 	lsl.w	r3, r6, r4
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400482:	d9f1      	bls.n	400468 <afec_process_callback+0x28>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400484:	f104 030c 	add.w	r3, r4, #12
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400488:	2c0f      	cmp	r4, #15
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40048a:	fa06 f303 	lsl.w	r3, r6, r3
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40048e:	d1eb      	bne.n	400468 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400490:	9b01      	ldr	r3, [sp, #4]
  400492:	005b      	lsls	r3, r3, #1
  400494:	d503      	bpl.n	40049e <afec_process_callback+0x5e>
	if (afec_callback_pointer[inst_num][source]) {
  400496:	4447      	add	r7, r8
  400498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40049a:	b103      	cbz	r3, 40049e <afec_process_callback+0x5e>
		afec_callback_pointer[inst_num][source]();
  40049c:	4798      	blx	r3
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40049e:	b002      	add	sp, #8
  4004a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a4:	40064000 	.word	0x40064000
  4004a8:	20400bd4 	.word	0x20400bd4

004004ac <afec_ch_set_config>:
{
  4004ac:	b470      	push	{r4, r5, r6}
	reg &= ~(0x1u << channel);
  4004ae:	2301      	movs	r3, #1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b0:	7814      	ldrb	r4, [r2, #0]
	reg = afec->AFEC_DIFFR;
  4004b2:	6e06      	ldr	r6, [r0, #96]	; 0x60
	reg &= ~(0x03u << (2 * channel));
  4004b4:	2503      	movs	r5, #3
	reg &= ~(0x1u << channel);
  4004b6:	408b      	lsls	r3, r1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b8:	2c00      	cmp	r4, #0
	reg &= ~(0x03u << (2 * channel));
  4004ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
	reg &= ~(0x1u << channel);
  4004be:	ea26 0103 	bic.w	r1, r6, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c2:	bf08      	it	eq
  4004c4:	2300      	moveq	r3, #0
	reg &= ~(0x03u << (2 * channel));
  4004c6:	40a5      	lsls	r5, r4
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c8:	430b      	orrs	r3, r1
	afec->AFEC_DIFFR = reg;
  4004ca:	6603      	str	r3, [r0, #96]	; 0x60
	reg |= (config->gain) << (2 * channel);
  4004cc:	7851      	ldrb	r1, [r2, #1]
	reg = afec->AFEC_CGR;
  4004ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg |= (config->gain) << (2 * channel);
  4004d0:	40a1      	lsls	r1, r4
	reg &= ~(0x03u << (2 * channel));
  4004d2:	ea23 0305 	bic.w	r3, r3, r5
	reg |= (config->gain) << (2 * channel);
  4004d6:	4319      	orrs	r1, r3
}
  4004d8:	bc70      	pop	{r4, r5, r6}
	afec->AFEC_CGR = reg;
  4004da:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004dc:	4770      	bx	lr
  4004de:	bf00      	nop

004004e0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4004e0:	784b      	ldrb	r3, [r1, #1]
  4004e2:	780a      	ldrb	r2, [r1, #0]
  4004e4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4004e6:	6703      	str	r3, [r0, #112]	; 0x70
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4004e8:	f8d1 3002 	ldr.w	r3, [r1, #2]
  4004ec:	6743      	str	r3, [r0, #116]	; 0x74
  4004ee:	4770      	bx	lr

004004f0 <afec_get_config_defaults>:
		cfg->transfer = 1;
  4004f0:	2301      	movs	r3, #1
	cfg->resolution = AFEC_12_BITS;
  4004f2:	2200      	movs	r2, #0
		cfg->tracktim = 2;
  4004f4:	2102      	movs	r1, #2
	cfg->resolution = AFEC_12_BITS;
  4004f6:	6002      	str	r2, [r0, #0]
		cfg->tracktim = 2;
  4004f8:	7401      	strb	r1, [r0, #16]
		cfg->useq = false;
  4004fa:	74c2      	strb	r2, [r0, #19]
		cfg->transfer = 1;
  4004fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4004fe:	7483      	strb	r3, [r0, #18]
		cfg->tag = true;
  400500:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400502:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400504:	7583      	strb	r3, [r0, #22]
{
  400506:	b470      	push	{r4, r5, r6}
	cfg->mck = sysclk_get_cpu_hz();
  400508:	4e04      	ldr	r6, [pc, #16]	; (40051c <afec_get_config_defaults+0x2c>)
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  40050a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
		cfg->afec_clock = 6000000UL;
  40050e:	4d04      	ldr	r5, [pc, #16]	; (400520 <afec_get_config_defaults+0x30>)
	cfg->mck = sysclk_get_cpu_hz();
  400510:	6046      	str	r6, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400512:	6085      	str	r5, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400514:	60c4      	str	r4, [r0, #12]
}
  400516:	bc70      	pop	{r4, r5, r6}
  400518:	4770      	bx	lr
  40051a:	bf00      	nop
  40051c:	11e1a300 	.word	0x11e1a300
  400520:	005b8d80 	.word	0x005b8d80

00400524 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400524:	2200      	movs	r2, #0
   	cfg->gain = AFEC_GAINVALUE_1;
  400526:	2301      	movs	r3, #1
	cfg->diff = false;
  400528:	7002      	strb	r2, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40052a:	7043      	strb	r3, [r0, #1]
  40052c:	4770      	bx	lr
  40052e:	bf00      	nop

00400530 <afec_temp_sensor_get_config_defaults>:
{
  400530:	b410      	push	{r4}
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400532:	2120      	movs	r1, #32
	cfg->rctc = false;
  400534:	2400      	movs	r4, #0
	cfg->low_threshold= 0xFF;
  400536:	22ff      	movs	r2, #255	; 0xff
	cfg->high_threshold= 0xFFF;
  400538:	f640 73ff 	movw	r3, #4095	; 0xfff
	cfg->rctc = false;
  40053c:	7004      	strb	r4, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40053e:	7041      	strb	r1, [r0, #1]
	cfg->low_threshold= 0xFF;
  400540:	8042      	strh	r2, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400542:	8083      	strh	r3, [r0, #4]
}
  400544:	f85d 4b04 	ldr.w	r4, [sp], #4
  400548:	4770      	bx	lr
  40054a:	bf00      	nop

0040054c <afec_init>:
	return afec->AFEC_ISR;
  40054c:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40054e:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400552:	d001      	beq.n	400558 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400554:	2019      	movs	r0, #25
  400556:	4770      	bx	lr
	afec->AFEC_CR = AFEC_CR_SWRST;
  400558:	2301      	movs	r3, #1
{
  40055a:	b5f0      	push	{r4, r5, r6, r7, lr}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40055c:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40055e:	1d0b      	adds	r3, r1, #4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400560:	7c0e      	ldrb	r6, [r1, #16]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400562:	f891 e013 	ldrb.w	lr, [r1, #19]
			AFEC_MR_TRACKTIM(config->tracktim) |
  400566:	0636      	lsls	r6, r6, #24
	if(afec == AFEC0) {
  400568:	4c26      	ldr	r4, [pc, #152]	; (400604 <afec_init+0xb8>)
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056a:	f1be 0f00 	cmp.w	lr, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40056e:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400572:	bf18      	it	ne
  400574:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  400578:	cba8      	ldmia	r3, {r3, r5, r7}
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40057a:	fbb3 f3f5 	udiv	r3, r3, r5
  40057e:	3b01      	subs	r3, #1
			AFEC_MR_TRANSFER(config->transfer) |
  400580:	7c4d      	ldrb	r5, [r1, #17]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400582:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400586:	021b      	lsls	r3, r3, #8
			AFEC_MR_TRANSFER(config->transfer) |
  400588:	072d      	lsls	r5, r5, #28
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40058a:	b29b      	uxth	r3, r3
			AFEC_MR_TRANSFER(config->transfer) |
  40058c:	f005 5540 	and.w	r5, r5, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400590:	433b      	orrs	r3, r7
  400592:	4333      	orrs	r3, r6
  400594:	432b      	orrs	r3, r5
  400596:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400598:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059a:	7d0b      	ldrb	r3, [r1, #20]
			(config->stm ? AFEC_EMR_STM : 0);
  40059c:	7d4d      	ldrb	r5, [r1, #21]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059e:	2b00      	cmp	r3, #0
  4005a0:	680a      	ldr	r2, [r1, #0]
  4005a2:	bf14      	ite	ne
  4005a4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005a8:	2300      	moveq	r3, #0
			(config->stm ? AFEC_EMR_STM : 0);
  4005aa:	2d00      	cmp	r5, #0
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005ac:	ea43 0302 	orr.w	r3, r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005b0:	bf14      	ite	ne
  4005b2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005b6:	2200      	moveq	r2, #0
	if(afec == AFEC0) {
  4005b8:	42a0      	cmp	r0, r4
			(config->resolution) |
  4005ba:	ea43 0302 	orr.w	r3, r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005be:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005c0:	7d8b      	ldrb	r3, [r1, #22]
  4005c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  4005c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ca:	f043 030c 	orr.w	r3, r3, #12
  4005ce:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005d2:	d00d      	beq.n	4005f0 <afec_init+0xa4>
	if(afec == AFEC1) {
  4005d4:	4b0c      	ldr	r3, [pc, #48]	; (400608 <afec_init+0xbc>)
  4005d6:	4298      	cmp	r0, r3
  4005d8:	d001      	beq.n	4005de <afec_init+0x92>
	return STATUS_OK;
  4005da:	2000      	movs	r0, #0
  4005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005de:	4b0b      	ldr	r3, [pc, #44]	; (40060c <afec_init+0xc0>)
			afec_callback_pointer[1][i] = 0;
  4005e0:	2100      	movs	r1, #0
  4005e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005e6:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005ea:	4293      	cmp	r3, r2
  4005ec:	d1fb      	bne.n	4005e6 <afec_init+0x9a>
  4005ee:	e7f4      	b.n	4005da <afec_init+0x8e>
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <afec_init+0xc4>)
			afec_callback_pointer[0][i] = 0;
  4005f2:	2100      	movs	r1, #0
  4005f4:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005f8:	f843 1f04 	str.w	r1, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005fc:	429a      	cmp	r2, r3
  4005fe:	d1fb      	bne.n	4005f8 <afec_init+0xac>
  400600:	e7eb      	b.n	4005da <afec_init+0x8e>
  400602:	bf00      	nop
  400604:	4003c000 	.word	0x4003c000
  400608:	40064000 	.word	0x40064000
  40060c:	20400c14 	.word	0x20400c14
  400610:	20400bd0 	.word	0x20400bd0

00400614 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400614:	4b0b      	ldr	r3, [pc, #44]	; (400644 <afec_enable_interrupt+0x30>)
  400616:	4299      	cmp	r1, r3
  400618:	d007      	beq.n	40062a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40061a:	290b      	cmp	r1, #11
  40061c:	d907      	bls.n	40062e <afec_enable_interrupt+0x1a>
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061e:	290e      	cmp	r1, #14
  400620:	d90a      	bls.n	400638 <afec_enable_interrupt+0x24>
				+ AFEC_INTERRUPT_GAP2);
  400622:	310f      	adds	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400624:	2301      	movs	r3, #1
  400626:	fa03 f101 	lsl.w	r1, r3, r1
  40062a:	6241      	str	r1, [r0, #36]	; 0x24
  40062c:	4770      	bx	lr
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40062e:	d1f9      	bne.n	400624 <afec_enable_interrupt+0x10>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400630:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400634:	6243      	str	r3, [r0, #36]	; 0x24
  400636:	4770      	bx	lr
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400638:	310c      	adds	r1, #12
  40063a:	2301      	movs	r3, #1
  40063c:	fa03 f101 	lsl.w	r1, r3, r1
  400640:	6241      	str	r1, [r0, #36]	; 0x24
  400642:	4770      	bx	lr
  400644:	47000fff 	.word	0x47000fff

00400648 <afec_set_callback>:
{
  400648:	b4f0      	push	{r4, r5, r6, r7}
	if (afec == AFEC1) {
  40064a:	4c12      	ldr	r4, [pc, #72]	; (400694 <afec_set_callback+0x4c>)
  40064c:	42a0      	cmp	r0, r4
  40064e:	d00f      	beq.n	400670 <afec_set_callback+0x28>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400650:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400652:	4c11      	ldr	r4, [pc, #68]	; (400698 <afec_set_callback+0x50>)
  400654:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	afec_callback_pointer[i][source] = callback;
  400658:	4e10      	ldr	r6, [pc, #64]	; (40069c <afec_set_callback+0x54>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40065a:	b2db      	uxtb	r3, r3
  40065c:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400660:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400664:	f884 331d 	strb.w	r3, [r4, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400668:	6025      	str	r5, [r4, #0]
	afec_enable_interrupt(afec, source);
  40066a:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <afec_set_callback+0x58>)
}
  40066c:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  40066e:	4718      	bx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400670:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400672:	4c09      	ldr	r4, [pc, #36]	; (400698 <afec_set_callback+0x50>)
  400674:	f44f 7680 	mov.w	r6, #256	; 0x100
	afec_callback_pointer[i][source] = callback;
  400678:	4f08      	ldr	r7, [pc, #32]	; (40069c <afec_set_callback+0x54>)
  40067a:	f101 0510 	add.w	r5, r1, #16
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40067e:	b2db      	uxtb	r3, r3
  400680:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400684:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400688:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40068c:	6066      	str	r6, [r4, #4]
	afec_enable_interrupt(afec, source);
  40068e:	4b04      	ldr	r3, [pc, #16]	; (4006a0 <afec_set_callback+0x58>)
}
  400690:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  400692:	4718      	bx	r3
  400694:	40064000 	.word	0x40064000
  400698:	e000e100 	.word	0xe000e100
  40069c:	20400bd4 	.word	0x20400bd4
  4006a0:	00400615 	.word	0x00400615

004006a4 <AFEC0_Handler>:
/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
	afec_process_callback(AFEC0);
  4006a4:	4801      	ldr	r0, [pc, #4]	; (4006ac <AFEC0_Handler+0x8>)
  4006a6:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <AFEC0_Handler+0xc>)
  4006a8:	4718      	bx	r3
  4006aa:	bf00      	nop
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	00400441 	.word	0x00400441

004006b4 <AFEC1_Handler>:
/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
	afec_process_callback(AFEC1);
  4006b4:	4801      	ldr	r0, [pc, #4]	; (4006bc <AFEC1_Handler+0x8>)
  4006b6:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <AFEC1_Handler+0xc>)
  4006b8:	4718      	bx	r3
  4006ba:	bf00      	nop
  4006bc:	40064000 	.word	0x40064000
  4006c0:	00400441 	.word	0x00400441

004006c4 <afec_enable>:
	if (afec == AFEC1) {
  4006c4:	4a13      	ldr	r2, [pc, #76]	; (400714 <afec_enable+0x50>)
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006c6:	4b14      	ldr	r3, [pc, #80]	; (400718 <afec_enable+0x54>)
  4006c8:	4290      	cmp	r0, r2
  4006ca:	bf0c      	ite	eq
  4006cc:	2028      	moveq	r0, #40	; 0x28
  4006ce:	201d      	movne	r0, #29
{
  4006d0:	b500      	push	{lr}
  4006d2:	b083      	sub	sp, #12
	pmc_enable_periph_clk(pid);
  4006d4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006d6:	4a11      	ldr	r2, [pc, #68]	; (40071c <afec_enable+0x58>)
  4006d8:	7893      	ldrb	r3, [r2, #2]
  4006da:	2bff      	cmp	r3, #255	; 0xff
  4006dc:	d018      	beq.n	400710 <afec_enable+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006e2:	fab3 f383 	clz	r3, r3
  4006e6:	095b      	lsrs	r3, r3, #5
  4006e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ea:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4006ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006f0:	2000      	movs	r0, #0
  4006f2:	490b      	ldr	r1, [pc, #44]	; (400720 <afec_enable+0x5c>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4006f4:	7893      	ldrb	r3, [r2, #2]
  4006f6:	7008      	strb	r0, [r1, #0]
  4006f8:	3301      	adds	r3, #1
	return flags;
  4006fa:	9801      	ldr	r0, [sp, #4]
  4006fc:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4006fe:	b120      	cbz	r0, 40070a <afec_enable+0x46>
		cpu_irq_enable();
  400700:	2301      	movs	r3, #1
  400702:	700b      	strb	r3, [r1, #0]
  400704:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400708:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40070a:	b003      	add	sp, #12
  40070c:	f85d fb04 	ldr.w	pc, [sp], #4
  400710:	e7fe      	b.n	400710 <afec_enable+0x4c>
  400712:	bf00      	nop
  400714:	40064000 	.word	0x40064000
  400718:	004008d5 	.word	0x004008d5
  40071c:	20400bc0 	.word	0x20400bc0
  400720:	20400000 	.word	0x20400000

00400724 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400724:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400726:	4770      	bx	lr

00400728 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400728:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40072a:	4770      	bx	lr

0040072c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072e:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400730:	4b0f      	ldr	r3, [pc, #60]	; (400770 <pio_handler_process+0x44>)
{
  400732:	460f      	mov	r7, r1
	status = pio_get_interrupt_status(p_pio);
  400734:	4798      	blx	r3
  400736:	4606      	mov	r6, r0
	status &= pio_get_interrupt_mask(p_pio);
  400738:	4b0e      	ldr	r3, [pc, #56]	; (400774 <pio_handler_process+0x48>)
  40073a:	4620      	mov	r0, r4
  40073c:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40073e:	4006      	ands	r6, r0
  400740:	d015      	beq.n	40076e <pio_handler_process+0x42>
  400742:	4c0d      	ldr	r4, [pc, #52]	; (400778 <pio_handler_process+0x4c>)
  400744:	2500      	movs	r5, #0
  400746:	e004      	b.n	400752 <pio_handler_process+0x26>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400748:	2d07      	cmp	r5, #7
  40074a:	f104 0410 	add.w	r4, r4, #16
  40074e:	d00e      	beq.n	40076e <pio_handler_process+0x42>
  400750:	b16e      	cbz	r6, 40076e <pio_handler_process+0x42>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400752:	6823      	ldr	r3, [r4, #0]
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  400754:	3501      	adds	r5, #1
			if (gs_interrupt_sources[i].id == ul_id) {
  400756:	42bb      	cmp	r3, r7
  400758:	d1f6      	bne.n	400748 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40075a:	6861      	ldr	r1, [r4, #4]
  40075c:	4231      	tst	r1, r6
  40075e:	d0f3      	beq.n	400748 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400760:	68e3      	ldr	r3, [r4, #12]
  400762:	4638      	mov	r0, r7
  400764:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400766:	6863      	ldr	r3, [r4, #4]
  400768:	ea26 0603 	bic.w	r6, r6, r3
  40076c:	e7ec      	b.n	400748 <pio_handler_process+0x1c>
  40076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400770:	00400725 	.word	0x00400725
  400774:	00400729 	.word	0x00400729
  400778:	204009d4 	.word	0x204009d4

0040077c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  40077c:	210a      	movs	r1, #10
  40077e:	4801      	ldr	r0, [pc, #4]	; (400784 <PIOA_Handler+0x8>)
  400780:	4b01      	ldr	r3, [pc, #4]	; (400788 <PIOA_Handler+0xc>)
  400782:	4718      	bx	r3
  400784:	400e0e00 	.word	0x400e0e00
  400788:	0040072d 	.word	0x0040072d

0040078c <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  40078c:	210b      	movs	r1, #11
  40078e:	4801      	ldr	r0, [pc, #4]	; (400794 <PIOB_Handler+0x8>)
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <PIOB_Handler+0xc>)
  400792:	4718      	bx	r3
  400794:	400e1000 	.word	0x400e1000
  400798:	0040072d 	.word	0x0040072d

0040079c <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
  40079c:	210c      	movs	r1, #12
  40079e:	4801      	ldr	r0, [pc, #4]	; (4007a4 <PIOC_Handler+0x8>)
  4007a0:	4b01      	ldr	r3, [pc, #4]	; (4007a8 <PIOC_Handler+0xc>)
  4007a2:	4718      	bx	r3
  4007a4:	400e1200 	.word	0x400e1200
  4007a8:	0040072d 	.word	0x0040072d

004007ac <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
  4007ac:	2110      	movs	r1, #16
  4007ae:	4801      	ldr	r0, [pc, #4]	; (4007b4 <PIOD_Handler+0x8>)
  4007b0:	4b01      	ldr	r3, [pc, #4]	; (4007b8 <PIOD_Handler+0xc>)
  4007b2:	4718      	bx	r3
  4007b4:	400e1400 	.word	0x400e1400
  4007b8:	0040072d 	.word	0x0040072d

004007bc <PIOE_Handler>:
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
	pio_handler_process(PIOE, ID_PIOE);
  4007bc:	2111      	movs	r1, #17
  4007be:	4801      	ldr	r0, [pc, #4]	; (4007c4 <PIOE_Handler+0x8>)
  4007c0:	4b01      	ldr	r3, [pc, #4]	; (4007c8 <PIOE_Handler+0xc>)
  4007c2:	4718      	bx	r3
  4007c4:	400e1600 	.word	0x400e1600
  4007c8:	0040072d 	.word	0x0040072d

004007cc <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4007cc:	3802      	subs	r0, #2
  4007ce:	2802      	cmp	r0, #2
  4007d0:	d80d      	bhi.n	4007ee <pmc_mck_set_division+0x22>
  4007d2:	4b08      	ldr	r3, [pc, #32]	; (4007f4 <pmc_mck_set_division+0x28>)
  4007d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007d8:	4907      	ldr	r1, [pc, #28]	; (4007f8 <pmc_mck_set_division+0x2c>)
  4007da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007dc:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4007e2:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  4007e4:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e8:	071b      	lsls	r3, r3, #28
  4007ea:	d5fc      	bpl.n	4007e6 <pmc_mck_set_division+0x1a>
}
  4007ec:	4770      	bx	lr
{
  4007ee:	2000      	movs	r0, #0
  4007f0:	e7f2      	b.n	4007d8 <pmc_mck_set_division+0xc>
  4007f2:	bf00      	nop
  4007f4:	00408650 	.word	0x00408650
  4007f8:	400e0600 	.word	0x400e0600

004007fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007fc:	4913      	ldr	r1, [pc, #76]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  4007fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400804:	4318      	orrs	r0, r3
  400806:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400808:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40080a:	0718      	lsls	r0, r3, #28
  40080c:	d407      	bmi.n	40081e <pmc_switch_mck_to_pllack+0x22>
  40080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400812:	e001      	b.n	400818 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400814:	3b01      	subs	r3, #1
  400816:	d016      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400818:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40081a:	0712      	lsls	r2, r2, #28
  40081c:	d5fa      	bpl.n	400814 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40081e:	490b      	ldr	r1, [pc, #44]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  400820:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400822:	f023 0303 	bic.w	r3, r3, #3
  400826:	f043 0302 	orr.w	r3, r3, #2
  40082a:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40082c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40082e:	0718      	lsls	r0, r3, #28
  400830:	d407      	bmi.n	400842 <pmc_switch_mck_to_pllack+0x46>
  400832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400836:	e001      	b.n	40083c <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400838:	3b01      	subs	r3, #1
  40083a:	d004      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40083c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40083e:	0712      	lsls	r2, r2, #28
  400840:	d5fa      	bpl.n	400838 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  400842:	2000      	movs	r0, #0
}
  400844:	4770      	bx	lr
			return 1;
  400846:	2001      	movs	r0, #1
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	400e0600 	.word	0x400e0600

00400850 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400850:	b9a0      	cbnz	r0, 40087c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400852:	4b0e      	ldr	r3, [pc, #56]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400854:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400856:	480e      	ldr	r0, [pc, #56]	; (400890 <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400858:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40085a:	461a      	mov	r2, r3
{
  40085c:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40085e:	4c0d      	ldr	r4, [pc, #52]	; (400894 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400860:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400862:	402c      	ands	r4, r5
  400864:	4320      	orrs	r0, r4
  400866:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400868:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40086a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40086c:	07db      	lsls	r3, r3, #31
  40086e:	d5fc      	bpl.n	40086a <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400870:	6a11      	ldr	r1, [r2, #32]
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <pmc_switch_mainck_to_xtal+0x48>)
  400874:	430b      	orrs	r3, r1
  400876:	6213      	str	r3, [r2, #32]
	}
}
  400878:	bc30      	pop	{r4, r5}
  40087a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40087c:	4903      	ldr	r1, [pc, #12]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40087e:	4a07      	ldr	r2, [pc, #28]	; (40089c <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400880:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400882:	4b07      	ldr	r3, [pc, #28]	; (4008a0 <pmc_switch_mainck_to_xtal+0x50>)
  400884:	4002      	ands	r2, r0
  400886:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400888:	620b      	str	r3, [r1, #32]
  40088a:	4770      	bx	lr
  40088c:	400e0600 	.word	0x400e0600
  400890:	00370001 	.word	0x00370001
  400894:	ffc8fffc 	.word	0xffc8fffc
  400898:	01370000 	.word	0x01370000
  40089c:	fec8fffc 	.word	0xfec8fffc
  4008a0:	01370002 	.word	0x01370002

004008a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008a4:	4b02      	ldr	r3, [pc, #8]	; (4008b0 <pmc_osc_is_ready_mainck+0xc>)
  4008a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop
  4008b0:	400e0600 	.word	0x400e0600

004008b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008b4:	4b02      	ldr	r3, [pc, #8]	; (4008c0 <pmc_disable_pllack+0xc>)
  4008b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008ba:	629a      	str	r2, [r3, #40]	; 0x28
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0600 	.word	0x400e0600

004008c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008c4:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <pmc_is_locked_pllack+0xc>)
  4008c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c8:	f000 0002 	and.w	r0, r0, #2
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0600 	.word	0x400e0600

004008d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008d4:	283f      	cmp	r0, #63	; 0x3f
  4008d6:	d81a      	bhi.n	40090e <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  4008d8:	281f      	cmp	r0, #31
  4008da:	d80a      	bhi.n	4008f2 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008dc:	2301      	movs	r3, #1
  4008de:	4a0e      	ldr	r2, [pc, #56]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008e0:	fa03 f000 	lsl.w	r0, r3, r0
  4008e4:	6991      	ldr	r1, [r2, #24]
  4008e6:	ea30 0301 	bics.w	r3, r0, r1
  4008ea:	d012      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008ee:	2000      	movs	r0, #0
  4008f0:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f2:	2301      	movs	r3, #1
		ul_id -= 32;
  4008f4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f6:	4a08      	ldr	r2, [pc, #32]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008f8:	fa03 f000 	lsl.w	r0, r3, r0
  4008fc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  400900:	ea30 0303 	bics.w	r3, r0, r3
  400904:	d005      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400906:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40090a:	2000      	movs	r0, #0
  40090c:	4770      	bx	lr
		return 1;
  40090e:	2001      	movs	r0, #1
  400910:	4770      	bx	lr
	return 0;
  400912:	2000      	movs	r0, #0
}
  400914:	4770      	bx	lr
  400916:	bf00      	nop
  400918:	400e0600 	.word	0x400e0600

0040091c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40091c:	6943      	ldr	r3, [r0, #20]
  40091e:	079b      	lsls	r3, r3, #30
  400920:	d502      	bpl.n	400928 <uart_write+0xc>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400922:	61c1      	str	r1, [r0, #28]
	return 0;
  400924:	2000      	movs	r0, #0
  400926:	4770      	bx	lr
		return 1;
  400928:	2001      	movs	r0, #1
}
  40092a:	4770      	bx	lr

0040092c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40092c:	6943      	ldr	r3, [r0, #20]
  40092e:	07db      	lsls	r3, r3, #31
  400930:	d503      	bpl.n	40093a <uart_read+0xe>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400932:	6983      	ldr	r3, [r0, #24]
	return 0;
  400934:	2000      	movs	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400936:	700b      	strb	r3, [r1, #0]
	return 0;
  400938:	4770      	bx	lr
		return 1;
  40093a:	2001      	movs	r0, #1
}
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop

00400940 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400940:	010b      	lsls	r3, r1, #4
  400942:	4293      	cmp	r3, r2
{
  400944:	b410      	push	{r4}
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400946:	d814      	bhi.n	400972 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400948:	0859      	lsrs	r1, r3, #1
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40094a:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40094e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400952:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400956:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400958:	1e59      	subs	r1, r3, #1
  40095a:	42a1      	cmp	r1, r4
  40095c:	d815      	bhi.n	40098a <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40095e:	0412      	lsls	r2, r2, #16

	return 0;
  400960:	2100      	movs	r1, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400962:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400966:	431a      	orrs	r2, r3
  400968:	6202      	str	r2, [r0, #32]
}
  40096a:	4608      	mov	r0, r1
  40096c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400970:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400972:	00c9      	lsls	r1, r1, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400974:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400978:	084b      	lsrs	r3, r1, #1
  40097a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40097e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400982:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400984:	1e59      	subs	r1, r3, #1
  400986:	42a1      	cmp	r1, r4
  400988:	d904      	bls.n	400994 <usart_set_async_baudrate+0x54>
		return 1;
  40098a:	2101      	movs	r1, #1
}
  40098c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400990:	4608      	mov	r0, r1
  400992:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  400994:	6841      	ldr	r1, [r0, #4]
  400996:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40099a:	6041      	str	r1, [r0, #4]
  40099c:	e7df      	b.n	40095e <usart_set_async_baudrate+0x1e>
  40099e:	bf00      	nop

004009a0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_usart->US_MR = 0;
  4009a2:	2400      	movs	r4, #0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009a4:	4d14      	ldr	r5, [pc, #80]	; (4009f8 <usart_init_rs232+0x58>)
	p_usart->US_CR = US_CR_RSTSTA;
  4009a6:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009aa:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009ae:	2724      	movs	r7, #36	; 0x24
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009b0:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4009b4:	6044      	str	r4, [r0, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4009b6:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	p_usart->US_RTOR = 0;
  4009ba:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4009bc:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009be:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009c2:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4009c4:	6006      	str	r6, [r0, #0]
	ul_reg_val = 0;
  4009c6:	4e0d      	ldr	r6, [pc, #52]	; (4009fc <usart_init_rs232+0x5c>)
	p_usart->US_CR = US_CR_RTSDIS;
  4009c8:	6005      	str	r5, [r0, #0]
	ul_reg_val = 0;
  4009ca:	6034      	str	r4, [r6, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4009cc:	b189      	cbz	r1, 4009f2 <usart_init_rs232+0x52>
  4009ce:	460d      	mov	r5, r1
  4009d0:	4b0b      	ldr	r3, [pc, #44]	; (400a00 <usart_init_rs232+0x60>)
  4009d2:	6809      	ldr	r1, [r1, #0]
  4009d4:	4604      	mov	r4, r0
  4009d6:	4798      	blx	r3
  4009d8:	b958      	cbnz	r0, 4009f2 <usart_init_rs232+0x52>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009da:	686a      	ldr	r2, [r5, #4]
  4009dc:	68ab      	ldr	r3, [r5, #8]
  4009de:	692f      	ldr	r7, [r5, #16]
  4009e0:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009e2:	68e9      	ldr	r1, [r5, #12]
	p_usart->US_MR |= ul_reg_val;
  4009e4:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009e6:	433b      	orrs	r3, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009e8:	430b      	orrs	r3, r1
	p_usart->US_MR |= ul_reg_val;
  4009ea:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009ec:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  4009ee:	6062      	str	r2, [r4, #4]
}
  4009f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4009f2:	2001      	movs	r0, #1
  4009f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009f6:	bf00      	nop
  4009f8:	55534100 	.word	0x55534100
  4009fc:	20400a44 	.word	0x20400a44
  400a00:	00400941 	.word	0x00400941

00400a04 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400a04:	2340      	movs	r3, #64	; 0x40
  400a06:	6003      	str	r3, [r0, #0]
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop

00400a0c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400a0c:	2310      	movs	r3, #16
  400a0e:	6003      	str	r3, [r0, #0]
  400a10:	4770      	bx	lr
  400a12:	bf00      	nop

00400a14 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a14:	6942      	ldr	r2, [r0, #20]
{
  400a16:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a18:	0792      	lsls	r2, r2, #30
  400a1a:	d504      	bpl.n	400a26 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400a1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  400a20:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  400a22:	61d9      	str	r1, [r3, #28]
	return 0;
  400a24:	4770      	bx	lr
		return 1;
  400a26:	2001      	movs	r0, #1
}
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop

00400a2c <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a2c:	6943      	ldr	r3, [r0, #20]
  400a2e:	07db      	lsls	r3, r3, #31
  400a30:	d505      	bpl.n	400a3e <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a32:	6983      	ldr	r3, [r0, #24]
	return 0;
  400a34:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a3a:	600b      	str	r3, [r1, #0]
	return 0;
  400a3c:	4770      	bx	lr
		return 1;
  400a3e:	2001      	movs	r0, #1
}
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop

00400a44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a44:	e7fe      	b.n	400a44 <Dummy_Handler>
  400a46:	bf00      	nop

00400a48 <Reset_Handler>:
        if (pSrc != pDest) {
  400a48:	4924      	ldr	r1, [pc, #144]	; (400adc <Reset_Handler+0x94>)
  400a4a:	4a25      	ldr	r2, [pc, #148]	; (400ae0 <Reset_Handler+0x98>)
  400a4c:	4291      	cmp	r1, r2
{
  400a4e:	b500      	push	{lr}
  400a50:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400a52:	d00e      	beq.n	400a72 <Reset_Handler+0x2a>
                for (; pDest < &_erelocate;) {
  400a54:	4823      	ldr	r0, [pc, #140]	; (400ae4 <Reset_Handler+0x9c>)
  400a56:	4282      	cmp	r2, r0
  400a58:	d20b      	bcs.n	400a72 <Reset_Handler+0x2a>
  400a5a:	43d3      	mvns	r3, r2
  400a5c:	4403      	add	r3, r0
  400a5e:	f023 0303 	bic.w	r3, r3, #3
  400a62:	3304      	adds	r3, #4
  400a64:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
  400a66:	f851 0b04 	ldr.w	r0, [r1], #4
  400a6a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400a6e:	429a      	cmp	r2, r3
  400a70:	d1f9      	bne.n	400a66 <Reset_Handler+0x1e>
        for (pDest = &_szero; pDest < &_ezero;) {
  400a72:	4a1d      	ldr	r2, [pc, #116]	; (400ae8 <Reset_Handler+0xa0>)
  400a74:	491d      	ldr	r1, [pc, #116]	; (400aec <Reset_Handler+0xa4>)
  400a76:	428a      	cmp	r2, r1
  400a78:	d20a      	bcs.n	400a90 <Reset_Handler+0x48>
  400a7a:	43d3      	mvns	r3, r2
                *pDest++ = 0;
  400a7c:	2000      	movs	r0, #0
  400a7e:	440b      	add	r3, r1
  400a80:	f023 0303 	bic.w	r3, r3, #3
  400a84:	3304      	adds	r3, #4
  400a86:	4413      	add	r3, r2
  400a88:	f842 0b04 	str.w	r0, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400a8c:	429a      	cmp	r2, r3
  400a8e:	d1fb      	bne.n	400a88 <Reset_Handler+0x40>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a90:	4b17      	ldr	r3, [pc, #92]	; (400af0 <Reset_Handler+0xa8>)
  400a92:	4a18      	ldr	r2, [pc, #96]	; (400af4 <Reset_Handler+0xac>)
  400a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a98:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a9a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a9e:	fab3 f383 	clz	r3, r3
  400aa2:	095b      	lsrs	r3, r3, #5
  400aa4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400aa6:	b672      	cpsid	i
  400aa8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400aac:	4a12      	ldr	r2, [pc, #72]	; (400af8 <Reset_Handler+0xb0>)
  400aae:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ab0:	4912      	ldr	r1, [pc, #72]	; (400afc <Reset_Handler+0xb4>)
  400ab2:	7013      	strb	r3, [r2, #0]
	return flags;
  400ab4:	9801      	ldr	r0, [sp, #4]
  400ab6:	680b      	ldr	r3, [r1, #0]
  400ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400abc:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  400abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ac2:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400ac6:	b120      	cbz	r0, 400ad2 <Reset_Handler+0x8a>
		cpu_irq_enable();
  400ac8:	2301      	movs	r3, #1
  400aca:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  400acc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ad0:	b662      	cpsie	i
        __libc_init_array();
  400ad2:	4b0b      	ldr	r3, [pc, #44]	; (400b00 <Reset_Handler+0xb8>)
  400ad4:	4798      	blx	r3
        main();
  400ad6:	4b0b      	ldr	r3, [pc, #44]	; (400b04 <Reset_Handler+0xbc>)
  400ad8:	4798      	blx	r3
  400ada:	e7fe      	b.n	400ada <Reset_Handler+0x92>
  400adc:	00408a14 	.word	0x00408a14
  400ae0:	20400000 	.word	0x20400000
  400ae4:	204009b8 	.word	0x204009b8
  400ae8:	204009b8 	.word	0x204009b8
  400aec:	20400cc8 	.word	0x20400cc8
  400af0:	00400000 	.word	0x00400000
  400af4:	e000ed00 	.word	0xe000ed00
  400af8:	20400000 	.word	0x20400000
  400afc:	e000ed88 	.word	0xe000ed88
  400b00:	00403195 	.word	0x00403195
  400b04:	00402cd1 	.word	0x00402cd1

00400b08 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b08:	4a31      	ldr	r2, [pc, #196]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b0c:	f003 0303 	and.w	r3, r3, #3
  400b10:	2b01      	cmp	r3, #1
  400b12:	d03d      	beq.n	400b90 <SystemCoreClockUpdate+0x88>
  400b14:	d326      	bcc.n	400b64 <SystemCoreClockUpdate+0x5c>
  400b16:	2b02      	cmp	r3, #2
  400b18:	d00d      	beq.n	400b36 <SystemCoreClockUpdate+0x2e>
  400b1a:	492e      	ldr	r1, [pc, #184]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
  400b1c:	680b      	ldr	r3, [r1, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b1e:	482c      	ldr	r0, [pc, #176]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b20:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b22:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b26:	2a70      	cmp	r2, #112	; 0x70
  400b28:	d02c      	beq.n	400b84 <SystemCoreClockUpdate+0x7c>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b2a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b2c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b30:	40d3      	lsrs	r3, r2
  400b32:	600b      	str	r3, [r1, #0]
  400b34:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b36:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b38:	4926      	ldr	r1, [pc, #152]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b3a:	01db      	lsls	r3, r3, #7
  400b3c:	d538      	bpl.n	400bb0 <SystemCoreClockUpdate+0xa8>
            SystemCoreClock *= 3U;
  400b3e:	4b26      	ldr	r3, [pc, #152]	; (400bd8 <SystemCoreClockUpdate+0xd0>)
  400b40:	600b      	str	r3, [r1, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400b42:	4823      	ldr	r0, [pc, #140]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b44:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b46:	f002 0203 	and.w	r2, r2, #3
  400b4a:	2a02      	cmp	r2, #2
  400b4c:	d1e7      	bne.n	400b1e <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b50:	6a80      	ldr	r0, [r0, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b52:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b56:	b2c0      	uxtb	r0, r0
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b58:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b5c:	fbb3 f3f0 	udiv	r3, r3, r0
  400b60:	600b      	str	r3, [r1, #0]
  400b62:	e7dc      	b.n	400b1e <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b64:	4b1d      	ldr	r3, [pc, #116]	; (400bdc <SystemCoreClockUpdate+0xd4>)
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b66:	491b      	ldr	r1, [pc, #108]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b68:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b6a:	4819      	ldr	r0, [pc, #100]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b6c:	061b      	lsls	r3, r3, #24
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b6e:	bf4c      	ite	mi
  400b70:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b74:	f44f 43fa 	movpl.w	r3, #32000	; 0x7d00
  400b78:	600b      	str	r3, [r1, #0]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b7a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b80:	2a70      	cmp	r2, #112	; 0x70
  400b82:	d1d2      	bne.n	400b2a <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  400b84:	4a16      	ldr	r2, [pc, #88]	; (400be0 <SystemCoreClockUpdate+0xd8>)
  400b86:	fba2 2303 	umull	r2, r3, r2, r3
  400b8a:	085b      	lsrs	r3, r3, #1
  400b8c:	600b      	str	r3, [r1, #0]
  400b8e:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b90:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b92:	4910      	ldr	r1, [pc, #64]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b94:	01d8      	lsls	r0, r3, #7
  400b96:	d408      	bmi.n	400baa <SystemCoreClockUpdate+0xa2>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b98:	4b12      	ldr	r3, [pc, #72]	; (400be4 <SystemCoreClockUpdate+0xdc>)
  400b9a:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b9c:	6a12      	ldr	r2, [r2, #32]
  400b9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400ba2:	2a10      	cmp	r2, #16
  400ba4:	d011      	beq.n	400bca <SystemCoreClockUpdate+0xc2>
  400ba6:	2a20      	cmp	r2, #32
  400ba8:	d1b9      	bne.n	400b1e <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 3U;
  400baa:	4b0b      	ldr	r3, [pc, #44]	; (400bd8 <SystemCoreClockUpdate+0xd0>)
  400bac:	600b      	str	r3, [r1, #0]
          break;
  400bae:	e7b6      	b.n	400b1e <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bb0:	4b0c      	ldr	r3, [pc, #48]	; (400be4 <SystemCoreClockUpdate+0xdc>)
  400bb2:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400bb4:	6a12      	ldr	r2, [r2, #32]
  400bb6:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400bba:	2a10      	cmp	r2, #16
  400bbc:	d002      	beq.n	400bc4 <SystemCoreClockUpdate+0xbc>
  400bbe:	2a20      	cmp	r2, #32
  400bc0:	d0bd      	beq.n	400b3e <SystemCoreClockUpdate+0x36>
  400bc2:	e7be      	b.n	400b42 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400bc4:	4b08      	ldr	r3, [pc, #32]	; (400be8 <SystemCoreClockUpdate+0xe0>)
  400bc6:	600b      	str	r3, [r1, #0]
          break;
  400bc8:	e7bb      	b.n	400b42 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400bca:	4b07      	ldr	r3, [pc, #28]	; (400be8 <SystemCoreClockUpdate+0xe0>)
  400bcc:	600b      	str	r3, [r1, #0]
          break;
  400bce:	e7a6      	b.n	400b1e <SystemCoreClockUpdate+0x16>
  400bd0:	400e0600 	.word	0x400e0600
  400bd4:	20400004 	.word	0x20400004
  400bd8:	00b71b00 	.word	0x00b71b00
  400bdc:	400e1810 	.word	0x400e1810
  400be0:	aaaaaaab 	.word	0xaaaaaaab
  400be4:	003d0900 	.word	0x003d0900
  400be8:	007a1200 	.word	0x007a1200

00400bec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400bec:	4b16      	ldr	r3, [pc, #88]	; (400c48 <system_init_flash+0x5c>)
  400bee:	4298      	cmp	r0, r3
  400bf0:	d917      	bls.n	400c22 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400bf2:	4b16      	ldr	r3, [pc, #88]	; (400c4c <system_init_flash+0x60>)
  400bf4:	4298      	cmp	r0, r3
  400bf6:	d910      	bls.n	400c1a <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400bf8:	4b15      	ldr	r3, [pc, #84]	; (400c50 <system_init_flash+0x64>)
  400bfa:	4298      	cmp	r0, r3
  400bfc:	d91a      	bls.n	400c34 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400bfe:	4b15      	ldr	r3, [pc, #84]	; (400c54 <system_init_flash+0x68>)
  400c00:	4298      	cmp	r0, r3
  400c02:	d913      	bls.n	400c2c <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400c04:	4b14      	ldr	r3, [pc, #80]	; (400c58 <system_init_flash+0x6c>)
  400c06:	4298      	cmp	r0, r3
  400c08:	d918      	bls.n	400c3c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400c0a:	4b14      	ldr	r3, [pc, #80]	; (400c5c <system_init_flash+0x70>)
  400c0c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c0e:	4b14      	ldr	r3, [pc, #80]	; (400c60 <system_init_flash+0x74>)
  400c10:	bf94      	ite	ls
  400c12:	4a14      	ldrls	r2, [pc, #80]	; (400c64 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400c14:	4a14      	ldrhi	r2, [pc, #80]	; (400c68 <system_init_flash+0x7c>)
  400c16:	601a      	str	r2, [r3, #0]
  400c18:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c1a:	4b11      	ldr	r3, [pc, #68]	; (400c60 <system_init_flash+0x74>)
  400c1c:	4a13      	ldr	r2, [pc, #76]	; (400c6c <system_init_flash+0x80>)
  400c1e:	601a      	str	r2, [r3, #0]
  400c20:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c22:	4b0f      	ldr	r3, [pc, #60]	; (400c60 <system_init_flash+0x74>)
  400c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c28:	601a      	str	r2, [r3, #0]
  400c2a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c2c:	4b0c      	ldr	r3, [pc, #48]	; (400c60 <system_init_flash+0x74>)
  400c2e:	4a10      	ldr	r2, [pc, #64]	; (400c70 <system_init_flash+0x84>)
  400c30:	601a      	str	r2, [r3, #0]
  400c32:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c34:	4b0a      	ldr	r3, [pc, #40]	; (400c60 <system_init_flash+0x74>)
  400c36:	4a0f      	ldr	r2, [pc, #60]	; (400c74 <system_init_flash+0x88>)
  400c38:	601a      	str	r2, [r3, #0]
  400c3a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c3c:	4b08      	ldr	r3, [pc, #32]	; (400c60 <system_init_flash+0x74>)
  400c3e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400c42:	601a      	str	r2, [r3, #0]
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	015ef3bf 	.word	0x015ef3bf
  400c4c:	02bde77f 	.word	0x02bde77f
  400c50:	041cdb3f 	.word	0x041cdb3f
  400c54:	057bceff 	.word	0x057bceff
  400c58:	06dac2bf 	.word	0x06dac2bf
  400c5c:	0839b67f 	.word	0x0839b67f
  400c60:	400e0c00 	.word	0x400e0c00
  400c64:	04000500 	.word	0x04000500
  400c68:	04000600 	.word	0x04000600
  400c6c:	04000100 	.word	0x04000100
  400c70:	04000300 	.word	0x04000300
  400c74:	04000200 	.word	0x04000200

00400c78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400c78:	4a0d      	ldr	r2, [pc, #52]	; (400cb0 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  400c7a:	490e      	ldr	r1, [pc, #56]	; (400cb4 <_sbrk+0x3c>)
	if (heap == NULL) {
  400c7c:	6813      	ldr	r3, [r2, #0]
  400c7e:	b143      	cbz	r3, 400c92 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  400c80:	4418      	add	r0, r3
  400c82:	4281      	cmp	r1, r0
  400c84:	db02      	blt.n	400c8c <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c86:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c88:	4618      	mov	r0, r3
  400c8a:	4770      	bx	lr
		return (caddr_t) -1;	
  400c8c:	f04f 30ff 	mov.w	r0, #4294967295
  400c90:	4770      	bx	lr
{
  400c92:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  400c94:	4c08      	ldr	r4, [pc, #32]	; (400cb8 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  400c96:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  400c98:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  400c9a:	4281      	cmp	r1, r0
  400c9c:	db04      	blt.n	400ca8 <_sbrk+0x30>
	heap += incr;
  400c9e:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  400ca0:	4620      	mov	r0, r4
}
  400ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ca6:	4770      	bx	lr
		return (caddr_t) -1;	
  400ca8:	f04f 30ff 	mov.w	r0, #4294967295
  400cac:	e7f9      	b.n	400ca2 <_sbrk+0x2a>
  400cae:	bf00      	nop
  400cb0:	20400a48 	.word	0x20400a48
  400cb4:	2045fffc 	.word	0x2045fffc
  400cb8:	20402ec8 	.word	0x20402ec8

00400cbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400cbc:	f04f 30ff 	mov.w	r0, #4294967295
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop

00400cc4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  400cc8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  400cca:	604b      	str	r3, [r1, #4]
}
  400ccc:	4770      	bx	lr
  400cce:	bf00      	nop

00400cd0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400cd0:	2001      	movs	r0, #1
  400cd2:	4770      	bx	lr

00400cd4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400cd4:	2000      	movs	r0, #0
  400cd6:	4770      	bx	lr

00400cd8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400cd8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400cdc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400ce0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400ce2:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce6:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce8:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400cec:	4770      	bx	lr
  400cee:	bf00      	nop

00400cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400cf0:	2300      	movs	r3, #0
  400cf2:	6103      	str	r3, [r0, #16]
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop

00400cf8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400cf8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400cfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400cfc:	689a      	ldr	r2, [r3, #8]
  400cfe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400d00:	689a      	ldr	r2, [r3, #8]
  400d02:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400d04:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400d06:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400d08:	6803      	ldr	r3, [r0, #0]
  400d0a:	3301      	adds	r3, #1
  400d0c:	6003      	str	r3, [r0, #0]
  400d0e:	4770      	bx	lr

00400d10 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400d10:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400d12:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400d14:	1c6b      	adds	r3, r5, #1
  400d16:	d011      	beq.n	400d3c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d18:	f100 0208 	add.w	r2, r0, #8
  400d1c:	e000      	b.n	400d20 <vListInsert+0x10>
  400d1e:	461a      	mov	r2, r3
  400d20:	6853      	ldr	r3, [r2, #4]
  400d22:	681c      	ldr	r4, [r3, #0]
  400d24:	42a5      	cmp	r5, r4
  400d26:	d2fa      	bcs.n	400d1e <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400d28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400d2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400d2c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400d2e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400d30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400d32:	6803      	ldr	r3, [r0, #0]
  400d34:	3301      	adds	r3, #1
}
  400d36:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  400d38:	6003      	str	r3, [r0, #0]
}
  400d3a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  400d3c:	6902      	ldr	r2, [r0, #16]
  400d3e:	6853      	ldr	r3, [r2, #4]
  400d40:	e7f2      	b.n	400d28 <vListInsert+0x18>
  400d42:	bf00      	nop

00400d44 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400d44:	6842      	ldr	r2, [r0, #4]
  400d46:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400d48:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400d4a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400d4c:	6882      	ldr	r2, [r0, #8]
  400d4e:	6841      	ldr	r1, [r0, #4]
  400d50:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400d52:	685a      	ldr	r2, [r3, #4]
  400d54:	4290      	cmp	r0, r2
  400d56:	d005      	beq.n	400d64 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400d58:	2200      	movs	r2, #0
  400d5a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400d5c:	6818      	ldr	r0, [r3, #0]
  400d5e:	3801      	subs	r0, #1
  400d60:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400d62:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400d64:	6882      	ldr	r2, [r0, #8]
  400d66:	605a      	str	r2, [r3, #4]
  400d68:	e7f6      	b.n	400d58 <uxListRemove+0x14>
  400d6a:	bf00      	nop

00400d6c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400d6c:	4b0c      	ldr	r3, [pc, #48]	; (400da0 <prvTaskExitError+0x34>)
  400d6e:	681b      	ldr	r3, [r3, #0]
  400d70:	3301      	adds	r3, #1
  400d72:	d00a      	beq.n	400d8a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d74:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d78:	b672      	cpsid	i
  400d7a:	f383 8811 	msr	BASEPRI, r3
  400d7e:	f3bf 8f6f 	isb	sy
  400d82:	f3bf 8f4f 	dsb	sy
  400d86:	b662      	cpsie	i
  400d88:	e7fe      	b.n	400d88 <prvTaskExitError+0x1c>
  400d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d8e:	b672      	cpsid	i
  400d90:	f383 8811 	msr	BASEPRI, r3
  400d94:	f3bf 8f6f 	isb	sy
  400d98:	f3bf 8f4f 	dsb	sy
  400d9c:	b662      	cpsie	i
  400d9e:	e7fe      	b.n	400d9e <prvTaskExitError+0x32>
  400da0:	20400008 	.word	0x20400008

00400da4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400da4:	4806      	ldr	r0, [pc, #24]	; (400dc0 <prvPortStartFirstTask+0x1c>)
  400da6:	6800      	ldr	r0, [r0, #0]
  400da8:	6800      	ldr	r0, [r0, #0]
  400daa:	f380 8808 	msr	MSP, r0
  400dae:	b662      	cpsie	i
  400db0:	b661      	cpsie	f
  400db2:	f3bf 8f4f 	dsb	sy
  400db6:	f3bf 8f6f 	isb	sy
  400dba:	df00      	svc	0
  400dbc:	bf00      	nop
  400dbe:	0000      	.short	0x0000
  400dc0:	e000ed08 	.word	0xe000ed08

00400dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400dd4 <vPortEnableVFP+0x10>
  400dc8:	6801      	ldr	r1, [r0, #0]
  400dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400dce:	6001      	str	r1, [r0, #0]
  400dd0:	4770      	bx	lr
  400dd2:	0000      	.short	0x0000
  400dd4:	e000ed88 	.word	0xe000ed88

00400dd8 <pxPortInitialiseStack>:
{
  400dd8:	b470      	push	{r4, r5, r6}
  400dda:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400ddc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400de0:	4d07      	ldr	r5, [pc, #28]	; (400e00 <pxPortInitialiseStack+0x28>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400de2:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400de6:	f840 1c08 	str.w	r1, [r0, #-8]
}
  400dea:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400dec:	f843 2c20 	str.w	r2, [r3, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400df0:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400df4:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400df8:	f843 4c24 	str.w	r4, [r3, #-36]
}
  400dfc:	bc70      	pop	{r4, r5, r6}
  400dfe:	4770      	bx	lr
  400e00:	00400d6d 	.word	0x00400d6d

00400e04 <SVC_Handler>:
	__asm volatile (
  400e04:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pxCurrentTCBConst2>)
  400e06:	6819      	ldr	r1, [r3, #0]
  400e08:	6808      	ldr	r0, [r1, #0]
  400e0a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e0e:	f380 8809 	msr	PSP, r0
  400e12:	f3bf 8f6f 	isb	sy
  400e16:	f04f 0000 	mov.w	r0, #0
  400e1a:	f380 8811 	msr	BASEPRI, r0
  400e1e:	4770      	bx	lr

00400e20 <pxCurrentTCBConst2>:
  400e20:	20400a54 	.word	0x20400a54
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop

00400e28 <vPortEnterCritical>:
  400e28:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e2c:	b672      	cpsid	i
  400e2e:	f383 8811 	msr	BASEPRI, r3
  400e32:	f3bf 8f6f 	isb	sy
  400e36:	f3bf 8f4f 	dsb	sy
  400e3a:	b662      	cpsie	i
	uxCriticalNesting++;
  400e3c:	4a0b      	ldr	r2, [pc, #44]	; (400e6c <vPortEnterCritical+0x44>)
  400e3e:	6813      	ldr	r3, [r2, #0]
  400e40:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
  400e42:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  400e44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400e46:	d000      	beq.n	400e4a <vPortEnterCritical+0x22>
  400e48:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400e4a:	4b09      	ldr	r3, [pc, #36]	; (400e70 <vPortEnterCritical+0x48>)
  400e4c:	681b      	ldr	r3, [r3, #0]
  400e4e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400e52:	d0f9      	beq.n	400e48 <vPortEnterCritical+0x20>
  400e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e58:	b672      	cpsid	i
  400e5a:	f383 8811 	msr	BASEPRI, r3
  400e5e:	f3bf 8f6f 	isb	sy
  400e62:	f3bf 8f4f 	dsb	sy
  400e66:	b662      	cpsie	i
  400e68:	e7fe      	b.n	400e68 <vPortEnterCritical+0x40>
  400e6a:	bf00      	nop
  400e6c:	20400008 	.word	0x20400008
  400e70:	e000ed04 	.word	0xe000ed04

00400e74 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400e74:	4a09      	ldr	r2, [pc, #36]	; (400e9c <vPortExitCritical+0x28>)
  400e76:	6813      	ldr	r3, [r2, #0]
  400e78:	b953      	cbnz	r3, 400e90 <vPortExitCritical+0x1c>
  400e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e7e:	b672      	cpsid	i
  400e80:	f383 8811 	msr	BASEPRI, r3
  400e84:	f3bf 8f6f 	isb	sy
  400e88:	f3bf 8f4f 	dsb	sy
  400e8c:	b662      	cpsie	i
  400e8e:	e7fe      	b.n	400e8e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400e90:	3b01      	subs	r3, #1
  400e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400e94:	b90b      	cbnz	r3, 400e9a <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400e96:	f383 8811 	msr	BASEPRI, r3
  400e9a:	4770      	bx	lr
  400e9c:	20400008 	.word	0x20400008

00400ea0 <PendSV_Handler>:
	__asm volatile
  400ea0:	f3ef 8009 	mrs	r0, PSP
  400ea4:	f3bf 8f6f 	isb	sy
  400ea8:	4b15      	ldr	r3, [pc, #84]	; (400f00 <pxCurrentTCBConst>)
  400eaa:	681a      	ldr	r2, [r3, #0]
  400eac:	f01e 0f10 	tst.w	lr, #16
  400eb0:	bf08      	it	eq
  400eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eba:	6010      	str	r0, [r2, #0]
  400ebc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400ec0:	f04f 0080 	mov.w	r0, #128	; 0x80
  400ec4:	b672      	cpsid	i
  400ec6:	f380 8811 	msr	BASEPRI, r0
  400eca:	f3bf 8f4f 	dsb	sy
  400ece:	f3bf 8f6f 	isb	sy
  400ed2:	b662      	cpsie	i
  400ed4:	f001 f86e 	bl	401fb4 <vTaskSwitchContext>
  400ed8:	f04f 0000 	mov.w	r0, #0
  400edc:	f380 8811 	msr	BASEPRI, r0
  400ee0:	bc08      	pop	{r3}
  400ee2:	6819      	ldr	r1, [r3, #0]
  400ee4:	6808      	ldr	r0, [r1, #0]
  400ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eea:	f01e 0f10 	tst.w	lr, #16
  400eee:	bf08      	it	eq
  400ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400ef4:	f380 8809 	msr	PSP, r0
  400ef8:	f3bf 8f6f 	isb	sy
  400efc:	4770      	bx	lr
  400efe:	bf00      	nop

00400f00 <pxCurrentTCBConst>:
  400f00:	20400a54 	.word	0x20400a54
  400f04:	4770      	bx	lr
  400f06:	bf00      	nop

00400f08 <SysTick_Handler>:
{
  400f08:	b508      	push	{r3, lr}
	__asm volatile
  400f0a:	f3ef 8311 	mrs	r3, BASEPRI
  400f0e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400f12:	b672      	cpsid	i
  400f14:	f382 8811 	msr	BASEPRI, r2
  400f18:	f3bf 8f6f 	isb	sy
  400f1c:	f3bf 8f4f 	dsb	sy
  400f20:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400f22:	4b05      	ldr	r3, [pc, #20]	; (400f38 <SysTick_Handler+0x30>)
  400f24:	4798      	blx	r3
  400f26:	b118      	cbz	r0, 400f30 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400f28:	4b04      	ldr	r3, [pc, #16]	; (400f3c <SysTick_Handler+0x34>)
  400f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f2e:	601a      	str	r2, [r3, #0]
	__asm volatile
  400f30:	2300      	movs	r3, #0
  400f32:	f383 8811 	msr	BASEPRI, r3
  400f36:	bd08      	pop	{r3, pc}
  400f38:	00401c75 	.word	0x00401c75
  400f3c:	e000ed04 	.word	0xe000ed04

00400f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f40:	4903      	ldr	r1, [pc, #12]	; (400f50 <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f42:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f44:	4803      	ldr	r0, [pc, #12]	; (400f54 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f46:	4b04      	ldr	r3, [pc, #16]	; (400f58 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f48:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f4a:	601a      	str	r2, [r3, #0]
  400f4c:	4770      	bx	lr
  400f4e:	bf00      	nop
  400f50:	e000e014 	.word	0xe000e014
  400f54:	000927bf 	.word	0x000927bf
  400f58:	e000e010 	.word	0xe000e010

00400f5c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f5c:	4b23      	ldr	r3, [pc, #140]	; (400fec <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400f5e:	2207      	movs	r2, #7
  400f60:	4823      	ldr	r0, [pc, #140]	; (400ff0 <xPortStartScheduler+0x94>)
{
  400f62:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f64:	7819      	ldrb	r1, [r3, #0]
{
  400f66:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400f68:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f6a:	4c22      	ldr	r4, [pc, #136]	; (400ff4 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f6c:	b2c9      	uxtb	r1, r1
  400f6e:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400f70:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f72:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400f74:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f76:	b2db      	uxtb	r3, r3
  400f78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f80:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f88:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f8a:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f8c:	d50d      	bpl.n	400faa <xPortStartScheduler+0x4e>
  400f8e:	2206      	movs	r2, #6
  400f90:	e000      	b.n	400f94 <xPortStartScheduler+0x38>
  400f92:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400f94:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f98:	1e51      	subs	r1, r2, #1
  400f9a:	005b      	lsls	r3, r3, #1
  400f9c:	b2db      	uxtb	r3, r3
  400f9e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400fa6:	061b      	lsls	r3, r3, #24
  400fa8:	d4f3      	bmi.n	400f92 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400faa:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400fac:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fae:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <xPortStartScheduler+0x9c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400fb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400fb4:	b2c9      	uxtb	r1, r1
  400fb6:	4c0d      	ldr	r4, [pc, #52]	; (400fec <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400fb8:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400fba:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fbc:	681a      	ldr	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400fbe:	490f      	ldr	r1, [pc, #60]	; (400ffc <xPortStartScheduler+0xa0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fc0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400fc6:	681a      	ldr	r2, [r3, #0]
  400fc8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400fcc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400fce:	4788      	blx	r1
	uxCriticalNesting = 0;
  400fd0:	4a0b      	ldr	r2, [pc, #44]	; (401000 <xPortStartScheduler+0xa4>)
  400fd2:	2100      	movs	r1, #0
	vPortEnableVFP();
  400fd4:	4b0b      	ldr	r3, [pc, #44]	; (401004 <xPortStartScheduler+0xa8>)
	uxCriticalNesting = 0;
  400fd6:	6011      	str	r1, [r2, #0]
	vPortEnableVFP();
  400fd8:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400fda:	4a0b      	ldr	r2, [pc, #44]	; (401008 <xPortStartScheduler+0xac>)
	prvPortStartFirstTask();
  400fdc:	490b      	ldr	r1, [pc, #44]	; (40100c <xPortStartScheduler+0xb0>)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400fde:	6813      	ldr	r3, [r2, #0]
  400fe0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400fe4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400fe6:	4788      	blx	r1
	prvTaskExitError();
  400fe8:	4b09      	ldr	r3, [pc, #36]	; (401010 <xPortStartScheduler+0xb4>)
  400fea:	4798      	blx	r3
  400fec:	e000e400 	.word	0xe000e400
  400ff0:	20400a50 	.word	0x20400a50
  400ff4:	20400a4c 	.word	0x20400a4c
  400ff8:	e000ed20 	.word	0xe000ed20
  400ffc:	00400f41 	.word	0x00400f41
  401000:	20400008 	.word	0x20400008
  401004:	00400dc5 	.word	0x00400dc5
  401008:	e000ef34 	.word	0xe000ef34
  40100c:	00400da5 	.word	0x00400da5
  401010:	00400d6d 	.word	0x00400d6d

00401014 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401014:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401018:	2b0f      	cmp	r3, #15
  40101a:	d910      	bls.n	40103e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40101c:	4912      	ldr	r1, [pc, #72]	; (401068 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40101e:	4a13      	ldr	r2, [pc, #76]	; (40106c <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401020:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401022:	7812      	ldrb	r2, [r2, #0]
  401024:	429a      	cmp	r2, r3
  401026:	d90a      	bls.n	40103e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  401028:	f04f 0380 	mov.w	r3, #128	; 0x80
  40102c:	b672      	cpsid	i
  40102e:	f383 8811 	msr	BASEPRI, r3
  401032:	f3bf 8f6f 	isb	sy
  401036:	f3bf 8f4f 	dsb	sy
  40103a:	b662      	cpsie	i
  40103c:	e7fe      	b.n	40103c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40103e:	4b0c      	ldr	r3, [pc, #48]	; (401070 <vPortValidateInterruptPriority+0x5c>)
  401040:	4a0c      	ldr	r2, [pc, #48]	; (401074 <vPortValidateInterruptPriority+0x60>)
  401042:	681b      	ldr	r3, [r3, #0]
  401044:	6812      	ldr	r2, [r2, #0]
  401046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40104a:	4293      	cmp	r3, r2
  40104c:	d90a      	bls.n	401064 <vPortValidateInterruptPriority+0x50>
  40104e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401052:	b672      	cpsid	i
  401054:	f383 8811 	msr	BASEPRI, r3
  401058:	f3bf 8f6f 	isb	sy
  40105c:	f3bf 8f4f 	dsb	sy
  401060:	b662      	cpsie	i
  401062:	e7fe      	b.n	401062 <vPortValidateInterruptPriority+0x4e>
  401064:	4770      	bx	lr
  401066:	bf00      	nop
  401068:	e000e3f0 	.word	0xe000e3f0
  40106c:	20400a4c 	.word	0x20400a4c
  401070:	e000ed0c 	.word	0xe000ed0c
  401074:	20400a50 	.word	0x20400a50

00401078 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401078:	b510      	push	{r4, lr}
  40107a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40107c:	4b07      	ldr	r3, [pc, #28]	; (40109c <pvPortMalloc+0x24>)
  40107e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401080:	4b07      	ldr	r3, [pc, #28]	; (4010a0 <pvPortMalloc+0x28>)
  401082:	4620      	mov	r0, r4
  401084:	4798      	blx	r3
  401086:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401088:	4b06      	ldr	r3, [pc, #24]	; (4010a4 <pvPortMalloc+0x2c>)
  40108a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40108c:	b10c      	cbz	r4, 401092 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40108e:	4620      	mov	r0, r4
  401090:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401092:	4b05      	ldr	r3, [pc, #20]	; (4010a8 <pvPortMalloc+0x30>)
  401094:	4798      	blx	r3
}
  401096:	4620      	mov	r0, r4
  401098:	bd10      	pop	{r4, pc}
  40109a:	bf00      	nop
  40109c:	00401c59 	.word	0x00401c59
  4010a0:	004031e5 	.word	0x004031e5
  4010a4:	00401de9 	.word	0x00401de9
  4010a8:	00402cb9 	.word	0x00402cb9

004010ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4010ac:	b150      	cbz	r0, 4010c4 <vPortFree+0x18>
	{
		vTaskSuspendAll();
  4010ae:	4b06      	ldr	r3, [pc, #24]	; (4010c8 <vPortFree+0x1c>)
{
  4010b0:	b510      	push	{r4, lr}
  4010b2:	4604      	mov	r4, r0
		vTaskSuspendAll();
  4010b4:	4798      	blx	r3
		{
			free( pv );
  4010b6:	4b05      	ldr	r3, [pc, #20]	; (4010cc <vPortFree+0x20>)
  4010b8:	4620      	mov	r0, r4
  4010ba:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4010bc:	4b04      	ldr	r3, [pc, #16]	; (4010d0 <vPortFree+0x24>)
	}
}
  4010be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		( void ) xTaskResumeAll();
  4010c2:	4718      	bx	r3
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop
  4010c8:	00401c59 	.word	0x00401c59
  4010cc:	004031f5 	.word	0x004031f5
  4010d0:	00401de9 	.word	0x00401de9

004010d4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4010d4:	b538      	push	{r3, r4, r5, lr}
  4010d6:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4010d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  4010da:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4010dc:	b942      	cbnz	r2, 4010f0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010de:	6805      	ldr	r5, [r0, #0]
  4010e0:	b10d      	cbz	r5, 4010e6 <prvCopyDataToQueue+0x12>
BaseType_t xReturn = pdFALSE;
  4010e2:	2000      	movs	r0, #0
  4010e4:	e029      	b.n	40113a <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4010e6:	6840      	ldr	r0, [r0, #4]
  4010e8:	4b16      	ldr	r3, [pc, #88]	; (401144 <prvCopyDataToQueue+0x70>)
  4010ea:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4010ec:	6065      	str	r5, [r4, #4]
  4010ee:	e024      	b.n	40113a <prvCopyDataToQueue+0x66>
  4010f0:	4b15      	ldr	r3, [pc, #84]	; (401148 <prvCopyDataToQueue+0x74>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4010f2:	b965      	cbnz	r5, 40110e <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4010f4:	6880      	ldr	r0, [r0, #8]
  4010f6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4010f8:	68a3      	ldr	r3, [r4, #8]
  4010fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4010fc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4010fe:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401100:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401102:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401104:	d3ed      	bcc.n	4010e2 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401106:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  401108:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40110a:	60a3      	str	r3, [r4, #8]
  40110c:	e015      	b.n	40113a <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40110e:	68c0      	ldr	r0, [r0, #12]
  401110:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401112:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401114:	68e2      	ldr	r2, [r4, #12]
  401116:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401118:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40111a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40111c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40111e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401120:	d202      	bcs.n	401128 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401122:	6862      	ldr	r2, [r4, #4]
  401124:	4413      	add	r3, r2
  401126:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  401128:	2d02      	cmp	r5, #2
  40112a:	d1da      	bne.n	4010e2 <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40112c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40112e:	2b00      	cmp	r3, #0
  401130:	d0d7      	beq.n	4010e2 <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  401132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401134:	2000      	movs	r0, #0
				--( pxQueue->uxMessagesWaiting );
  401136:	3b01      	subs	r3, #1
  401138:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40113a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40113c:	3301      	adds	r3, #1
  40113e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401140:	bd38      	pop	{r3, r4, r5, pc}
  401142:	bf00      	nop
  401144:	00402391 	.word	0x00402391
  401148:	00403765 	.word	0x00403765

0040114c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40114c:	b530      	push	{r4, r5, lr}
  40114e:	b083      	sub	sp, #12
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401150:	6d44      	ldr	r4, [r0, #84]	; 0x54
	{
  401152:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401154:	b1ac      	cbz	r4, 401182 <prvNotifyQueueSetContainer+0x36>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40115a:	429a      	cmp	r2, r3
  40115c:	d30a      	bcc.n	401174 <prvNotifyQueueSetContainer+0x28>
  40115e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401162:	b672      	cpsid	i
  401164:	f383 8811 	msr	BASEPRI, r3
  401168:	f3bf 8f6f 	isb	sy
  40116c:	f3bf 8f4f 	dsb	sy
  401170:	b662      	cpsie	i
  401172:	e7fe      	b.n	401172 <prvNotifyQueueSetContainer+0x26>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401174:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401176:	4293      	cmp	r3, r2
  401178:	d80e      	bhi.n	401198 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40117a:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40117c:	4628      	mov	r0, r5
  40117e:	b003      	add	sp, #12
  401180:	bd30      	pop	{r4, r5, pc}
  401182:	f04f 0380 	mov.w	r3, #128	; 0x80
  401186:	b672      	cpsid	i
  401188:	f383 8811 	msr	BASEPRI, r3
  40118c:	f3bf 8f6f 	isb	sy
  401190:	f3bf 8f4f 	dsb	sy
  401194:	b662      	cpsie	i
  401196:	e7fe      	b.n	401196 <prvNotifyQueueSetContainer+0x4a>
  401198:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40119a:	4b0d      	ldr	r3, [pc, #52]	; (4011d0 <prvNotifyQueueSetContainer+0x84>)
  40119c:	a901      	add	r1, sp, #4
  40119e:	4620      	mov	r0, r4
  4011a0:	4798      	blx	r3
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4011a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4011a4:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4011a6:	3301      	adds	r3, #1
  4011a8:	d005      	beq.n	4011b6 <prvNotifyQueueSetContainer+0x6a>
				( pxQueueSetContainer->xTxLock )++;
  4011aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	}
  4011ac:	4628      	mov	r0, r5
				( pxQueueSetContainer->xTxLock )++;
  4011ae:	3301      	adds	r3, #1
  4011b0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  4011b2:	b003      	add	sp, #12
  4011b4:	bd30      	pop	{r4, r5, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4011b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011b8:	2b00      	cmp	r3, #0
  4011ba:	d0df      	beq.n	40117c <prvNotifyQueueSetContainer+0x30>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4011bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011c0:	4b04      	ldr	r3, [pc, #16]	; (4011d4 <prvNotifyQueueSetContainer+0x88>)
  4011c2:	4798      	blx	r3
						xReturn = pdTRUE;
  4011c4:	2800      	cmp	r0, #0
  4011c6:	bf18      	it	ne
  4011c8:	2501      	movne	r5, #1
	}
  4011ca:	4628      	mov	r0, r5
  4011cc:	b003      	add	sp, #12
  4011ce:	bd30      	pop	{r4, r5, pc}
  4011d0:	004010d5 	.word	0x004010d5
  4011d4:	0040216d 	.word	0x0040216d

004011d8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4011d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  4011da:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4011dc:	b172      	cbz	r2, 4011fc <prvCopyDataFromQueue+0x24>
  4011de:	4608      	mov	r0, r1
{
  4011e0:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011e2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011e4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011e6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011e8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011ea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011ec:	d301      	bcc.n	4011f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4011ee:	6819      	ldr	r1, [r3, #0]
  4011f0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4011f2:	68d9      	ldr	r1, [r3, #12]
}
  4011f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4011f8:	4b01      	ldr	r3, [pc, #4]	; (401200 <prvCopyDataFromQueue+0x28>)
  4011fa:	4718      	bx	r3
  4011fc:	4770      	bx	lr
  4011fe:	bf00      	nop
  401200:	00403765 	.word	0x00403765

00401204 <prvUnlockQueue>:
{
  401204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401208:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40120a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4012a8 <prvUnlockQueue+0xa4>
  40120e:	47c0      	blx	r8
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401212:	2b00      	cmp	r3, #0
  401214:	dd1a      	ble.n	40124c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401216:	4d20      	ldr	r5, [pc, #128]	; (401298 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401218:	4f20      	ldr	r7, [pc, #128]	; (40129c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40121a:	4e21      	ldr	r6, [pc, #132]	; (4012a0 <prvUnlockQueue+0x9c>)
  40121c:	e008      	b.n	401230 <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40121e:	47a8      	blx	r5
  401220:	2801      	cmp	r0, #1
  401222:	d011      	beq.n	401248 <prvUnlockQueue+0x44>
			--( pxQueue->xTxLock );
  401224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401226:	3b01      	subs	r3, #1
  401228:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40122a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40122c:	2b00      	cmp	r3, #0
  40122e:	dd0d      	ble.n	40124c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401230:	6d63      	ldr	r3, [r4, #84]	; 0x54
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401232:	2100      	movs	r1, #0
  401234:	4620      	mov	r0, r4
				if( pxQueue->pxQueueSetContainer != NULL )
  401236:	2b00      	cmp	r3, #0
  401238:	d1f1      	bne.n	40121e <prvUnlockQueue+0x1a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40123a:	6a63      	ldr	r3, [r4, #36]	; 0x24
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40123c:	f104 0024 	add.w	r0, r4, #36	; 0x24
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401240:	b123      	cbz	r3, 40124c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401242:	47b0      	blx	r6
  401244:	2800      	cmp	r0, #0
  401246:	d0ed      	beq.n	401224 <prvUnlockQueue+0x20>
						vTaskMissedYield();
  401248:	47b8      	blx	r7
  40124a:	e7eb      	b.n	401224 <prvUnlockQueue+0x20>
		pxQueue->xTxLock = queueUNLOCKED;
  40124c:	f04f 33ff 	mov.w	r3, #4294967295
	taskEXIT_CRITICAL();
  401250:	4f14      	ldr	r7, [pc, #80]	; (4012a4 <prvUnlockQueue+0xa0>)
		pxQueue->xTxLock = queueUNLOCKED;
  401252:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401254:	47b8      	blx	r7
	taskENTER_CRITICAL();
  401256:	47c0      	blx	r8
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401258:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40125a:	2b00      	cmp	r3, #0
  40125c:	dd15      	ble.n	40128a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40125e:	6923      	ldr	r3, [r4, #16]
  401260:	b19b      	cbz	r3, 40128a <prvUnlockQueue+0x86>
  401262:	f104 0610 	add.w	r6, r4, #16
  401266:	4d0e      	ldr	r5, [pc, #56]	; (4012a0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401268:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40129c <prvUnlockQueue+0x98>
  40126c:	e007      	b.n	40127e <prvUnlockQueue+0x7a>
				--( pxQueue->xRxLock );
  40126e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401270:	3b01      	subs	r3, #1
  401272:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401274:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401276:	2b00      	cmp	r3, #0
  401278:	dd07      	ble.n	40128a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40127a:	6923      	ldr	r3, [r4, #16]
  40127c:	b12b      	cbz	r3, 40128a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40127e:	4630      	mov	r0, r6
  401280:	47a8      	blx	r5
  401282:	2800      	cmp	r0, #0
  401284:	d0f3      	beq.n	40126e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
  401286:	47c0      	blx	r8
  401288:	e7f1      	b.n	40126e <prvUnlockQueue+0x6a>
		pxQueue->xRxLock = queueUNLOCKED;
  40128a:	f04f 33ff 	mov.w	r3, #4294967295
  40128e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401290:	463b      	mov	r3, r7
}
  401292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  401296:	4718      	bx	r3
  401298:	0040114d 	.word	0x0040114d
  40129c:	004022bd 	.word	0x004022bd
  4012a0:	0040216d 	.word	0x0040216d
  4012a4:	00400e75 	.word	0x00400e75
  4012a8:	00400e29 	.word	0x00400e29

004012ac <xQueueGenericCreate.part.1>:
  4012ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012b0:	b672      	cpsid	i
  4012b2:	f383 8811 	msr	BASEPRI, r3
  4012b6:	f3bf 8f6f 	isb	sy
  4012ba:	f3bf 8f4f 	dsb	sy
  4012be:	b662      	cpsie	i
  4012c0:	e7fe      	b.n	4012c0 <xQueueGenericCreate.part.1+0x14>
	...

004012c4 <xQueueGenericReset>:
{
  4012c4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxQueue );
  4012c6:	b1d8      	cbz	r0, 401300 <xQueueGenericReset+0x3c>
  4012c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4012ca:	4b1d      	ldr	r3, [pc, #116]	; (401340 <xQueueGenericReset+0x7c>)
  4012cc:	460e      	mov	r6, r1
  4012ce:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
		pxQueue->xRxLock = queueUNLOCKED;
  4012d2:	f04f 35ff 	mov.w	r5, #4294967295
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4012d8:	2100      	movs	r1, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012da:	6822      	ldr	r2, [r4, #0]
  4012dc:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4012e0:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012e2:	1a18      	subs	r0, r3, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012e4:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4012e6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012e8:	4402      	add	r2, r0
		pxQueue->xRxLock = queueUNLOCKED;
  4012ea:	6465      	str	r5, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012ec:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012ee:	60e2      	str	r2, [r4, #12]
		pxQueue->xTxLock = queueUNLOCKED;
  4012f0:	64a5      	str	r5, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4012f2:	b9ce      	cbnz	r6, 401328 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4012f4:	6923      	ldr	r3, [r4, #16]
  4012f6:	b92b      	cbnz	r3, 401304 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
  4012f8:	4b12      	ldr	r3, [pc, #72]	; (401344 <xQueueGenericReset+0x80>)
  4012fa:	4798      	blx	r3
}
  4012fc:	2001      	movs	r0, #1
  4012fe:	bd70      	pop	{r4, r5, r6, pc}
  401300:	4b11      	ldr	r3, [pc, #68]	; (401348 <xQueueGenericReset+0x84>)
  401302:	4798      	blx	r3
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401304:	f104 0010 	add.w	r0, r4, #16
  401308:	4b10      	ldr	r3, [pc, #64]	; (40134c <xQueueGenericReset+0x88>)
  40130a:	4798      	blx	r3
  40130c:	2801      	cmp	r0, #1
  40130e:	d1f3      	bne.n	4012f8 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  401310:	4b0f      	ldr	r3, [pc, #60]	; (401350 <xQueueGenericReset+0x8c>)
  401312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401316:	601a      	str	r2, [r3, #0]
  401318:	f3bf 8f4f 	dsb	sy
  40131c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
  401320:	4b08      	ldr	r3, [pc, #32]	; (401344 <xQueueGenericReset+0x80>)
  401322:	4798      	blx	r3
}
  401324:	2001      	movs	r0, #1
  401326:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401328:	f104 0010 	add.w	r0, r4, #16
  40132c:	4d09      	ldr	r5, [pc, #36]	; (401354 <xQueueGenericReset+0x90>)
  40132e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401330:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401334:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401336:	4b03      	ldr	r3, [pc, #12]	; (401344 <xQueueGenericReset+0x80>)
  401338:	4798      	blx	r3
}
  40133a:	2001      	movs	r0, #1
  40133c:	bd70      	pop	{r4, r5, r6, pc}
  40133e:	bf00      	nop
  401340:	00400e29 	.word	0x00400e29
  401344:	00400e75 	.word	0x00400e75
  401348:	004012ad 	.word	0x004012ad
  40134c:	0040216d 	.word	0x0040216d
  401350:	e000ed04 	.word	0xe000ed04
  401354:	00400cd9 	.word	0x00400cd9

00401358 <xQueueGenericCreate>:
{
  401358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40135a:	b950      	cbnz	r0, 401372 <xQueueGenericCreate+0x1a>
  40135c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401360:	b672      	cpsid	i
  401362:	f383 8811 	msr	BASEPRI, r3
  401366:	f3bf 8f6f 	isb	sy
  40136a:	f3bf 8f4f 	dsb	sy
  40136e:	b662      	cpsie	i
  401370:	e7fe      	b.n	401370 <xQueueGenericCreate+0x18>
  401372:	4606      	mov	r6, r0
  401374:	4617      	mov	r7, r2
  401376:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401378:	b1a9      	cbz	r1, 4013a6 <xQueueGenericCreate+0x4e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40137a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40137e:	4b0e      	ldr	r3, [pc, #56]	; (4013b8 <xQueueGenericCreate+0x60>)
  401380:	3059      	adds	r0, #89	; 0x59
  401382:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401384:	4604      	mov	r4, r0
  401386:	b1a8      	cbz	r0, 4013b4 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401388:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40138c:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40138e:	63e6      	str	r6, [r4, #60]	; 0x3c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401390:	2101      	movs	r1, #1
		pxNewQueue->uxItemSize = uxItemSize;
  401392:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401394:	4620      	mov	r0, r4
  401396:	4b09      	ldr	r3, [pc, #36]	; (4013bc <xQueueGenericCreate+0x64>)
  401398:	4798      	blx	r3
			pxNewQueue->pxQueueSetContainer = NULL;
  40139a:	2300      	movs	r3, #0
			pxNewQueue->ucQueueType = ucQueueType;
  40139c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
}
  4013a0:	4620      	mov	r0, r4
			pxNewQueue->pxQueueSetContainer = NULL;
  4013a2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4013a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4013a6:	2058      	movs	r0, #88	; 0x58
  4013a8:	4b03      	ldr	r3, [pc, #12]	; (4013b8 <xQueueGenericCreate+0x60>)
  4013aa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4013ac:	4604      	mov	r4, r0
  4013ae:	b108      	cbz	r0, 4013b4 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4013b0:	6024      	str	r4, [r4, #0]
  4013b2:	e7ec      	b.n	40138e <xQueueGenericCreate+0x36>
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <xQueueGenericCreate+0x68>)
  4013b6:	4798      	blx	r3
  4013b8:	00401079 	.word	0x00401079
  4013bc:	004012c5 	.word	0x004012c5
  4013c0:	004012ad 	.word	0x004012ad

004013c4 <xQueueGenericSend>:
{
  4013c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013c8:	b085      	sub	sp, #20
  4013ca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4013cc:	2800      	cmp	r0, #0
  4013ce:	f000 80b7 	beq.w	401540 <xQueueGenericSend+0x17c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013d2:	2900      	cmp	r1, #0
  4013d4:	f000 809e 	beq.w	401514 <xQueueGenericSend+0x150>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013d8:	2b02      	cmp	r3, #2
  4013da:	f000 808c 	beq.w	4014f6 <xQueueGenericSend+0x132>
  4013de:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4013e0:	4b63      	ldr	r3, [pc, #396]	; (401570 <xQueueGenericSend+0x1ac>)
  4013e2:	4604      	mov	r4, r0
  4013e4:	4688      	mov	r8, r1
  4013e6:	4798      	blx	r3
  4013e8:	b910      	cbnz	r0, 4013f0 <xQueueGenericSend+0x2c>
  4013ea:	9b01      	ldr	r3, [sp, #4]
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d16a      	bne.n	4014c6 <xQueueGenericSend+0x102>
  4013f0:	f1a6 0502 	sub.w	r5, r6, #2
{
  4013f4:	f04f 0a00 	mov.w	sl, #0
  4013f8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 40159c <xQueueGenericSend+0x1d8>
  4013fc:	fab5 f585 	clz	r5, r5
  401400:	4f5c      	ldr	r7, [pc, #368]	; (401574 <xQueueGenericSend+0x1b0>)
					vTaskSetTimeOutState( &xTimeOut );
  401402:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4015a0 <xQueueGenericSend+0x1dc>
  401406:	096d      	lsrs	r5, r5, #5
  401408:	e022      	b.n	401450 <xQueueGenericSend+0x8c>
  40140a:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  40140e:	47b8      	blx	r7
		vTaskSuspendAll();
  401410:	4b59      	ldr	r3, [pc, #356]	; (401578 <xQueueGenericSend+0x1b4>)
  401412:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401414:	47c8      	blx	r9
  401416:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401418:	3301      	adds	r3, #1
  40141a:	f000 80a6 	beq.w	40156a <xQueueGenericSend+0x1a6>
  40141e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401420:	3301      	adds	r3, #1
  401422:	f000 809f 	beq.w	401564 <xQueueGenericSend+0x1a0>
  401426:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401428:	4650      	mov	r0, sl
  40142a:	a901      	add	r1, sp, #4
  40142c:	4b53      	ldr	r3, [pc, #332]	; (40157c <xQueueGenericSend+0x1b8>)
  40142e:	4798      	blx	r3
  401430:	2800      	cmp	r0, #0
  401432:	f040 8090 	bne.w	401556 <xQueueGenericSend+0x192>
	taskENTER_CRITICAL();
  401436:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401438:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40143a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40143c:	429a      	cmp	r2, r3
  40143e:	d017      	beq.n	401470 <xQueueGenericSend+0xac>
	taskEXIT_CRITICAL();
  401440:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  401442:	4b4f      	ldr	r3, [pc, #316]	; (401580 <xQueueGenericSend+0x1bc>)
  401444:	4620      	mov	r0, r4
  401446:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401448:	4b4e      	ldr	r3, [pc, #312]	; (401584 <xQueueGenericSend+0x1c0>)
  40144a:	4798      	blx	r3
  40144c:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  401450:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401452:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401456:	429a      	cmp	r2, r3
  401458:	d325      	bcc.n	4014a6 <xQueueGenericSend+0xe2>
  40145a:	bb25      	cbnz	r5, 4014a6 <xQueueGenericSend+0xe2>
				if( xTicksToWait == ( TickType_t ) 0 )
  40145c:	9b01      	ldr	r3, [sp, #4]
  40145e:	b1eb      	cbz	r3, 40149c <xQueueGenericSend+0xd8>
				else if( xEntryTimeSet == pdFALSE )
  401460:	f1ba 0f00 	cmp.w	sl, #0
  401464:	d1d1      	bne.n	40140a <xQueueGenericSend+0x46>
					vTaskSetTimeOutState( &xTimeOut );
  401466:	f10d 0a08 	add.w	sl, sp, #8
  40146a:	4650      	mov	r0, sl
  40146c:	47d8      	blx	fp
  40146e:	e7ce      	b.n	40140e <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  401470:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401472:	9901      	ldr	r1, [sp, #4]
  401474:	f104 0010 	add.w	r0, r4, #16
  401478:	4b43      	ldr	r3, [pc, #268]	; (401588 <xQueueGenericSend+0x1c4>)
  40147a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40147c:	4b40      	ldr	r3, [pc, #256]	; (401580 <xQueueGenericSend+0x1bc>)
  40147e:	4620      	mov	r0, r4
  401480:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401482:	4b40      	ldr	r3, [pc, #256]	; (401584 <xQueueGenericSend+0x1c0>)
  401484:	4798      	blx	r3
  401486:	2800      	cmp	r0, #0
  401488:	d1e0      	bne.n	40144c <xQueueGenericSend+0x88>
					portYIELD_WITHIN_API();
  40148a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40148e:	4a3f      	ldr	r2, [pc, #252]	; (40158c <xQueueGenericSend+0x1c8>)
  401490:	6013      	str	r3, [r2, #0]
  401492:	f3bf 8f4f 	dsb	sy
  401496:	f3bf 8f6f 	isb	sy
  40149a:	e7d7      	b.n	40144c <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
  40149c:	47b8      	blx	r7
					return errQUEUE_FULL;
  40149e:	4628      	mov	r0, r5
}
  4014a0:	b005      	add	sp, #20
  4014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4014a6:	4b3a      	ldr	r3, [pc, #232]	; (401590 <xQueueGenericSend+0x1cc>)
  4014a8:	4641      	mov	r1, r8
  4014aa:	4632      	mov	r2, r6
  4014ac:	4620      	mov	r0, r4
  4014ae:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4014b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4014b2:	b19b      	cbz	r3, 4014dc <xQueueGenericSend+0x118>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4014b4:	4631      	mov	r1, r6
  4014b6:	4620      	mov	r0, r4
  4014b8:	4b36      	ldr	r3, [pc, #216]	; (401594 <xQueueGenericSend+0x1d0>)
  4014ba:	4798      	blx	r3
  4014bc:	2801      	cmp	r0, #1
  4014be:	d011      	beq.n	4014e4 <xQueueGenericSend+0x120>
				taskEXIT_CRITICAL();
  4014c0:	47b8      	blx	r7
				return pdPASS;
  4014c2:	2001      	movs	r0, #1
  4014c4:	e7ec      	b.n	4014a0 <xQueueGenericSend+0xdc>
  4014c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ca:	b672      	cpsid	i
  4014cc:	f383 8811 	msr	BASEPRI, r3
  4014d0:	f3bf 8f6f 	isb	sy
  4014d4:	f3bf 8f4f 	dsb	sy
  4014d8:	b662      	cpsie	i
  4014da:	e7fe      	b.n	4014da <xQueueGenericSend+0x116>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014de:	bb43      	cbnz	r3, 401532 <xQueueGenericSend+0x16e>
						else if( xYieldRequired != pdFALSE )
  4014e0:	2800      	cmp	r0, #0
  4014e2:	d0ed      	beq.n	4014c0 <xQueueGenericSend+0xfc>
							queueYIELD_IF_USING_PREEMPTION();
  4014e4:	4b29      	ldr	r3, [pc, #164]	; (40158c <xQueueGenericSend+0x1c8>)
  4014e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014ea:	601a      	str	r2, [r3, #0]
  4014ec:	f3bf 8f4f 	dsb	sy
  4014f0:	f3bf 8f6f 	isb	sy
  4014f4:	e7e4      	b.n	4014c0 <xQueueGenericSend+0xfc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4014f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  4014f8:	2a01      	cmp	r2, #1
  4014fa:	f43f af70 	beq.w	4013de <xQueueGenericSend+0x1a>
  4014fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401502:	b672      	cpsid	i
  401504:	f383 8811 	msr	BASEPRI, r3
  401508:	f3bf 8f6f 	isb	sy
  40150c:	f3bf 8f4f 	dsb	sy
  401510:	b662      	cpsie	i
  401512:	e7fe      	b.n	401512 <xQueueGenericSend+0x14e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401514:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401516:	2a00      	cmp	r2, #0
  401518:	f43f af5e 	beq.w	4013d8 <xQueueGenericSend+0x14>
  40151c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401520:	b672      	cpsid	i
  401522:	f383 8811 	msr	BASEPRI, r3
  401526:	f3bf 8f6f 	isb	sy
  40152a:	f3bf 8f4f 	dsb	sy
  40152e:	b662      	cpsie	i
  401530:	e7fe      	b.n	401530 <xQueueGenericSend+0x16c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401532:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401536:	4b18      	ldr	r3, [pc, #96]	; (401598 <xQueueGenericSend+0x1d4>)
  401538:	4798      	blx	r3
  40153a:	2801      	cmp	r0, #1
  40153c:	d1c0      	bne.n	4014c0 <xQueueGenericSend+0xfc>
  40153e:	e7d1      	b.n	4014e4 <xQueueGenericSend+0x120>
  401540:	f04f 0380 	mov.w	r3, #128	; 0x80
  401544:	b672      	cpsid	i
  401546:	f383 8811 	msr	BASEPRI, r3
  40154a:	f3bf 8f6f 	isb	sy
  40154e:	f3bf 8f4f 	dsb	sy
  401552:	b662      	cpsie	i
  401554:	e7fe      	b.n	401554 <xQueueGenericSend+0x190>
			prvUnlockQueue( pxQueue );
  401556:	4620      	mov	r0, r4
  401558:	4b09      	ldr	r3, [pc, #36]	; (401580 <xQueueGenericSend+0x1bc>)
  40155a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40155c:	4b09      	ldr	r3, [pc, #36]	; (401584 <xQueueGenericSend+0x1c0>)
  40155e:	4798      	blx	r3
			return errQUEUE_FULL;
  401560:	2000      	movs	r0, #0
  401562:	e79d      	b.n	4014a0 <xQueueGenericSend+0xdc>
		prvLockQueue( pxQueue );
  401564:	2300      	movs	r3, #0
  401566:	64a3      	str	r3, [r4, #72]	; 0x48
  401568:	e75d      	b.n	401426 <xQueueGenericSend+0x62>
  40156a:	2300      	movs	r3, #0
  40156c:	6463      	str	r3, [r4, #68]	; 0x44
  40156e:	e756      	b.n	40141e <xQueueGenericSend+0x5a>
  401570:	004022c9 	.word	0x004022c9
  401574:	00400e75 	.word	0x00400e75
  401578:	00401c59 	.word	0x00401c59
  40157c:	00402225 	.word	0x00402225
  401580:	00401205 	.word	0x00401205
  401584:	00401de9 	.word	0x00401de9
  401588:	00402065 	.word	0x00402065
  40158c:	e000ed04 	.word	0xe000ed04
  401590:	004010d5 	.word	0x004010d5
  401594:	0040114d 	.word	0x0040114d
  401598:	0040216d 	.word	0x0040216d
  40159c:	00400e29 	.word	0x00400e29
  4015a0:	00402201 	.word	0x00402201

004015a4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4015a4:	b328      	cbz	r0, 4015f2 <xQueueGenericSendFromISR+0x4e>
{
  4015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015aa:	2900      	cmp	r1, #0
  4015ac:	d047      	beq.n	40163e <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4015ae:	2b02      	cmp	r3, #2
  4015b0:	d037      	beq.n	401622 <xQueueGenericSendFromISR+0x7e>
  4015b2:	461d      	mov	r5, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4015b4:	4b37      	ldr	r3, [pc, #220]	; (401694 <xQueueGenericSendFromISR+0xf0>)
  4015b6:	4604      	mov	r4, r0
  4015b8:	4690      	mov	r8, r2
  4015ba:	460e      	mov	r6, r1
  4015bc:	4798      	blx	r3
	__asm volatile
  4015be:	f3ef 8711 	mrs	r7, BASEPRI
  4015c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c6:	b672      	cpsid	i
  4015c8:	f383 8811 	msr	BASEPRI, r3
  4015cc:	f3bf 8f6f 	isb	sy
  4015d0:	f3bf 8f4f 	dsb	sy
  4015d4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4015d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015da:	429a      	cmp	r2, r3
  4015dc:	d314      	bcc.n	401608 <xQueueGenericSendFromISR+0x64>
  4015de:	f1a5 0002 	sub.w	r0, r5, #2
  4015e2:	fab0 f080 	clz	r0, r0
  4015e6:	0940      	lsrs	r0, r0, #5
  4015e8:	b970      	cbnz	r0, 401608 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  4015ea:	f387 8811 	msr	BASEPRI, r7
}
  4015ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4015f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f6:	b672      	cpsid	i
  4015f8:	f383 8811 	msr	BASEPRI, r3
  4015fc:	f3bf 8f6f 	isb	sy
  401600:	f3bf 8f4f 	dsb	sy
  401604:	b662      	cpsie	i
  401606:	e7fe      	b.n	401606 <xQueueGenericSendFromISR+0x62>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401608:	4b23      	ldr	r3, [pc, #140]	; (401698 <xQueueGenericSendFromISR+0xf4>)
  40160a:	4631      	mov	r1, r6
  40160c:	462a      	mov	r2, r5
  40160e:	4620      	mov	r0, r4
  401610:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401614:	3301      	adds	r3, #1
  401616:	d020      	beq.n	40165a <xQueueGenericSendFromISR+0xb6>
				++( pxQueue->xTxLock );
  401618:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40161a:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  40161c:	4403      	add	r3, r0
  40161e:	64a3      	str	r3, [r4, #72]	; 0x48
  401620:	e7e3      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401622:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  401624:	2c01      	cmp	r4, #1
  401626:	d0c4      	beq.n	4015b2 <xQueueGenericSendFromISR+0xe>
  401628:	f04f 0380 	mov.w	r3, #128	; 0x80
  40162c:	b672      	cpsid	i
  40162e:	f383 8811 	msr	BASEPRI, r3
  401632:	f3bf 8f6f 	isb	sy
  401636:	f3bf 8f4f 	dsb	sy
  40163a:	b662      	cpsie	i
  40163c:	e7fe      	b.n	40163c <xQueueGenericSendFromISR+0x98>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40163e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  401640:	2c00      	cmp	r4, #0
  401642:	d0b4      	beq.n	4015ae <xQueueGenericSendFromISR+0xa>
  401644:	f04f 0380 	mov.w	r3, #128	; 0x80
  401648:	b672      	cpsid	i
  40164a:	f383 8811 	msr	BASEPRI, r3
  40164e:	f3bf 8f6f 	isb	sy
  401652:	f3bf 8f4f 	dsb	sy
  401656:	b662      	cpsie	i
  401658:	e7fe      	b.n	401658 <xQueueGenericSendFromISR+0xb4>
					if( pxQueue->pxQueueSetContainer != NULL )
  40165a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40165c:	b163      	cbz	r3, 401678 <xQueueGenericSendFromISR+0xd4>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40165e:	4629      	mov	r1, r5
  401660:	4620      	mov	r0, r4
  401662:	4b0e      	ldr	r3, [pc, #56]	; (40169c <xQueueGenericSendFromISR+0xf8>)
  401664:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401666:	2801      	cmp	r0, #1
  401668:	d108      	bne.n	40167c <xQueueGenericSendFromISR+0xd8>
  40166a:	f1b8 0f00 	cmp.w	r8, #0
  40166e:	d005      	beq.n	40167c <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401670:	2001      	movs	r0, #1
  401672:	f8c8 0000 	str.w	r0, [r8]
  401676:	e7b8      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401678:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40167a:	b90b      	cbnz	r3, 401680 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
  40167c:	2001      	movs	r0, #1
  40167e:	e7b4      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401680:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401684:	4b06      	ldr	r3, [pc, #24]	; (4016a0 <xQueueGenericSendFromISR+0xfc>)
  401686:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401688:	f1b8 0f00 	cmp.w	r8, #0
  40168c:	d0f6      	beq.n	40167c <xQueueGenericSendFromISR+0xd8>
  40168e:	2800      	cmp	r0, #0
  401690:	d1ee      	bne.n	401670 <xQueueGenericSendFromISR+0xcc>
  401692:	e7f3      	b.n	40167c <xQueueGenericSendFromISR+0xd8>
  401694:	00401015 	.word	0x00401015
  401698:	004010d5 	.word	0x004010d5
  40169c:	0040114d 	.word	0x0040114d
  4016a0:	0040216d 	.word	0x0040216d

004016a4 <xQueueGenericReceive>:
{
  4016a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016a8:	b087      	sub	sp, #28
  4016aa:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
  4016ac:	2800      	cmp	r0, #0
  4016ae:	d066      	beq.n	40177e <xQueueGenericReceive+0xda>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016b0:	2900      	cmp	r1, #0
  4016b2:	f000 80af 	beq.w	401814 <xQueueGenericReceive+0x170>
  4016b6:	9301      	str	r3, [sp, #4]
  4016b8:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016ba:	4b5e      	ldr	r3, [pc, #376]	; (401834 <xQueueGenericReceive+0x190>)
  4016bc:	460f      	mov	r7, r1
  4016be:	4798      	blx	r3
  4016c0:	b960      	cbnz	r0, 4016dc <xQueueGenericReceive+0x38>
  4016c2:	9b03      	ldr	r3, [sp, #12]
  4016c4:	b15b      	cbz	r3, 4016de <xQueueGenericReceive+0x3a>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xQueueGenericReceive+0x36>
  4016dc:	2300      	movs	r3, #0
  4016de:	4e56      	ldr	r6, [pc, #344]	; (401838 <xQueueGenericReceive+0x194>)
  4016e0:	4d56      	ldr	r5, [pc, #344]	; (40183c <xQueueGenericReceive+0x198>)
					vTaskSetTimeOutState( &xTimeOut );
  4016e2:	f8df b180 	ldr.w	fp, [pc, #384]	; 401864 <xQueueGenericReceive+0x1c0>
		vTaskSuspendAll();
  4016e6:	f8df a180 	ldr.w	sl, [pc, #384]	; 401868 <xQueueGenericReceive+0x1c4>
					portYIELD_WITHIN_API();
  4016ea:	f8df 9174 	ldr.w	r9, [pc, #372]	; 401860 <xQueueGenericReceive+0x1bc>
  4016ee:	e006      	b.n	4016fe <xQueueGenericReceive+0x5a>
	taskEXIT_CRITICAL();
  4016f0:	47a8      	blx	r5
				prvUnlockQueue( pxQueue );
  4016f2:	4b53      	ldr	r3, [pc, #332]	; (401840 <xQueueGenericReceive+0x19c>)
  4016f4:	4620      	mov	r0, r4
  4016f6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016f8:	4b52      	ldr	r3, [pc, #328]	; (401844 <xQueueGenericReceive+0x1a0>)
  4016fa:	4798      	blx	r3
  4016fc:	2301      	movs	r3, #1
  4016fe:	9302      	str	r3, [sp, #8]
		taskENTER_CRITICAL();
  401700:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401702:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401704:	9b02      	ldr	r3, [sp, #8]
  401706:	2a00      	cmp	r2, #0
  401708:	d156      	bne.n	4017b8 <xQueueGenericReceive+0x114>
				if( xTicksToWait == ( TickType_t ) 0 )
  40170a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40170e:	f1b8 0f00 	cmp.w	r8, #0
  401712:	d04e      	beq.n	4017b2 <xQueueGenericReceive+0x10e>
					vTaskSetTimeOutState( &xTimeOut );
  401714:	f10d 0810 	add.w	r8, sp, #16
				else if( xEntryTimeSet == pdFALSE )
  401718:	b90b      	cbnz	r3, 40171e <xQueueGenericReceive+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
  40171a:	4640      	mov	r0, r8
  40171c:	47d8      	blx	fp
		taskEXIT_CRITICAL();
  40171e:	47a8      	blx	r5
		vTaskSuspendAll();
  401720:	47d0      	blx	sl
		prvLockQueue( pxQueue );
  401722:	47b0      	blx	r6
  401724:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401726:	3301      	adds	r3, #1
  401728:	d101      	bne.n	40172e <xQueueGenericReceive+0x8a>
  40172a:	2300      	movs	r3, #0
  40172c:	6463      	str	r3, [r4, #68]	; 0x44
  40172e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401730:	3301      	adds	r3, #1
  401732:	d101      	bne.n	401738 <xQueueGenericReceive+0x94>
  401734:	2300      	movs	r3, #0
  401736:	64a3      	str	r3, [r4, #72]	; 0x48
  401738:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40173a:	4640      	mov	r0, r8
  40173c:	a903      	add	r1, sp, #12
  40173e:	4b42      	ldr	r3, [pc, #264]	; (401848 <xQueueGenericReceive+0x1a4>)
  401740:	4798      	blx	r3
  401742:	2800      	cmp	r0, #0
  401744:	d12c      	bne.n	4017a0 <xQueueGenericReceive+0xfc>
	taskENTER_CRITICAL();
  401746:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40174a:	2b00      	cmp	r3, #0
  40174c:	d1d0      	bne.n	4016f0 <xQueueGenericReceive+0x4c>
	taskEXIT_CRITICAL();
  40174e:	47a8      	blx	r5
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401750:	6823      	ldr	r3, [r4, #0]
  401752:	b1fb      	cbz	r3, 401794 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401754:	9903      	ldr	r1, [sp, #12]
  401756:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40175a:	4b3c      	ldr	r3, [pc, #240]	; (40184c <xQueueGenericReceive+0x1a8>)
  40175c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40175e:	4b38      	ldr	r3, [pc, #224]	; (401840 <xQueueGenericReceive+0x19c>)
  401760:	4620      	mov	r0, r4
  401762:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401764:	4b37      	ldr	r3, [pc, #220]	; (401844 <xQueueGenericReceive+0x1a0>)
  401766:	4798      	blx	r3
  401768:	2800      	cmp	r0, #0
  40176a:	d1c7      	bne.n	4016fc <xQueueGenericReceive+0x58>
					portYIELD_WITHIN_API();
  40176c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401770:	f8c9 3000 	str.w	r3, [r9]
  401774:	f3bf 8f4f 	dsb	sy
  401778:	f3bf 8f6f 	isb	sy
  40177c:	e7be      	b.n	4016fc <xQueueGenericReceive+0x58>
  40177e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401782:	b672      	cpsid	i
  401784:	f383 8811 	msr	BASEPRI, r3
  401788:	f3bf 8f6f 	isb	sy
  40178c:	f3bf 8f4f 	dsb	sy
  401790:	b662      	cpsie	i
  401792:	e7fe      	b.n	401792 <xQueueGenericReceive+0xee>
						taskENTER_CRITICAL();
  401794:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401796:	6860      	ldr	r0, [r4, #4]
  401798:	4b2d      	ldr	r3, [pc, #180]	; (401850 <xQueueGenericReceive+0x1ac>)
  40179a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40179c:	47a8      	blx	r5
  40179e:	e7d9      	b.n	401754 <xQueueGenericReceive+0xb0>
			prvUnlockQueue( pxQueue );
  4017a0:	4620      	mov	r0, r4
  4017a2:	4b27      	ldr	r3, [pc, #156]	; (401840 <xQueueGenericReceive+0x19c>)
  4017a4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4017a6:	4b27      	ldr	r3, [pc, #156]	; (401844 <xQueueGenericReceive+0x1a0>)
  4017a8:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4017aa:	2000      	movs	r0, #0
}
  4017ac:	b007      	add	sp, #28
  4017ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskEXIT_CRITICAL();
  4017b2:	47a8      	blx	r5
					return errQUEUE_EMPTY;
  4017b4:	4640      	mov	r0, r8
  4017b6:	e7f9      	b.n	4017ac <xQueueGenericReceive+0x108>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017b8:	4b26      	ldr	r3, [pc, #152]	; (401854 <xQueueGenericReceive+0x1b0>)
  4017ba:	4639      	mov	r1, r7
  4017bc:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4017be:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017c0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4017c2:	9b01      	ldr	r3, [sp, #4]
  4017c4:	b963      	cbnz	r3, 4017e0 <xQueueGenericReceive+0x13c>
					--( pxQueue->uxMessagesWaiting );
  4017c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017c8:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
  4017ca:	3b01      	subs	r3, #1
  4017cc:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017ce:	b912      	cbnz	r2, 4017d6 <xQueueGenericReceive+0x132>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4017d0:	4b21      	ldr	r3, [pc, #132]	; (401858 <xQueueGenericReceive+0x1b4>)
  4017d2:	4798      	blx	r3
  4017d4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4017d6:	6923      	ldr	r3, [r4, #16]
  4017d8:	b9ab      	cbnz	r3, 401806 <xQueueGenericReceive+0x162>
				taskEXIT_CRITICAL();
  4017da:	47a8      	blx	r5
				return pdPASS;
  4017dc:	2001      	movs	r0, #1
  4017de:	e7e5      	b.n	4017ac <xQueueGenericReceive+0x108>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4017e2:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d0f8      	beq.n	4017da <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4017e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017ec:	4b1b      	ldr	r3, [pc, #108]	; (40185c <xQueueGenericReceive+0x1b8>)
  4017ee:	4798      	blx	r3
  4017f0:	2800      	cmp	r0, #0
  4017f2:	d0f2      	beq.n	4017da <xQueueGenericReceive+0x136>
							queueYIELD_IF_USING_PREEMPTION();
  4017f4:	4b1a      	ldr	r3, [pc, #104]	; (401860 <xQueueGenericReceive+0x1bc>)
  4017f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017fa:	601a      	str	r2, [r3, #0]
  4017fc:	f3bf 8f4f 	dsb	sy
  401800:	f3bf 8f6f 	isb	sy
  401804:	e7e9      	b.n	4017da <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401806:	f104 0010 	add.w	r0, r4, #16
  40180a:	4b14      	ldr	r3, [pc, #80]	; (40185c <xQueueGenericReceive+0x1b8>)
  40180c:	4798      	blx	r3
  40180e:	2801      	cmp	r0, #1
  401810:	d1e3      	bne.n	4017da <xQueueGenericReceive+0x136>
  401812:	e7ef      	b.n	4017f4 <xQueueGenericReceive+0x150>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401814:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401816:	2a00      	cmp	r2, #0
  401818:	f43f af4d 	beq.w	4016b6 <xQueueGenericReceive+0x12>
  40181c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401820:	b672      	cpsid	i
  401822:	f383 8811 	msr	BASEPRI, r3
  401826:	f3bf 8f6f 	isb	sy
  40182a:	f3bf 8f4f 	dsb	sy
  40182e:	b662      	cpsie	i
  401830:	e7fe      	b.n	401830 <xQueueGenericReceive+0x18c>
  401832:	bf00      	nop
  401834:	004022c9 	.word	0x004022c9
  401838:	00400e29 	.word	0x00400e29
  40183c:	00400e75 	.word	0x00400e75
  401840:	00401205 	.word	0x00401205
  401844:	00401de9 	.word	0x00401de9
  401848:	00402225 	.word	0x00402225
  40184c:	00402065 	.word	0x00402065
  401850:	004022e9 	.word	0x004022e9
  401854:	004011d9 	.word	0x004011d9
  401858:	00402459 	.word	0x00402459
  40185c:	0040216d 	.word	0x0040216d
  401860:	e000ed04 	.word	0xe000ed04
  401864:	00402201 	.word	0x00402201
  401868:	00401c59 	.word	0x00401c59

0040186c <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40186c:	2300      	movs	r3, #0
  40186e:	4a08      	ldr	r2, [pc, #32]	; (401890 <vQueueAddToRegistry+0x24>)
	{
  401870:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401872:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  401876:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
  40187a:	b124      	cbz	r4, 401886 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40187c:	3301      	adds	r3, #1
  40187e:	2b08      	cmp	r3, #8
  401880:	d1f7      	bne.n	401872 <vQueueAddToRegistry+0x6>
	}
  401882:	bc30      	pop	{r4, r5}
  401884:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401886:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40188a:	6068      	str	r0, [r5, #4]
	}
  40188c:	bc30      	pop	{r4, r5}
  40188e:	4770      	bx	lr
  401890:	20400c54 	.word	0x20400c54

00401894 <vQueueWaitForMessageRestricted>:
	{
  401894:	b570      	push	{r4, r5, r6, lr}
  401896:	4604      	mov	r4, r0
		prvLockQueue( pxQueue );
  401898:	4b0f      	ldr	r3, [pc, #60]	; (4018d8 <vQueueWaitForMessageRestricted+0x44>)
	{
  40189a:	460d      	mov	r5, r1
  40189c:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40189e:	4798      	blx	r3
  4018a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018a2:	3301      	adds	r3, #1
  4018a4:	d014      	beq.n	4018d0 <vQueueWaitForMessageRestricted+0x3c>
  4018a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018a8:	3301      	adds	r3, #1
  4018aa:	d00e      	beq.n	4018ca <vQueueWaitForMessageRestricted+0x36>
  4018ac:	4b0b      	ldr	r3, [pc, #44]	; (4018dc <vQueueWaitForMessageRestricted+0x48>)
  4018ae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4018b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b2:	b92b      	cbnz	r3, 4018c0 <vQueueWaitForMessageRestricted+0x2c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4018b4:	4632      	mov	r2, r6
  4018b6:	4629      	mov	r1, r5
  4018b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018bc:	4b08      	ldr	r3, [pc, #32]	; (4018e0 <vQueueWaitForMessageRestricted+0x4c>)
  4018be:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
  4018c0:	4620      	mov	r0, r4
  4018c2:	4b08      	ldr	r3, [pc, #32]	; (4018e4 <vQueueWaitForMessageRestricted+0x50>)
	}
  4018c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
  4018c8:	4718      	bx	r3
		prvLockQueue( pxQueue );
  4018ca:	2300      	movs	r3, #0
  4018cc:	64a3      	str	r3, [r4, #72]	; 0x48
  4018ce:	e7ed      	b.n	4018ac <vQueueWaitForMessageRestricted+0x18>
  4018d0:	2300      	movs	r3, #0
  4018d2:	6463      	str	r3, [r4, #68]	; 0x44
  4018d4:	e7e7      	b.n	4018a6 <vQueueWaitForMessageRestricted+0x12>
  4018d6:	bf00      	nop
  4018d8:	00400e29 	.word	0x00400e29
  4018dc:	00400e75 	.word	0x00400e75
  4018e0:	004020e9 	.word	0x004020e9
  4018e4:	00401205 	.word	0x00401205

004018e8 <prvResetNextTaskUnblockTime.part.2>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018e8:	4a03      	ldr	r2, [pc, #12]	; (4018f8 <prvResetNextTaskUnblockTime.part.2+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4018ea:	4b04      	ldr	r3, [pc, #16]	; (4018fc <prvResetNextTaskUnblockTime.part.2+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018ec:	6812      	ldr	r2, [r2, #0]
  4018ee:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4018f0:	68d2      	ldr	r2, [r2, #12]
  4018f2:	6852      	ldr	r2, [r2, #4]
  4018f4:	601a      	str	r2, [r3, #0]
  4018f6:	4770      	bx	lr
  4018f8:	20400a58 	.word	0x20400a58
  4018fc:	20400b04 	.word	0x20400b04

00401900 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401900:	4b0d      	ldr	r3, [pc, #52]	; (401938 <prvAddCurrentTaskToDelayedList+0x38>)
	if( xTimeToWake < xTickCount )
  401902:	4a0e      	ldr	r2, [pc, #56]	; (40193c <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401904:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
  401906:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401908:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
  40190a:	4290      	cmp	r0, r2
  40190c:	d30d      	bcc.n	40192a <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40190e:	490c      	ldr	r1, [pc, #48]	; (401940 <prvAddCurrentTaskToDelayedList+0x40>)
  401910:	4a0c      	ldr	r2, [pc, #48]	; (401944 <prvAddCurrentTaskToDelayedList+0x44>)
{
  401912:	b510      	push	{r4, lr}
  401914:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401916:	6808      	ldr	r0, [r1, #0]
  401918:	6819      	ldr	r1, [r3, #0]
  40191a:	3104      	adds	r1, #4
  40191c:	4790      	blx	r2
		if( xTimeToWake < xNextTaskUnblockTime )
  40191e:	4b0a      	ldr	r3, [pc, #40]	; (401948 <prvAddCurrentTaskToDelayedList+0x48>)
  401920:	681a      	ldr	r2, [r3, #0]
  401922:	4294      	cmp	r4, r2
  401924:	d200      	bcs.n	401928 <prvAddCurrentTaskToDelayedList+0x28>
			xNextTaskUnblockTime = xTimeToWake;
  401926:	601c      	str	r4, [r3, #0]
  401928:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40192a:	4908      	ldr	r1, [pc, #32]	; (40194c <prvAddCurrentTaskToDelayedList+0x4c>)
  40192c:	4a05      	ldr	r2, [pc, #20]	; (401944 <prvAddCurrentTaskToDelayedList+0x44>)
  40192e:	6808      	ldr	r0, [r1, #0]
  401930:	6819      	ldr	r1, [r3, #0]
  401932:	3104      	adds	r1, #4
  401934:	4710      	bx	r2
  401936:	bf00      	nop
  401938:	20400a54 	.word	0x20400a54
  40193c:	20400b4c 	.word	0x20400b4c
  401940:	20400a58 	.word	0x20400a58
  401944:	00400d11 	.word	0x00400d11
  401948:	20400b04 	.word	0x20400b04
  40194c:	20400a5c 	.word	0x20400a5c

00401950 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
  401950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401954:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  401956:	4680      	mov	r8, r0
  401958:	460d      	mov	r5, r1
  40195a:	4692      	mov	sl, r2
  40195c:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40195e:	2e00      	cmp	r6, #0
  401960:	f000 8096 	beq.w	401a90 <xTaskGenericCreate.part.5+0x140>
  401964:	4c64      	ldr	r4, [pc, #400]	; (401af8 <xTaskGenericCreate.part.5+0x1a8>)
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401966:	2058      	movs	r0, #88	; 0x58
  401968:	47a0      	blx	r4
			if( pxNewTCB != NULL )
  40196a:	4604      	mov	r4, r0
  40196c:	2800      	cmp	r0, #0
  40196e:	f000 809a 	beq.w	401aa6 <xTaskGenericCreate.part.5+0x156>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401972:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
				pxNewTCB->pxStack = pxStack;
  401976:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401978:	21a5      	movs	r1, #165	; 0xa5
  40197a:	4b60      	ldr	r3, [pc, #384]	; (401afc <xTaskGenericCreate.part.5+0x1ac>)
  40197c:	4652      	mov	r2, sl
  40197e:	4630      	mov	r0, r6
  401980:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401982:	f1aa 0a04 	sub.w	sl, sl, #4
  401986:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401988:	1e6b      	subs	r3, r5, #1
  40198a:	f105 0109 	add.w	r1, r5, #9
  40198e:	f104 0533 	add.w	r5, r4, #51	; 0x33
  401992:	4482      	add	sl, r0
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401994:	f02a 0a07 	bic.w	sl, sl, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401998:	785a      	ldrb	r2, [r3, #1]
  40199a:	f805 2f01 	strb.w	r2, [r5, #1]!
		if( pcName[ x ] == 0x00 )
  40199e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4019a2:	b10a      	cbz	r2, 4019a8 <xTaskGenericCreate.part.5+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4019a4:	4299      	cmp	r1, r3
  4019a6:	d1f7      	bne.n	401998 <xTaskGenericCreate.part.5+0x48>
  4019a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4019aa:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019ac:	f104 0b04 	add.w	fp, r4, #4
  4019b0:	4e53      	ldr	r6, [pc, #332]	; (401b00 <xTaskGenericCreate.part.5+0x1b0>)
  4019b2:	2d04      	cmp	r5, #4
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4019b4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019b8:	4658      	mov	r0, fp
		pxTCB->uxMutexesHeld = 0;
  4019ba:	64e7      	str	r7, [r4, #76]	; 0x4c
  4019bc:	bf28      	it	cs
  4019be:	2504      	movcs	r5, #4
	pxTCB->uxPriority = uxPriority;
  4019c0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4019c2:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019c4:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019c8:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4019ca:	f104 0018 	add.w	r0, r4, #24
  4019ce:	47b0      	blx	r6
		pxTCB->ulNotifiedValue = 0;
  4019d0:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019d2:	4b4c      	ldr	r3, [pc, #304]	; (401b04 <xTaskGenericCreate.part.5+0x1b4>)
  4019d4:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019d6:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019d8:	4641      	mov	r1, r8
		pxTCB->eNotifyState = eNotWaitingNotification;
  4019da:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019de:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4019e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4019e2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019e4:	4798      	blx	r3
		if( ( void * ) pxCreatedTask != NULL )
  4019e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019e8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4019ea:	b103      	cbz	r3, 4019ee <xTaskGenericCreate.part.5+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4019ec:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
  4019ee:	4b46      	ldr	r3, [pc, #280]	; (401b08 <xTaskGenericCreate.part.5+0x1b8>)
  4019f0:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4019f2:	4a46      	ldr	r2, [pc, #280]	; (401b0c <xTaskGenericCreate.part.5+0x1bc>)
			if( pxCurrentTCB == NULL )
  4019f4:	4e46      	ldr	r6, [pc, #280]	; (401b10 <xTaskGenericCreate.part.5+0x1c0>)
			uxCurrentNumberOfTasks++;
  4019f6:	6813      	ldr	r3, [r2, #0]
  4019f8:	3301      	adds	r3, #1
  4019fa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4019fc:	6833      	ldr	r3, [r6, #0]
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d03f      	beq.n	401a82 <xTaskGenericCreate.part.5+0x132>
				if( xSchedulerRunning == pdFALSE )
  401a02:	f8df 814c 	ldr.w	r8, [pc, #332]	; 401b50 <xTaskGenericCreate.part.5+0x200>
  401a06:	f8d8 3000 	ldr.w	r3, [r8]
  401a0a:	b92b      	cbnz	r3, 401a18 <xTaskGenericCreate.part.5+0xc8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401a0c:	6833      	ldr	r3, [r6, #0]
  401a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a12:	429a      	cmp	r2, r3
  401a14:	d300      	bcc.n	401a18 <xTaskGenericCreate.part.5+0xc8>
						pxCurrentTCB = pxNewTCB;
  401a16:	6034      	str	r4, [r6, #0]
			uxTaskNumber++;
  401a18:	f8df e138 	ldr.w	lr, [pc, #312]	; 401b54 <xTaskGenericCreate.part.5+0x204>
			prvAddTaskToReadyList( pxNewTCB );
  401a1c:	2501      	movs	r5, #1
  401a1e:	f8df c138 	ldr.w	ip, [pc, #312]	; 401b58 <xTaskGenericCreate.part.5+0x208>
  401a22:	4659      	mov	r1, fp
  401a24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a26:	f8dc 9000 	ldr.w	r9, [ip]
			uxTaskNumber++;
  401a2a:	f8de 2000 	ldr.w	r2, [lr]
			prvAddTaskToReadyList( pxNewTCB );
  401a2e:	fa05 f300 	lsl.w	r3, r5, r0
  401a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a36:	ea43 0309 	orr.w	r3, r3, r9
			uxTaskNumber++;
  401a3a:	442a      	add	r2, r5
			prvAddTaskToReadyList( pxNewTCB );
  401a3c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 401b28 <xTaskGenericCreate.part.5+0x1d8>
			uxTaskNumber++;
  401a40:	f8ce 2000 	str.w	r2, [lr]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401a44:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401a46:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401a4a:	4a32      	ldr	r2, [pc, #200]	; (401b14 <xTaskGenericCreate.part.5+0x1c4>)
  401a4c:	f8cc 3000 	str.w	r3, [ip]
  401a50:	4790      	blx	r2
		taskEXIT_CRITICAL();
  401a52:	4b31      	ldr	r3, [pc, #196]	; (401b18 <xTaskGenericCreate.part.5+0x1c8>)
  401a54:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401a56:	f8d8 3000 	ldr.w	r3, [r8]
  401a5a:	b17b      	cbz	r3, 401a7c <xTaskGenericCreate.part.5+0x12c>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401a5c:	6833      	ldr	r3, [r6, #0]
  401a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a62:	429a      	cmp	r2, r3
  401a64:	d90a      	bls.n	401a7c <xTaskGenericCreate.part.5+0x12c>
				taskYIELD_IF_USING_PREEMPTION();
  401a66:	4b2d      	ldr	r3, [pc, #180]	; (401b1c <xTaskGenericCreate.part.5+0x1cc>)
  401a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a6c:	601a      	str	r2, [r3, #0]
  401a6e:	f3bf 8f4f 	dsb	sy
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	4628      	mov	r0, r5
  401a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( pxCurrentTCB->uxPriority < uxPriority )
  401a7c:	4628      	mov	r0, r5
}
  401a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  401a82:	6034      	str	r4, [r6, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401a84:	6813      	ldr	r3, [r2, #0]
  401a86:	2b01      	cmp	r3, #1
  401a88:	d014      	beq.n	401ab4 <xTaskGenericCreate.part.5+0x164>
  401a8a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401b50 <xTaskGenericCreate.part.5+0x200>
  401a8e:	e7c3      	b.n	401a18 <xTaskGenericCreate.part.5+0xc8>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a90:	0090      	lsls	r0, r2, #2
  401a92:	4c19      	ldr	r4, [pc, #100]	; (401af8 <xTaskGenericCreate.part.5+0x1a8>)
  401a94:	47a0      	blx	r4
		if( pxStack != NULL )
  401a96:	4606      	mov	r6, r0
  401a98:	2800      	cmp	r0, #0
  401a9a:	f47f af64 	bne.w	401966 <xTaskGenericCreate.part.5+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401a9e:	f04f 30ff 	mov.w	r0, #4294967295
  401aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401aa6:	4630      	mov	r0, r6
  401aa8:	4b1d      	ldr	r3, [pc, #116]	; (401b20 <xTaskGenericCreate.part.5+0x1d0>)
  401aaa:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401aac:	f04f 30ff 	mov.w	r0, #4294967295
  401ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ab4:	4d1b      	ldr	r5, [pc, #108]	; (401b24 <xTaskGenericCreate.part.5+0x1d4>)
  401ab6:	481c      	ldr	r0, [pc, #112]	; (401b28 <xTaskGenericCreate.part.5+0x1d8>)
  401ab8:	47a8      	blx	r5
  401aba:	481c      	ldr	r0, [pc, #112]	; (401b2c <xTaskGenericCreate.part.5+0x1dc>)
  401abc:	47a8      	blx	r5
  401abe:	481c      	ldr	r0, [pc, #112]	; (401b30 <xTaskGenericCreate.part.5+0x1e0>)
  401ac0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401ac2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401b5c <xTaskGenericCreate.part.5+0x20c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ac6:	481b      	ldr	r0, [pc, #108]	; (401b34 <xTaskGenericCreate.part.5+0x1e4>)
  401ac8:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401aca:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401b60 <xTaskGenericCreate.part.5+0x210>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ace:	481a      	ldr	r0, [pc, #104]	; (401b38 <xTaskGenericCreate.part.5+0x1e8>)
  401ad0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401ad2:	4640      	mov	r0, r8
  401ad4:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401ad6:	4648      	mov	r0, r9
  401ad8:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401ada:	4818      	ldr	r0, [pc, #96]	; (401b3c <xTaskGenericCreate.part.5+0x1ec>)
  401adc:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401ade:	4818      	ldr	r0, [pc, #96]	; (401b40 <xTaskGenericCreate.part.5+0x1f0>)
  401ae0:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401ae2:	4818      	ldr	r0, [pc, #96]	; (401b44 <xTaskGenericCreate.part.5+0x1f4>)
  401ae4:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401ae6:	4a18      	ldr	r2, [pc, #96]	; (401b48 <xTaskGenericCreate.part.5+0x1f8>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ae8:	4b18      	ldr	r3, [pc, #96]	; (401b4c <xTaskGenericCreate.part.5+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
  401aea:	f8c2 8000 	str.w	r8, [r2]
  401aee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401b50 <xTaskGenericCreate.part.5+0x200>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401af2:	f8c3 9000 	str.w	r9, [r3]
  401af6:	e78f      	b.n	401a18 <xTaskGenericCreate.part.5+0xc8>
  401af8:	00401079 	.word	0x00401079
  401afc:	00403899 	.word	0x00403899
  401b00:	00400cf1 	.word	0x00400cf1
  401b04:	00400dd9 	.word	0x00400dd9
  401b08:	00400e29 	.word	0x00400e29
  401b0c:	20400ac4 	.word	0x20400ac4
  401b10:	20400a54 	.word	0x20400a54
  401b14:	00400cf9 	.word	0x00400cf9
  401b18:	00400e75 	.word	0x00400e75
  401b1c:	e000ed04 	.word	0xe000ed04
  401b20:	004010ad 	.word	0x004010ad
  401b24:	00400cd9 	.word	0x00400cd9
  401b28:	20400a60 	.word	0x20400a60
  401b2c:	20400a74 	.word	0x20400a74
  401b30:	20400a88 	.word	0x20400a88
  401b34:	20400a9c 	.word	0x20400a9c
  401b38:	20400ab0 	.word	0x20400ab0
  401b3c:	20400b0c 	.word	0x20400b0c
  401b40:	20400b38 	.word	0x20400b38
  401b44:	20400b24 	.word	0x20400b24
  401b48:	20400a58 	.word	0x20400a58
  401b4c:	20400a5c 	.word	0x20400a5c
  401b50:	20400b20 	.word	0x20400b20
  401b54:	20400ad0 	.word	0x20400ad0
  401b58:	20400ad8 	.word	0x20400ad8
  401b5c:	20400adc 	.word	0x20400adc
  401b60:	20400af0 	.word	0x20400af0

00401b64 <prvTaskIsTaskSuspended.part.0>:
  401b64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b68:	b672      	cpsid	i
  401b6a:	f383 8811 	msr	BASEPRI, r3
  401b6e:	f3bf 8f6f 	isb	sy
  401b72:	f3bf 8f4f 	dsb	sy
  401b76:	b662      	cpsie	i
  401b78:	e7fe      	b.n	401b78 <prvTaskIsTaskSuspended.part.0+0x14>
  401b7a:	bf00      	nop

00401b7c <xTaskGenericCreate>:
{
  401b7c:	b470      	push	{r4, r5, r6}
  401b7e:	ac03      	add	r4, sp, #12
  401b80:	cc70      	ldmia	r4, {r4, r5, r6}
	configASSERT( pxTaskCode );
  401b82:	b160      	cbz	r0, 401b9e <xTaskGenericCreate+0x22>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401b84:	2c04      	cmp	r4, #4
  401b86:	d915      	bls.n	401bb4 <xTaskGenericCreate+0x38>
  401b88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8c:	b672      	cpsid	i
  401b8e:	f383 8811 	msr	BASEPRI, r3
  401b92:	f3bf 8f6f 	isb	sy
  401b96:	f3bf 8f4f 	dsb	sy
  401b9a:	b662      	cpsie	i
  401b9c:	e7fe      	b.n	401b9c <xTaskGenericCreate+0x20>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xTaskGenericCreate+0x36>
  401bb4:	9403      	str	r4, [sp, #12]
  401bb6:	4c03      	ldr	r4, [pc, #12]	; (401bc4 <xTaskGenericCreate+0x48>)
  401bb8:	9605      	str	r6, [sp, #20]
  401bba:	9504      	str	r5, [sp, #16]
  401bbc:	46a4      	mov	ip, r4
}
  401bbe:	bc70      	pop	{r4, r5, r6}
  401bc0:	4760      	bx	ip
  401bc2:	bf00      	nop
  401bc4:	00401951 	.word	0x00401951

00401bc8 <vTaskStartScheduler>:
{
  401bc8:	b570      	push	{r4, r5, r6, lr}
  401bca:	2400      	movs	r4, #0
  401bcc:	b084      	sub	sp, #16
  401bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bd2:	4919      	ldr	r1, [pc, #100]	; (401c38 <vTaskStartScheduler+0x70>)
  401bd4:	9402      	str	r4, [sp, #8]
  401bd6:	4623      	mov	r3, r4
  401bd8:	9401      	str	r4, [sp, #4]
  401bda:	9400      	str	r4, [sp, #0]
  401bdc:	4817      	ldr	r0, [pc, #92]	; (401c3c <vTaskStartScheduler+0x74>)
  401bde:	4d18      	ldr	r5, [pc, #96]	; (401c40 <vTaskStartScheduler+0x78>)
  401be0:	47a8      	blx	r5
		if( xReturn == pdPASS )
  401be2:	2801      	cmp	r0, #1
  401be4:	d00d      	beq.n	401c02 <vTaskStartScheduler+0x3a>
		configASSERT( xReturn );
  401be6:	b950      	cbnz	r0, 401bfe <vTaskStartScheduler+0x36>
  401be8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bec:	b672      	cpsid	i
  401bee:	f383 8811 	msr	BASEPRI, r3
  401bf2:	f3bf 8f6f 	isb	sy
  401bf6:	f3bf 8f4f 	dsb	sy
  401bfa:	b662      	cpsie	i
  401bfc:	e7fe      	b.n	401bfc <vTaskStartScheduler+0x34>
}
  401bfe:	b004      	add	sp, #16
  401c00:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xTimerCreateTimerTask();
  401c02:	4b10      	ldr	r3, [pc, #64]	; (401c44 <vTaskStartScheduler+0x7c>)
  401c04:	4798      	blx	r3
	if( xReturn == pdPASS )
  401c06:	2801      	cmp	r0, #1
  401c08:	d1ed      	bne.n	401be6 <vTaskStartScheduler+0x1e>
  401c0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c0e:	b672      	cpsid	i
  401c10:	f383 8811 	msr	BASEPRI, r3
  401c14:	f3bf 8f6f 	isb	sy
  401c18:	f3bf 8f4f 	dsb	sy
  401c1c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401c1e:	4d0a      	ldr	r5, [pc, #40]	; (401c48 <vTaskStartScheduler+0x80>)
  401c20:	f04f 36ff 	mov.w	r6, #4294967295
		xSchedulerRunning = pdTRUE;
  401c24:	4909      	ldr	r1, [pc, #36]	; (401c4c <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
  401c26:	4a0a      	ldr	r2, [pc, #40]	; (401c50 <vTaskStartScheduler+0x88>)
		if( xPortStartScheduler() != pdFALSE )
  401c28:	4b0a      	ldr	r3, [pc, #40]	; (401c54 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
  401c2a:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
  401c2c:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
  401c2e:	6014      	str	r4, [r2, #0]
}
  401c30:	b004      	add	sp, #16
  401c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
  401c36:	4718      	bx	r3
  401c38:	0040865c 	.word	0x0040865c
  401c3c:	00401f09 	.word	0x00401f09
  401c40:	00401951 	.word	0x00401951
  401c44:	00402549 	.word	0x00402549
  401c48:	20400b04 	.word	0x20400b04
  401c4c:	20400b20 	.word	0x20400b20
  401c50:	20400b4c 	.word	0x20400b4c
  401c54:	00400f5d 	.word	0x00400f5d

00401c58 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401c58:	4a02      	ldr	r2, [pc, #8]	; (401c64 <vTaskSuspendAll+0xc>)
  401c5a:	6813      	ldr	r3, [r2, #0]
  401c5c:	3301      	adds	r3, #1
  401c5e:	6013      	str	r3, [r2, #0]
  401c60:	4770      	bx	lr
  401c62:	bf00      	nop
  401c64:	20400acc 	.word	0x20400acc

00401c68 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401c68:	4b01      	ldr	r3, [pc, #4]	; (401c70 <xTaskGetTickCount+0x8>)
  401c6a:	6818      	ldr	r0, [r3, #0]
}
  401c6c:	4770      	bx	lr
  401c6e:	bf00      	nop
  401c70:	20400b4c 	.word	0x20400b4c

00401c74 <xTaskIncrementTick>:
{
  401c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c78:	4b4c      	ldr	r3, [pc, #304]	; (401dac <xTaskIncrementTick+0x138>)
  401c7a:	681b      	ldr	r3, [r3, #0]
  401c7c:	2b00      	cmp	r3, #0
  401c7e:	d170      	bne.n	401d62 <xTaskIncrementTick+0xee>
		++xTickCount;
  401c80:	4b4b      	ldr	r3, [pc, #300]	; (401db0 <xTaskIncrementTick+0x13c>)
  401c82:	681a      	ldr	r2, [r3, #0]
  401c84:	3201      	adds	r2, #1
  401c86:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401c88:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401c8a:	2e00      	cmp	r6, #0
  401c8c:	d05a      	beq.n	401d44 <xTaskIncrementTick+0xd0>
  401c8e:	f8df a150 	ldr.w	sl, [pc, #336]	; 401de0 <xTaskIncrementTick+0x16c>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401c92:	f8da 2000 	ldr.w	r2, [sl]
  401c96:	2400      	movs	r4, #0
  401c98:	4296      	cmp	r6, r2
  401c9a:	d36a      	bcc.n	401d72 <xTaskIncrementTick+0xfe>
  401c9c:	4d45      	ldr	r5, [pc, #276]	; (401db4 <xTaskIncrementTick+0x140>)
  401c9e:	4f46      	ldr	r7, [pc, #280]	; (401db8 <xTaskIncrementTick+0x144>)
  401ca0:	f8df 8140 	ldr.w	r8, [pc, #320]	; 401de4 <xTaskIncrementTick+0x170>
  401ca4:	e02f      	b.n	401d06 <xTaskIncrementTick+0x92>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ca6:	682a      	ldr	r2, [r5, #0]
  401ca8:	68d2      	ldr	r2, [r2, #12]
  401caa:	f8d2 900c 	ldr.w	r9, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401cae:	f8d9 1004 	ldr.w	r1, [r9, #4]
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cb2:	f109 0b04 	add.w	fp, r9, #4
						if( xConstTickCount < xItemValue )
  401cb6:	428e      	cmp	r6, r1
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cb8:	4658      	mov	r0, fp
						if( xConstTickCount < xItemValue )
  401cba:	d36d      	bcc.n	401d98 <xTaskIncrementTick+0x124>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cbc:	4b3f      	ldr	r3, [pc, #252]	; (401dbc <xTaskIncrementTick+0x148>)
  401cbe:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401cc0:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cc4:	f109 0018 	add.w	r0, r9, #24
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401cc8:	b109      	cbz	r1, 401cce <xTaskIncrementTick+0x5a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cca:	4b3c      	ldr	r3, [pc, #240]	; (401dbc <xTaskIncrementTick+0x148>)
  401ccc:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  401cce:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  401cd2:	f04f 0e01 	mov.w	lr, #1
  401cd6:	4b3a      	ldr	r3, [pc, #232]	; (401dc0 <xTaskIncrementTick+0x14c>)
  401cd8:	4659      	mov	r1, fp
  401cda:	fa0e fe00 	lsl.w	lr, lr, r0
  401cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401ce8:	ea4e 0e03 	orr.w	lr, lr, r3
  401cec:	4b34      	ldr	r3, [pc, #208]	; (401dc0 <xTaskIncrementTick+0x14c>)
  401cee:	f8c3 e000 	str.w	lr, [r3]
  401cf2:	4b34      	ldr	r3, [pc, #208]	; (401dc4 <xTaskIncrementTick+0x150>)
  401cf4:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401cf6:	f8d8 0000 	ldr.w	r0, [r8]
  401cfa:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  401cfe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d00:	4291      	cmp	r1, r2
  401d02:	bf28      	it	cs
  401d04:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d06:	682a      	ldr	r2, [r5, #0]
  401d08:	6812      	ldr	r2, [r2, #0]
  401d0a:	2a00      	cmp	r2, #0
  401d0c:	d1cb      	bne.n	401ca6 <xTaskIncrementTick+0x32>
						xNextTaskUnblockTime = portMAX_DELAY;
  401d0e:	f04f 32ff 	mov.w	r2, #4294967295
  401d12:	f8ca 2000 	str.w	r2, [sl]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d16:	f8d8 3000 	ldr.w	r3, [r8]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d1a:	4a2b      	ldr	r2, [pc, #172]	; (401dc8 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d1e:	6812      	ldr	r2, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d24:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401d28:	2b02      	cmp	r3, #2
  401d2a:	bf28      	it	cs
  401d2c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d2e:	b90a      	cbnz	r2, 401d34 <xTaskIncrementTick+0xc0>
				vApplicationTickHook();
  401d30:	4b26      	ldr	r3, [pc, #152]	; (401dcc <xTaskIncrementTick+0x158>)
  401d32:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401d34:	4b26      	ldr	r3, [pc, #152]	; (401dd0 <xTaskIncrementTick+0x15c>)
  401d36:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401d38:	2b00      	cmp	r3, #0
  401d3a:	bf18      	it	ne
  401d3c:	2401      	movne	r4, #1
}
  401d3e:	4620      	mov	r0, r4
  401d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				taskSWITCH_DELAYED_LISTS();
  401d44:	4d1b      	ldr	r5, [pc, #108]	; (401db4 <xTaskIncrementTick+0x140>)
  401d46:	682b      	ldr	r3, [r5, #0]
  401d48:	681b      	ldr	r3, [r3, #0]
  401d4a:	b1b3      	cbz	r3, 401d7a <xTaskIncrementTick+0x106>
  401d4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d50:	b672      	cpsid	i
  401d52:	f383 8811 	msr	BASEPRI, r3
  401d56:	f3bf 8f6f 	isb	sy
  401d5a:	f3bf 8f4f 	dsb	sy
  401d5e:	b662      	cpsie	i
  401d60:	e7fe      	b.n	401d60 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
  401d62:	4a19      	ldr	r2, [pc, #100]	; (401dc8 <xTaskIncrementTick+0x154>)
BaseType_t xSwitchRequired = pdFALSE;
  401d64:	2400      	movs	r4, #0
			vApplicationTickHook();
  401d66:	4919      	ldr	r1, [pc, #100]	; (401dcc <xTaskIncrementTick+0x158>)
		++uxPendedTicks;
  401d68:	6813      	ldr	r3, [r2, #0]
  401d6a:	3301      	adds	r3, #1
  401d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401d6e:	4788      	blx	r1
  401d70:	e7e0      	b.n	401d34 <xTaskIncrementTick+0xc0>
  401d72:	4f11      	ldr	r7, [pc, #68]	; (401db8 <xTaskIncrementTick+0x144>)
  401d74:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401de4 <xTaskIncrementTick+0x170>
  401d78:	e7cd      	b.n	401d16 <xTaskIncrementTick+0xa2>
				taskSWITCH_DELAYED_LISTS();
  401d7a:	4b16      	ldr	r3, [pc, #88]	; (401dd4 <xTaskIncrementTick+0x160>)
  401d7c:	6829      	ldr	r1, [r5, #0]
  401d7e:	4a16      	ldr	r2, [pc, #88]	; (401dd8 <xTaskIncrementTick+0x164>)
  401d80:	6818      	ldr	r0, [r3, #0]
  401d82:	6028      	str	r0, [r5, #0]
  401d84:	6019      	str	r1, [r3, #0]
  401d86:	6813      	ldr	r3, [r2, #0]
  401d88:	3301      	adds	r3, #1
  401d8a:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d8c:	682b      	ldr	r3, [r5, #0]
  401d8e:	681b      	ldr	r3, [r3, #0]
  401d90:	b12b      	cbz	r3, 401d9e <xTaskIncrementTick+0x12a>
  401d92:	4b12      	ldr	r3, [pc, #72]	; (401ddc <xTaskIncrementTick+0x168>)
  401d94:	4798      	blx	r3
  401d96:	e77a      	b.n	401c8e <xTaskIncrementTick+0x1a>
							xNextTaskUnblockTime = xItemValue;
  401d98:	f8ca 1000 	str.w	r1, [sl]
							break;
  401d9c:	e7bb      	b.n	401d16 <xTaskIncrementTick+0xa2>
		xNextTaskUnblockTime = portMAX_DELAY;
  401d9e:	f8df a040 	ldr.w	sl, [pc, #64]	; 401de0 <xTaskIncrementTick+0x16c>
  401da2:	f04f 32ff 	mov.w	r2, #4294967295
  401da6:	f8ca 2000 	str.w	r2, [sl]
  401daa:	e772      	b.n	401c92 <xTaskIncrementTick+0x1e>
  401dac:	20400acc 	.word	0x20400acc
  401db0:	20400b4c 	.word	0x20400b4c
  401db4:	20400a58 	.word	0x20400a58
  401db8:	20400a60 	.word	0x20400a60
  401dbc:	00400d45 	.word	0x00400d45
  401dc0:	20400ad8 	.word	0x20400ad8
  401dc4:	00400cf9 	.word	0x00400cf9
  401dc8:	20400ac8 	.word	0x20400ac8
  401dcc:	00402cb5 	.word	0x00402cb5
  401dd0:	20400b50 	.word	0x20400b50
  401dd4:	20400a5c 	.word	0x20400a5c
  401dd8:	20400b08 	.word	0x20400b08
  401ddc:	004018e9 	.word	0x004018e9
  401de0:	20400b04 	.word	0x20400b04
  401de4:	20400a54 	.word	0x20400a54

00401de8 <xTaskResumeAll>:
{
  401de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  401dec:	4c38      	ldr	r4, [pc, #224]	; (401ed0 <xTaskResumeAll+0xe8>)
{
  401dee:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
  401df0:	6823      	ldr	r3, [r4, #0]
  401df2:	b953      	cbnz	r3, 401e0a <xTaskResumeAll+0x22>
  401df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401df8:	b672      	cpsid	i
  401dfa:	f383 8811 	msr	BASEPRI, r3
  401dfe:	f3bf 8f6f 	isb	sy
  401e02:	f3bf 8f4f 	dsb	sy
  401e06:	b662      	cpsie	i
  401e08:	e7fe      	b.n	401e08 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
  401e0a:	4b32      	ldr	r3, [pc, #200]	; (401ed4 <xTaskResumeAll+0xec>)
  401e0c:	4798      	blx	r3
		--uxSchedulerSuspended;
  401e0e:	6823      	ldr	r3, [r4, #0]
  401e10:	3b01      	subs	r3, #1
  401e12:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e14:	6823      	ldr	r3, [r4, #0]
  401e16:	2b00      	cmp	r3, #0
  401e18:	d137      	bne.n	401e8a <xTaskResumeAll+0xa2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401e1a:	4b2f      	ldr	r3, [pc, #188]	; (401ed8 <xTaskResumeAll+0xf0>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	2b00      	cmp	r3, #0
  401e20:	d033      	beq.n	401e8a <xTaskResumeAll+0xa2>
  401e22:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 401efc <xTaskResumeAll+0x114>
  401e26:	4b2d      	ldr	r3, [pc, #180]	; (401edc <xTaskResumeAll+0xf4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e28:	4e2d      	ldr	r6, [pc, #180]	; (401ee0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
  401e2a:	4d2e      	ldr	r5, [pc, #184]	; (401ee4 <xTaskResumeAll+0xfc>)
  401e2c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401f00 <xTaskResumeAll+0x118>
  401e30:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401f04 <xTaskResumeAll+0x11c>
  401e34:	e01e      	b.n	401e74 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401e36:	68da      	ldr	r2, [r3, #12]
  401e38:	9301      	str	r3, [sp, #4]
  401e3a:	68d4      	ldr	r4, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e3c:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e40:	f104 0018 	add.w	r0, r4, #24
  401e44:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e46:	4640      	mov	r0, r8
  401e48:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401e4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e4c:	f8d5 e000 	ldr.w	lr, [r5]
  401e50:	4641      	mov	r1, r8
  401e52:	fa07 f200 	lsl.w	r2, r7, r0
  401e56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e5a:	ea42 020e 	orr.w	r2, r2, lr
  401e5e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  401e62:	602a      	str	r2, [r5, #0]
  401e64:	47c8      	blx	r9
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e66:	4a20      	ldr	r2, [pc, #128]	; (401ee8 <xTaskResumeAll+0x100>)
  401e68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401e6a:	6812      	ldr	r2, [r2, #0]
  401e6c:	9b01      	ldr	r3, [sp, #4]
  401e6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401e70:	4291      	cmp	r1, r2
  401e72:	d211      	bcs.n	401e98 <xTaskResumeAll+0xb0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e74:	681a      	ldr	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
  401e76:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e78:	2a00      	cmp	r2, #0
  401e7a:	d1dc      	bne.n	401e36 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401e7c:	4c1b      	ldr	r4, [pc, #108]	; (401eec <xTaskResumeAll+0x104>)
  401e7e:	6823      	ldr	r3, [r4, #0]
  401e80:	b96b      	cbnz	r3, 401e9e <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
  401e82:	f8db 4000 	ldr.w	r4, [fp]
  401e86:	2c01      	cmp	r4, #1
  401e88:	d019      	beq.n	401ebe <xTaskResumeAll+0xd6>
BaseType_t xAlreadyYielded = pdFALSE;
  401e8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401e8c:	4b18      	ldr	r3, [pc, #96]	; (401ef0 <xTaskResumeAll+0x108>)
  401e8e:	4798      	blx	r3
}
  401e90:	4620      	mov	r0, r4
  401e92:	b003      	add	sp, #12
  401e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xYieldPending = pdTRUE;
  401e98:	f8cb 7000 	str.w	r7, [fp]
  401e9c:	e7ea      	b.n	401e74 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401e9e:	6823      	ldr	r3, [r4, #0]
  401ea0:	2b00      	cmp	r3, #0
  401ea2:	d0ee      	beq.n	401e82 <xTaskResumeAll+0x9a>
  401ea4:	4e13      	ldr	r6, [pc, #76]	; (401ef4 <xTaskResumeAll+0x10c>)
							xYieldPending = pdTRUE;
  401ea6:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
  401ea8:	47b0      	blx	r6
  401eaa:	b108      	cbz	r0, 401eb0 <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
  401eac:	f8cb 5000 	str.w	r5, [fp]
						--uxPendedTicks;
  401eb0:	6823      	ldr	r3, [r4, #0]
  401eb2:	3b01      	subs	r3, #1
  401eb4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401eb6:	6823      	ldr	r3, [r4, #0]
  401eb8:	2b00      	cmp	r3, #0
  401eba:	d1f5      	bne.n	401ea8 <xTaskResumeAll+0xc0>
  401ebc:	e7e1      	b.n	401e82 <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
  401ebe:	4b0e      	ldr	r3, [pc, #56]	; (401ef8 <xTaskResumeAll+0x110>)
  401ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec4:	601a      	str	r2, [r3, #0]
  401ec6:	f3bf 8f4f 	dsb	sy
  401eca:	f3bf 8f6f 	isb	sy
  401ece:	e7dd      	b.n	401e8c <xTaskResumeAll+0xa4>
  401ed0:	20400acc 	.word	0x20400acc
  401ed4:	00400e29 	.word	0x00400e29
  401ed8:	20400ac4 	.word	0x20400ac4
  401edc:	20400b0c 	.word	0x20400b0c
  401ee0:	00400d45 	.word	0x00400d45
  401ee4:	20400ad8 	.word	0x20400ad8
  401ee8:	20400a54 	.word	0x20400a54
  401eec:	20400ac8 	.word	0x20400ac8
  401ef0:	00400e75 	.word	0x00400e75
  401ef4:	00401c75 	.word	0x00401c75
  401ef8:	e000ed04 	.word	0xe000ed04
  401efc:	20400b50 	.word	0x20400b50
  401f00:	20400a60 	.word	0x20400a60
  401f04:	00400cf9 	.word	0x00400cf9

00401f08 <prvIdleTask>:
{
  401f08:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  401f0c:	4c1e      	ldr	r4, [pc, #120]	; (401f88 <prvIdleTask+0x80>)
  401f0e:	4e1f      	ldr	r6, [pc, #124]	; (401f8c <prvIdleTask+0x84>)
  401f10:	4f1f      	ldr	r7, [pc, #124]	; (401f90 <prvIdleTask+0x88>)
  401f12:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401fa8 <prvIdleTask+0xa0>
  401f16:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401fac <prvIdleTask+0xa4>
  401f1a:	4d1e      	ldr	r5, [pc, #120]	; (401f94 <prvIdleTask+0x8c>)
  401f1c:	f8df a090 	ldr.w	sl, [pc, #144]	; 401fb0 <prvIdleTask+0xa8>
  401f20:	e008      	b.n	401f34 <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
  401f22:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401f24:	f8d6 b000 	ldr.w	fp, [r6]
	++uxSchedulerSuspended;
  401f28:	3301      	adds	r3, #1
  401f2a:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
  401f2c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401f2e:	f1bb 0f00 	cmp.w	fp, #0
  401f32:	d10f      	bne.n	401f54 <prvIdleTask+0x4c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401f34:	682b      	ldr	r3, [r5, #0]
  401f36:	2b00      	cmp	r3, #0
  401f38:	d1f3      	bne.n	401f22 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401f3a:	f8da 3000 	ldr.w	r3, [sl]
  401f3e:	2b01      	cmp	r3, #1
  401f40:	d9f8      	bls.n	401f34 <prvIdleTask+0x2c>
				taskYIELD();
  401f42:	4b15      	ldr	r3, [pc, #84]	; (401f98 <prvIdleTask+0x90>)
  401f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f48:	601a      	str	r2, [r3, #0]
  401f4a:	f3bf 8f4f 	dsb	sy
  401f4e:	f3bf 8f6f 	isb	sy
  401f52:	e7ef      	b.n	401f34 <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
  401f54:	4b11      	ldr	r3, [pc, #68]	; (401f9c <prvIdleTask+0x94>)
  401f56:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f58:	68f3      	ldr	r3, [r6, #12]
  401f5a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401f5e:	4b10      	ldr	r3, [pc, #64]	; (401fa0 <prvIdleTask+0x98>)
  401f60:	f10b 0004 	add.w	r0, fp, #4
  401f64:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401f66:	f8d9 3000 	ldr.w	r3, [r9]
  401f6a:	3b01      	subs	r3, #1
  401f6c:	f8c9 3000 	str.w	r3, [r9]
					--uxTasksDeleted;
  401f70:	682b      	ldr	r3, [r5, #0]
  401f72:	3b01      	subs	r3, #1
  401f74:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401f76:	4b0b      	ldr	r3, [pc, #44]	; (401fa4 <prvIdleTask+0x9c>)
  401f78:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401f7a:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  401f7e:	47c0      	blx	r8
		vPortFree( pxTCB );
  401f80:	4658      	mov	r0, fp
  401f82:	47c0      	blx	r8
  401f84:	e7d6      	b.n	401f34 <prvIdleTask+0x2c>
  401f86:	bf00      	nop
  401f88:	20400acc 	.word	0x20400acc
  401f8c:	20400b38 	.word	0x20400b38
  401f90:	00401de9 	.word	0x00401de9
  401f94:	20400ad4 	.word	0x20400ad4
  401f98:	e000ed04 	.word	0xe000ed04
  401f9c:	00400e29 	.word	0x00400e29
  401fa0:	00400d45 	.word	0x00400d45
  401fa4:	00400e75 	.word	0x00400e75
  401fa8:	20400ac4 	.word	0x20400ac4
  401fac:	004010ad 	.word	0x004010ad
  401fb0:	20400a60 	.word	0x20400a60

00401fb4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401fb4:	4b25      	ldr	r3, [pc, #148]	; (40204c <vTaskSwitchContext+0x98>)
  401fb6:	681b      	ldr	r3, [r3, #0]
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d135      	bne.n	402028 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  401fbc:	4a24      	ldr	r2, [pc, #144]	; (402050 <vTaskSwitchContext+0x9c>)
{
  401fbe:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  401fc0:	4c24      	ldr	r4, [pc, #144]	; (402054 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  401fc2:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401fc4:	6823      	ldr	r3, [r4, #0]
  401fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fc8:	681a      	ldr	r2, [r3, #0]
  401fca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401fce:	d103      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  401fd0:	685a      	ldr	r2, [r3, #4]
  401fd2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401fd6:	d02b      	beq.n	402030 <vTaskSwitchContext+0x7c>
  401fd8:	6820      	ldr	r0, [r4, #0]
  401fda:	6821      	ldr	r1, [r4, #0]
  401fdc:	4b1e      	ldr	r3, [pc, #120]	; (402058 <vTaskSwitchContext+0xa4>)
  401fde:	3134      	adds	r1, #52	; 0x34
  401fe0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401fe2:	4b1e      	ldr	r3, [pc, #120]	; (40205c <vTaskSwitchContext+0xa8>)
  401fe4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401fe6:	fab3 f383 	clz	r3, r3
  401fea:	b2db      	uxtb	r3, r3
  401fec:	4a1c      	ldr	r2, [pc, #112]	; (402060 <vTaskSwitchContext+0xac>)
  401fee:	f1c3 031f 	rsb	r3, r3, #31
  401ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ff6:	009b      	lsls	r3, r3, #2
  401ff8:	58d0      	ldr	r0, [r2, r3]
  401ffa:	18d1      	adds	r1, r2, r3
  401ffc:	b950      	cbnz	r0, 402014 <vTaskSwitchContext+0x60>
	__asm volatile
  401ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402002:	b672      	cpsid	i
  402004:	f383 8811 	msr	BASEPRI, r3
  402008:	f3bf 8f6f 	isb	sy
  40200c:	f3bf 8f4f 	dsb	sy
  402010:	b662      	cpsie	i
  402012:	e7fe      	b.n	402012 <vTaskSwitchContext+0x5e>
  402014:	3308      	adds	r3, #8
  402016:	6848      	ldr	r0, [r1, #4]
  402018:	441a      	add	r2, r3
  40201a:	6843      	ldr	r3, [r0, #4]
  40201c:	4293      	cmp	r3, r2
  40201e:	604b      	str	r3, [r1, #4]
  402020:	d00f      	beq.n	402042 <vTaskSwitchContext+0x8e>
  402022:	68db      	ldr	r3, [r3, #12]
  402024:	6023      	str	r3, [r4, #0]
  402026:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  402028:	4b09      	ldr	r3, [pc, #36]	; (402050 <vTaskSwitchContext+0x9c>)
  40202a:	2201      	movs	r2, #1
  40202c:	601a      	str	r2, [r3, #0]
  40202e:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402030:	689a      	ldr	r2, [r3, #8]
  402032:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402036:	d1cf      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  402038:	68db      	ldr	r3, [r3, #12]
  40203a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40203e:	d1cb      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  402040:	e7cf      	b.n	401fe2 <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402042:	685b      	ldr	r3, [r3, #4]
  402044:	604b      	str	r3, [r1, #4]
  402046:	68db      	ldr	r3, [r3, #12]
  402048:	6023      	str	r3, [r4, #0]
  40204a:	bd10      	pop	{r4, pc}
  40204c:	20400acc 	.word	0x20400acc
  402050:	20400b50 	.word	0x20400b50
  402054:	20400a54 	.word	0x20400a54
  402058:	00402c9d 	.word	0x00402c9d
  40205c:	20400ad8 	.word	0x20400ad8
  402060:	20400a60 	.word	0x20400a60

00402064 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402064:	b1e8      	cbz	r0, 4020a2 <vTaskPlaceOnEventList+0x3e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402066:	4b18      	ldr	r3, [pc, #96]	; (4020c8 <vTaskPlaceOnEventList+0x64>)
{
  402068:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40206a:	4d18      	ldr	r5, [pc, #96]	; (4020cc <vTaskPlaceOnEventList+0x68>)
  40206c:	460c      	mov	r4, r1
  40206e:	6829      	ldr	r1, [r5, #0]
  402070:	3118      	adds	r1, #24
  402072:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402074:	6828      	ldr	r0, [r5, #0]
  402076:	4b16      	ldr	r3, [pc, #88]	; (4020d0 <vTaskPlaceOnEventList+0x6c>)
  402078:	3004      	adds	r0, #4
  40207a:	4798      	blx	r3
  40207c:	b940      	cbnz	r0, 402090 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40207e:	682b      	ldr	r3, [r5, #0]
  402080:	2201      	movs	r2, #1
  402082:	4914      	ldr	r1, [pc, #80]	; (4020d4 <vTaskPlaceOnEventList+0x70>)
  402084:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402086:	680b      	ldr	r3, [r1, #0]
  402088:	4082      	lsls	r2, r0
  40208a:	ea23 0302 	bic.w	r3, r3, r2
  40208e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402090:	1c63      	adds	r3, r4, #1
  402092:	d011      	beq.n	4020b8 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402094:	4a10      	ldr	r2, [pc, #64]	; (4020d8 <vTaskPlaceOnEventList+0x74>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402096:	4b11      	ldr	r3, [pc, #68]	; (4020dc <vTaskPlaceOnEventList+0x78>)
			xTimeToWake = xTickCount + xTicksToWait;
  402098:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40209a:	4420      	add	r0, r4
}
  40209c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4020a0:	4718      	bx	r3
  4020a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a6:	b672      	cpsid	i
  4020a8:	f383 8811 	msr	BASEPRI, r3
  4020ac:	f3bf 8f6f 	isb	sy
  4020b0:	f3bf 8f4f 	dsb	sy
  4020b4:	b662      	cpsie	i
  4020b6:	e7fe      	b.n	4020b6 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020b8:	6829      	ldr	r1, [r5, #0]
  4020ba:	4809      	ldr	r0, [pc, #36]	; (4020e0 <vTaskPlaceOnEventList+0x7c>)
  4020bc:	3104      	adds	r1, #4
  4020be:	4b09      	ldr	r3, [pc, #36]	; (4020e4 <vTaskPlaceOnEventList+0x80>)
}
  4020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020c4:	4718      	bx	r3
  4020c6:	bf00      	nop
  4020c8:	00400d11 	.word	0x00400d11
  4020cc:	20400a54 	.word	0x20400a54
  4020d0:	00400d45 	.word	0x00400d45
  4020d4:	20400ad8 	.word	0x20400ad8
  4020d8:	20400b4c 	.word	0x20400b4c
  4020dc:	00401901 	.word	0x00401901
  4020e0:	20400b24 	.word	0x20400b24
  4020e4:	00400cf9 	.word	0x00400cf9

004020e8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4020e8:	b1f8      	cbz	r0, 40212a <vTaskPlaceOnEventListRestricted+0x42>
	{
  4020ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4020ee:	4c18      	ldr	r4, [pc, #96]	; (402150 <vTaskPlaceOnEventListRestricted+0x68>)
  4020f0:	460d      	mov	r5, r1
  4020f2:	4f18      	ldr	r7, [pc, #96]	; (402154 <vTaskPlaceOnEventListRestricted+0x6c>)
  4020f4:	4616      	mov	r6, r2
  4020f6:	6821      	ldr	r1, [r4, #0]
  4020f8:	3118      	adds	r1, #24
  4020fa:	47b8      	blx	r7
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4020fc:	6820      	ldr	r0, [r4, #0]
  4020fe:	4b16      	ldr	r3, [pc, #88]	; (402158 <vTaskPlaceOnEventListRestricted+0x70>)
  402100:	3004      	adds	r0, #4
  402102:	4798      	blx	r3
  402104:	b940      	cbnz	r0, 402118 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402106:	6823      	ldr	r3, [r4, #0]
  402108:	2201      	movs	r2, #1
  40210a:	4914      	ldr	r1, [pc, #80]	; (40215c <vTaskPlaceOnEventListRestricted+0x74>)
  40210c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40210e:	680b      	ldr	r3, [r1, #0]
  402110:	4082      	lsls	r2, r0
  402112:	ea23 0302 	bic.w	r3, r3, r2
  402116:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402118:	2e01      	cmp	r6, #1
  40211a:	d011      	beq.n	402140 <vTaskPlaceOnEventListRestricted+0x58>
				xTimeToWake = xTickCount + xTicksToWait;
  40211c:	4a10      	ldr	r2, [pc, #64]	; (402160 <vTaskPlaceOnEventListRestricted+0x78>)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40211e:	4b11      	ldr	r3, [pc, #68]	; (402164 <vTaskPlaceOnEventListRestricted+0x7c>)
				xTimeToWake = xTickCount + xTicksToWait;
  402120:	6810      	ldr	r0, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402122:	4428      	add	r0, r5
	}
  402124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402128:	4718      	bx	r3
  40212a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40212e:	b672      	cpsid	i
  402130:	f383 8811 	msr	BASEPRI, r3
  402134:	f3bf 8f6f 	isb	sy
  402138:	f3bf 8f4f 	dsb	sy
  40213c:	b662      	cpsie	i
  40213e:	e7fe      	b.n	40213e <vTaskPlaceOnEventListRestricted+0x56>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402140:	6821      	ldr	r1, [r4, #0]
  402142:	463b      	mov	r3, r7
  402144:	4808      	ldr	r0, [pc, #32]	; (402168 <vTaskPlaceOnEventListRestricted+0x80>)
  402146:	3104      	adds	r1, #4
	}
  402148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40214c:	4718      	bx	r3
  40214e:	bf00      	nop
  402150:	20400a54 	.word	0x20400a54
  402154:	00400cf9 	.word	0x00400cf9
  402158:	00400d45 	.word	0x00400d45
  40215c:	20400ad8 	.word	0x20400ad8
  402160:	20400b4c 	.word	0x20400b4c
  402164:	00401901 	.word	0x00401901
  402168:	20400b24 	.word	0x20400b24

0040216c <xTaskRemoveFromEventList>:
{
  40216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40216e:	68c3      	ldr	r3, [r0, #12]
  402170:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402172:	b31c      	cbz	r4, 4021bc <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402174:	f104 0518 	add.w	r5, r4, #24
  402178:	4f19      	ldr	r7, [pc, #100]	; (4021e0 <xTaskRemoveFromEventList+0x74>)
  40217a:	4628      	mov	r0, r5
  40217c:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40217e:	4b19      	ldr	r3, [pc, #100]	; (4021e4 <xTaskRemoveFromEventList+0x78>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	bb43      	cbnz	r3, 4021d6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402184:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  402186:	4d18      	ldr	r5, [pc, #96]	; (4021e8 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402188:	4630      	mov	r0, r6
  40218a:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  40218c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40218e:	2301      	movs	r3, #1
  402190:	4816      	ldr	r0, [pc, #88]	; (4021ec <xTaskRemoveFromEventList+0x80>)
  402192:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  402196:	4631      	mov	r1, r6
  402198:	4093      	lsls	r3, r2
  40219a:	682a      	ldr	r2, [r5, #0]
  40219c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  4021a0:	4313      	orrs	r3, r2
  4021a2:	4a13      	ldr	r2, [pc, #76]	; (4021f0 <xTaskRemoveFromEventList+0x84>)
  4021a4:	602b      	str	r3, [r5, #0]
  4021a6:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4021a8:	4b12      	ldr	r3, [pc, #72]	; (4021f4 <xTaskRemoveFromEventList+0x88>)
  4021aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4021ac:	681b      	ldr	r3, [r3, #0]
  4021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021b0:	429a      	cmp	r2, r3
  4021b2:	d90e      	bls.n	4021d2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  4021b4:	4b10      	ldr	r3, [pc, #64]	; (4021f8 <xTaskRemoveFromEventList+0x8c>)
  4021b6:	2001      	movs	r0, #1
  4021b8:	6018      	str	r0, [r3, #0]
  4021ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021c0:	b672      	cpsid	i
  4021c2:	f383 8811 	msr	BASEPRI, r3
  4021c6:	f3bf 8f6f 	isb	sy
  4021ca:	f3bf 8f4f 	dsb	sy
  4021ce:	b662      	cpsie	i
  4021d0:	e7fe      	b.n	4021d0 <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  4021d2:	2000      	movs	r0, #0
}
  4021d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4021d6:	4629      	mov	r1, r5
  4021d8:	4808      	ldr	r0, [pc, #32]	; (4021fc <xTaskRemoveFromEventList+0x90>)
  4021da:	4b05      	ldr	r3, [pc, #20]	; (4021f0 <xTaskRemoveFromEventList+0x84>)
  4021dc:	4798      	blx	r3
  4021de:	e7e3      	b.n	4021a8 <xTaskRemoveFromEventList+0x3c>
  4021e0:	00400d45 	.word	0x00400d45
  4021e4:	20400acc 	.word	0x20400acc
  4021e8:	20400ad8 	.word	0x20400ad8
  4021ec:	20400a60 	.word	0x20400a60
  4021f0:	00400cf9 	.word	0x00400cf9
  4021f4:	20400a54 	.word	0x20400a54
  4021f8:	20400b50 	.word	0x20400b50
  4021fc:	20400b0c 	.word	0x20400b0c

00402200 <vTaskSetTimeOutState>:
{
  402200:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  402202:	b130      	cbz	r0, 402212 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402204:	4a04      	ldr	r2, [pc, #16]	; (402218 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  402206:	4b05      	ldr	r3, [pc, #20]	; (40221c <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402208:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40220a:	681b      	ldr	r3, [r3, #0]
  40220c:	e880 000c 	stmia.w	r0, {r2, r3}
  402210:	bd08      	pop	{r3, pc}
  402212:	4b03      	ldr	r3, [pc, #12]	; (402220 <vTaskSetTimeOutState+0x20>)
  402214:	4798      	blx	r3
  402216:	bf00      	nop
  402218:	20400b08 	.word	0x20400b08
  40221c:	20400b4c 	.word	0x20400b4c
  402220:	00401b65 	.word	0x00401b65

00402224 <xTaskCheckForTimeOut>:
{
  402224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  402226:	2800      	cmp	r0, #0
  402228:	d030      	beq.n	40228c <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
  40222a:	b321      	cbz	r1, 402276 <xTaskCheckForTimeOut+0x52>
  40222c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40222e:	4b1f      	ldr	r3, [pc, #124]	; (4022ac <xTaskCheckForTimeOut+0x88>)
  402230:	4604      	mov	r4, r0
  402232:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  402234:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  402236:	481e      	ldr	r0, [pc, #120]	; (4022b0 <xTaskCheckForTimeOut+0x8c>)
			if( *pxTicksToWait == portMAX_DELAY )
  402238:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
  40223a:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40223c:	d031      	beq.n	4022a2 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40223e:	4e1d      	ldr	r6, [pc, #116]	; (4022b4 <xTaskCheckForTimeOut+0x90>)
  402240:	6827      	ldr	r7, [r4, #0]
  402242:	6832      	ldr	r2, [r6, #0]
  402244:	4297      	cmp	r7, r2
  402246:	6862      	ldr	r2, [r4, #4]
  402248:	d006      	beq.n	402258 <xTaskCheckForTimeOut+0x34>
  40224a:	4291      	cmp	r1, r2
  40224c:	d304      	bcc.n	402258 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  40224e:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  402250:	4b19      	ldr	r3, [pc, #100]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  402252:	4798      	blx	r3
}
  402254:	4630      	mov	r0, r6
  402256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402258:	1a8f      	subs	r7, r1, r2
  40225a:	42bb      	cmp	r3, r7
  40225c:	d9f7      	bls.n	40224e <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40225e:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402260:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402262:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
  402264:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402266:	4413      	add	r3, r2
  402268:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40226a:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40226c:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
  40226e:	4b12      	ldr	r3, [pc, #72]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  402270:	4798      	blx	r3
}
  402272:	4630      	mov	r0, r6
  402274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402276:	f04f 0380 	mov.w	r3, #128	; 0x80
  40227a:	b672      	cpsid	i
  40227c:	f383 8811 	msr	BASEPRI, r3
  402280:	f3bf 8f6f 	isb	sy
  402284:	f3bf 8f4f 	dsb	sy
  402288:	b662      	cpsie	i
  40228a:	e7fe      	b.n	40228a <xTaskCheckForTimeOut+0x66>
  40228c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402290:	b672      	cpsid	i
  402292:	f383 8811 	msr	BASEPRI, r3
  402296:	f3bf 8f6f 	isb	sy
  40229a:	f3bf 8f4f 	dsb	sy
  40229e:	b662      	cpsie	i
  4022a0:	e7fe      	b.n	4022a0 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
  4022a2:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
  4022a4:	4b04      	ldr	r3, [pc, #16]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  4022a6:	4798      	blx	r3
}
  4022a8:	4630      	mov	r0, r6
  4022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022ac:	00400e29 	.word	0x00400e29
  4022b0:	20400b4c 	.word	0x20400b4c
  4022b4:	20400b08 	.word	0x20400b08
  4022b8:	00400e75 	.word	0x00400e75

004022bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4022bc:	4b01      	ldr	r3, [pc, #4]	; (4022c4 <vTaskMissedYield+0x8>)
  4022be:	2201      	movs	r2, #1
  4022c0:	601a      	str	r2, [r3, #0]
  4022c2:	4770      	bx	lr
  4022c4:	20400b50 	.word	0x20400b50

004022c8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4022c8:	4b05      	ldr	r3, [pc, #20]	; (4022e0 <xTaskGetSchedulerState+0x18>)
  4022ca:	681b      	ldr	r3, [r3, #0]
  4022cc:	b133      	cbz	r3, 4022dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4022ce:	4b05      	ldr	r3, [pc, #20]	; (4022e4 <xTaskGetSchedulerState+0x1c>)
  4022d0:	681b      	ldr	r3, [r3, #0]
  4022d2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4022d4:	bf0c      	ite	eq
  4022d6:	2002      	moveq	r0, #2
  4022d8:	2000      	movne	r0, #0
  4022da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4022dc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4022de:	4770      	bx	lr
  4022e0:	20400b20 	.word	0x20400b20
  4022e4:	20400acc 	.word	0x20400acc

004022e8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4022e8:	2800      	cmp	r0, #0
  4022ea:	d046      	beq.n	40237a <vTaskPriorityInherit+0x92>
	{
  4022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4022f0:	4c22      	ldr	r4, [pc, #136]	; (40237c <vTaskPriorityInherit+0x94>)
  4022f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4022f4:	6822      	ldr	r2, [r4, #0]
  4022f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4022f8:	4293      	cmp	r3, r2
  4022fa:	d212      	bcs.n	402322 <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4022fc:	6982      	ldr	r2, [r0, #24]
  4022fe:	2a00      	cmp	r2, #0
  402300:	db04      	blt.n	40230c <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402302:	6822      	ldr	r2, [r4, #0]
  402304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402306:	f1c2 0205 	rsb	r2, r2, #5
  40230a:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40230c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402310:	4d1b      	ldr	r5, [pc, #108]	; (402380 <vTaskPriorityInherit+0x98>)
  402312:	6942      	ldr	r2, [r0, #20]
  402314:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402318:	429a      	cmp	r2, r3
  40231a:	d004      	beq.n	402326 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40231c:	6823      	ldr	r3, [r4, #0]
  40231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402320:	62c3      	str	r3, [r0, #44]	; 0x2c
  402322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402326:	1d07      	adds	r7, r0, #4
  402328:	4606      	mov	r6, r0
  40232a:	4b16      	ldr	r3, [pc, #88]	; (402384 <vTaskPriorityInherit+0x9c>)
  40232c:	4638      	mov	r0, r7
  40232e:	4798      	blx	r3
  402330:	bb08      	cbnz	r0, 402376 <vTaskPriorityInherit+0x8e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402332:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  402334:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402338:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40233c:	b9da      	cbnz	r2, 402376 <vTaskPriorityInherit+0x8e>
  40233e:	4a12      	ldr	r2, [pc, #72]	; (402388 <vTaskPriorityInherit+0xa0>)
  402340:	2001      	movs	r0, #1
  402342:	6811      	ldr	r1, [r2, #0]
  402344:	fa00 f303 	lsl.w	r3, r0, r3
  402348:	ea21 0303 	bic.w	r3, r1, r3
  40234c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40234e:	6820      	ldr	r0, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
  402350:	2301      	movs	r3, #1
  402352:	f8d2 e000 	ldr.w	lr, [r2]
  402356:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402358:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40235a:	4c0c      	ldr	r4, [pc, #48]	; (40238c <vTaskPriorityInherit+0xa4>)
  40235c:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40235e:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402364:	ea43 030e 	orr.w	r3, r3, lr
  402368:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  40236c:	6013      	str	r3, [r2, #0]
  40236e:	4623      	mov	r3, r4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  402370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
  402374:	4718      	bx	r3
  402376:	4a04      	ldr	r2, [pc, #16]	; (402388 <vTaskPriorityInherit+0xa0>)
  402378:	e7e9      	b.n	40234e <vTaskPriorityInherit+0x66>
  40237a:	4770      	bx	lr
  40237c:	20400a54 	.word	0x20400a54
  402380:	20400a60 	.word	0x20400a60
  402384:	00400d45 	.word	0x00400d45
  402388:	20400ad8 	.word	0x20400ad8
  40238c:	00400cf9 	.word	0x00400cf9

00402390 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402390:	2800      	cmp	r0, #0
  402392:	d042      	beq.n	40241a <xTaskPriorityDisinherit+0x8a>
	{
  402394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402396:	4b2b      	ldr	r3, [pc, #172]	; (402444 <xTaskPriorityDisinherit+0xb4>)
  402398:	681b      	ldr	r3, [r3, #0]
  40239a:	4298      	cmp	r0, r3
  40239c:	d00a      	beq.n	4023b4 <xTaskPriorityDisinherit+0x24>
  40239e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023a2:	b672      	cpsid	i
  4023a4:	f383 8811 	msr	BASEPRI, r3
  4023a8:	f3bf 8f6f 	isb	sy
  4023ac:	f3bf 8f4f 	dsb	sy
  4023b0:	b662      	cpsie	i
  4023b2:	e7fe      	b.n	4023b2 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  4023b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4023b6:	b953      	cbnz	r3, 4023ce <xTaskPriorityDisinherit+0x3e>
  4023b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023bc:	b672      	cpsid	i
  4023be:	f383 8811 	msr	BASEPRI, r3
  4023c2:	f3bf 8f6f 	isb	sy
  4023c6:	f3bf 8f4f 	dsb	sy
  4023ca:	b662      	cpsie	i
  4023cc:	e7fe      	b.n	4023cc <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  4023d0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  4023d4:	64c3      	str	r3, [r0, #76]	; 0x4c
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4023d6:	4291      	cmp	r1, r2
  4023d8:	d031      	beq.n	40243e <xTaskPriorityDisinherit+0xae>
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d12f      	bne.n	40243e <xTaskPriorityDisinherit+0xae>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4023de:	1d07      	adds	r7, r0, #4
  4023e0:	4604      	mov	r4, r0
  4023e2:	4b19      	ldr	r3, [pc, #100]	; (402448 <xTaskPriorityDisinherit+0xb8>)
  4023e4:	4638      	mov	r0, r7
  4023e6:	4798      	blx	r3
  4023e8:	b1c8      	cbz	r0, 40241e <xTaskPriorityDisinherit+0x8e>
  4023ea:	4818      	ldr	r0, [pc, #96]	; (40244c <xTaskPriorityDisinherit+0xbc>)
  4023ec:	4a18      	ldr	r2, [pc, #96]	; (402450 <xTaskPriorityDisinherit+0xc0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
  4023f0:	2501      	movs	r5, #1
  4023f2:	f8d2 e000 	ldr.w	lr, [r2]
  4023f6:	4639      	mov	r1, r7
  4023f8:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023fc:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402400:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402406:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40240a:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40240c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402410:	4b10      	ldr	r3, [pc, #64]	; (402454 <xTaskPriorityDisinherit+0xc4>)
  402412:	6016      	str	r6, [r2, #0]
  402414:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402416:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  40241a:	2000      	movs	r0, #0
	}
  40241c:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40241e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402420:	480a      	ldr	r0, [pc, #40]	; (40244c <xTaskPriorityDisinherit+0xbc>)
  402422:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402426:	4a0a      	ldr	r2, [pc, #40]	; (402450 <xTaskPriorityDisinherit+0xc0>)
  402428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  40242c:	2b00      	cmp	r3, #0
  40242e:	d1de      	bne.n	4023ee <xTaskPriorityDisinherit+0x5e>
  402430:	2501      	movs	r5, #1
  402432:	6813      	ldr	r3, [r2, #0]
  402434:	40b5      	lsls	r5, r6
  402436:	ea23 0305 	bic.w	r3, r3, r5
  40243a:	6013      	str	r3, [r2, #0]
  40243c:	e7d7      	b.n	4023ee <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  40243e:	2000      	movs	r0, #0
  402440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402442:	bf00      	nop
  402444:	20400a54 	.word	0x20400a54
  402448:	00400d45 	.word	0x00400d45
  40244c:	20400a60 	.word	0x20400a60
  402450:	20400ad8 	.word	0x20400ad8
  402454:	00400cf9 	.word	0x00400cf9

00402458 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402458:	4b04      	ldr	r3, [pc, #16]	; (40246c <pvTaskIncrementMutexHeldCount+0x14>)
  40245a:	681a      	ldr	r2, [r3, #0]
  40245c:	b11a      	cbz	r2, 402466 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40245e:	6819      	ldr	r1, [r3, #0]
  402460:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  402462:	3201      	adds	r2, #1
  402464:	64ca      	str	r2, [r1, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402466:	6818      	ldr	r0, [r3, #0]
	}
  402468:	4770      	bx	lr
  40246a:	bf00      	nop
  40246c:	20400a54 	.word	0x20400a54

00402470 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
  402470:	4291      	cmp	r1, r2
{
  402472:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402474:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402476:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
  402478:	d805      	bhi.n	402486 <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40247a:	1ad2      	subs	r2, r2, r3
  40247c:	6983      	ldr	r3, [r0, #24]
  40247e:	429a      	cmp	r2, r3
  402480:	d307      	bcc.n	402492 <prvInsertTimerInActiveList+0x22>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402482:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402484:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402486:	429a      	cmp	r2, r3
  402488:	d201      	bcs.n	40248e <prvInsertTimerInActiveList+0x1e>
  40248a:	4299      	cmp	r1, r3
  40248c:	d2f9      	bcs.n	402482 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40248e:	4a04      	ldr	r2, [pc, #16]	; (4024a0 <prvInsertTimerInActiveList+0x30>)
  402490:	e000      	b.n	402494 <prvInsertTimerInActiveList+0x24>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402492:	4a04      	ldr	r2, [pc, #16]	; (4024a4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402494:	1d01      	adds	r1, r0, #4
  402496:	4b04      	ldr	r3, [pc, #16]	; (4024a8 <prvInsertTimerInActiveList+0x38>)
  402498:	6810      	ldr	r0, [r2, #0]
  40249a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40249c:	2000      	movs	r0, #0
  40249e:	bd08      	pop	{r3, pc}
  4024a0:	20400b54 	.word	0x20400b54
  4024a4:	20400b58 	.word	0x20400b58
  4024a8:	00400d11 	.word	0x00400d11

004024ac <prvCheckForValidListAndQueue.part.1>:
  4024ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b0:	b672      	cpsid	i
  4024b2:	f383 8811 	msr	BASEPRI, r3
  4024b6:	f3bf 8f6f 	isb	sy
  4024ba:	f3bf 8f4f 	dsb	sy
  4024be:	b662      	cpsie	i
  4024c0:	e7fe      	b.n	4024c0 <prvCheckForValidListAndQueue.part.1+0x14>
  4024c2:	bf00      	nop

004024c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4024c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
  4024c8:	4c13      	ldr	r4, [pc, #76]	; (402518 <prvCheckForValidListAndQueue+0x54>)
	taskENTER_CRITICAL();
  4024ca:	4b14      	ldr	r3, [pc, #80]	; (40251c <prvCheckForValidListAndQueue+0x58>)
  4024cc:	4798      	blx	r3
		if( xTimerQueue == NULL )
  4024ce:	6827      	ldr	r7, [r4, #0]
  4024d0:	b11f      	cbz	r7, 4024da <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4024d2:	4b13      	ldr	r3, [pc, #76]	; (402520 <prvCheckForValidListAndQueue+0x5c>)
}
  4024d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4024d8:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
  4024da:	4e12      	ldr	r6, [pc, #72]	; (402524 <prvCheckForValidListAndQueue+0x60>)
			vListInitialise( &xActiveTimerList2 );
  4024dc:	4d12      	ldr	r5, [pc, #72]	; (402528 <prvCheckForValidListAndQueue+0x64>)
			vListInitialise( &xActiveTimerList1 );
  4024de:	4630      	mov	r0, r6
  4024e0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402540 <prvCheckForValidListAndQueue+0x7c>
  4024e4:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
  4024e6:	4628      	mov	r0, r5
  4024e8:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
  4024ea:	4b10      	ldr	r3, [pc, #64]	; (40252c <prvCheckForValidListAndQueue+0x68>)
			pxOverflowTimerList = &xActiveTimerList2;
  4024ec:	f8df e054 	ldr.w	lr, [pc, #84]	; 402544 <prvCheckForValidListAndQueue+0x80>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024f0:	463a      	mov	r2, r7
			pxCurrentTimerList = &xActiveTimerList1;
  4024f2:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024f4:	2110      	movs	r1, #16
  4024f6:	2005      	movs	r0, #5
  4024f8:	4b0d      	ldr	r3, [pc, #52]	; (402530 <prvCheckForValidListAndQueue+0x6c>)
			pxOverflowTimerList = &xActiveTimerList2;
  4024fa:	f8ce 5000 	str.w	r5, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024fe:	4798      	blx	r3
  402500:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
  402502:	b130      	cbz	r0, 402512 <prvCheckForValidListAndQueue+0x4e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402504:	4b0b      	ldr	r3, [pc, #44]	; (402534 <prvCheckForValidListAndQueue+0x70>)
  402506:	490c      	ldr	r1, [pc, #48]	; (402538 <prvCheckForValidListAndQueue+0x74>)
  402508:	4798      	blx	r3
	taskEXIT_CRITICAL();
  40250a:	4b05      	ldr	r3, [pc, #20]	; (402520 <prvCheckForValidListAndQueue+0x5c>)
}
  40250c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  402510:	4718      	bx	r3
  402512:	4b0a      	ldr	r3, [pc, #40]	; (40253c <prvCheckForValidListAndQueue+0x78>)
  402514:	4798      	blx	r3
  402516:	bf00      	nop
  402518:	20400b88 	.word	0x20400b88
  40251c:	00400e29 	.word	0x00400e29
  402520:	00400e75 	.word	0x00400e75
  402524:	20400b5c 	.word	0x20400b5c
  402528:	20400b70 	.word	0x20400b70
  40252c:	20400b54 	.word	0x20400b54
  402530:	00401359 	.word	0x00401359
  402534:	0040186d 	.word	0x0040186d
  402538:	00408664 	.word	0x00408664
  40253c:	004024ad 	.word	0x004024ad
  402540:	00400cd9 	.word	0x00400cd9
  402544:	20400b58 	.word	0x20400b58

00402548 <xTimerCreateTimerTask>:
{
  402548:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
  40254a:	4b10      	ldr	r3, [pc, #64]	; (40258c <xTimerCreateTimerTask+0x44>)
{
  40254c:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40254e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402550:	4b0f      	ldr	r3, [pc, #60]	; (402590 <xTimerCreateTimerTask+0x48>)
  402552:	681b      	ldr	r3, [r3, #0]
  402554:	b17b      	cbz	r3, 402576 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402556:	2000      	movs	r0, #0
  402558:	2404      	movs	r4, #4
  40255a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40255e:	490d      	ldr	r1, [pc, #52]	; (402594 <xTimerCreateTimerTask+0x4c>)
  402560:	9003      	str	r0, [sp, #12]
  402562:	4603      	mov	r3, r0
  402564:	9002      	str	r0, [sp, #8]
  402566:	9001      	str	r0, [sp, #4]
  402568:	9400      	str	r4, [sp, #0]
  40256a:	480b      	ldr	r0, [pc, #44]	; (402598 <xTimerCreateTimerTask+0x50>)
  40256c:	4c0b      	ldr	r4, [pc, #44]	; (40259c <xTimerCreateTimerTask+0x54>)
  40256e:	47a0      	blx	r4
	configASSERT( xReturn );
  402570:	b108      	cbz	r0, 402576 <xTimerCreateTimerTask+0x2e>
}
  402572:	b004      	add	sp, #16
  402574:	bd10      	pop	{r4, pc}
  402576:	f04f 0380 	mov.w	r3, #128	; 0x80
  40257a:	b672      	cpsid	i
  40257c:	f383 8811 	msr	BASEPRI, r3
  402580:	f3bf 8f6f 	isb	sy
  402584:	f3bf 8f4f 	dsb	sy
  402588:	b662      	cpsie	i
  40258a:	e7fe      	b.n	40258a <xTimerCreateTimerTask+0x42>
  40258c:	004024c5 	.word	0x004024c5
  402590:	20400b88 	.word	0x20400b88
  402594:	0040866c 	.word	0x0040866c
  402598:	004026fd 	.word	0x004026fd
  40259c:	00401b7d 	.word	0x00401b7d

004025a0 <xTimerCreate>:
{
  4025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4025a4:	9f08      	ldr	r7, [sp, #32]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  4025a6:	b1b9      	cbz	r1, 4025d8 <xTimerCreate+0x38>
  4025a8:	461d      	mov	r5, r3
  4025aa:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  4025ac:	4b10      	ldr	r3, [pc, #64]	; (4025f0 <xTimerCreate+0x50>)
  4025ae:	202c      	movs	r0, #44	; 0x2c
  4025b0:	4689      	mov	r9, r1
  4025b2:	4616      	mov	r6, r2
  4025b4:	4798      	blx	r3
		if( pxNewTimer != NULL )
  4025b6:	4604      	mov	r4, r0
  4025b8:	b158      	cbz	r0, 4025d2 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
  4025ba:	4b0e      	ldr	r3, [pc, #56]	; (4025f4 <xTimerCreate+0x54>)
  4025bc:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  4025be:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4025c2:	f8c4 9018 	str.w	r9, [r4, #24]
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4025c6:	1d20      	adds	r0, r4, #4
			pxNewTimer->uxAutoReload = uxAutoReload;
  4025c8:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4025ca:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4025cc:	6267      	str	r7, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4025ce:	4b0a      	ldr	r3, [pc, #40]	; (4025f8 <xTimerCreate+0x58>)
  4025d0:	4798      	blx	r3
}
  4025d2:	4620      	mov	r0, r4
  4025d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025dc:	b672      	cpsid	i
  4025de:	f383 8811 	msr	BASEPRI, r3
  4025e2:	f3bf 8f6f 	isb	sy
  4025e6:	f3bf 8f4f 	dsb	sy
  4025ea:	b662      	cpsie	i
  4025ec:	e7fe      	b.n	4025ec <xTimerCreate+0x4c>
  4025ee:	bf00      	nop
  4025f0:	00401079 	.word	0x00401079
  4025f4:	004024c5 	.word	0x004024c5
  4025f8:	00400cf1 	.word	0x00400cf1

004025fc <xTimerGenericCommand>:
{
  4025fc:	b530      	push	{r4, r5, lr}
  4025fe:	b085      	sub	sp, #20
	configASSERT( xTimer );
  402600:	b310      	cbz	r0, 402648 <xTimerGenericCommand+0x4c>
	if( xTimerQueue != NULL )
  402602:	4c12      	ldr	r4, [pc, #72]	; (40264c <xTimerGenericCommand+0x50>)
  402604:	4605      	mov	r5, r0
  402606:	6820      	ldr	r0, [r4, #0]
  402608:	b168      	cbz	r0, 402626 <xTimerGenericCommand+0x2a>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40260a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40260c:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402610:	dc0b      	bgt.n	40262a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402612:	4b0f      	ldr	r3, [pc, #60]	; (402650 <xTimerGenericCommand+0x54>)
  402614:	4798      	blx	r3
  402616:	2802      	cmp	r0, #2
  402618:	d00e      	beq.n	402638 <xTimerGenericCommand+0x3c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40261a:	2300      	movs	r3, #0
  40261c:	6820      	ldr	r0, [r4, #0]
  40261e:	4669      	mov	r1, sp
  402620:	4c0c      	ldr	r4, [pc, #48]	; (402654 <xTimerGenericCommand+0x58>)
  402622:	461a      	mov	r2, r3
  402624:	47a0      	blx	r4
}
  402626:	b005      	add	sp, #20
  402628:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40262a:	461a      	mov	r2, r3
  40262c:	4669      	mov	r1, sp
  40262e:	2300      	movs	r3, #0
  402630:	4c09      	ldr	r4, [pc, #36]	; (402658 <xTimerGenericCommand+0x5c>)
  402632:	47a0      	blx	r4
}
  402634:	b005      	add	sp, #20
  402636:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402638:	6820      	ldr	r0, [r4, #0]
  40263a:	2300      	movs	r3, #0
  40263c:	9a08      	ldr	r2, [sp, #32]
  40263e:	4669      	mov	r1, sp
  402640:	4c04      	ldr	r4, [pc, #16]	; (402654 <xTimerGenericCommand+0x58>)
  402642:	47a0      	blx	r4
}
  402644:	b005      	add	sp, #20
  402646:	bd30      	pop	{r4, r5, pc}
  402648:	4b04      	ldr	r3, [pc, #16]	; (40265c <xTimerGenericCommand+0x60>)
  40264a:	4798      	blx	r3
  40264c:	20400b88 	.word	0x20400b88
  402650:	004022c9 	.word	0x004022c9
  402654:	004013c5 	.word	0x004013c5
  402658:	004015a5 	.word	0x004015a5
  40265c:	004024ad 	.word	0x004024ad

00402660 <prvSwitchTimerLists>:
{
  402660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402664:	4e20      	ldr	r6, [pc, #128]	; (4026e8 <prvSwitchTimerLists+0x88>)
  402666:	b082      	sub	sp, #8
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402668:	4f20      	ldr	r7, [pc, #128]	; (4026ec <prvSwitchTimerLists+0x8c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40266a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4026f4 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40266e:	e00c      	b.n	40268a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402670:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402672:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402674:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402678:	1d25      	adds	r5, r4, #4
  40267a:	4628      	mov	r0, r5
  40267c:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40267e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402680:	4620      	mov	r0, r4
  402682:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402684:	69e3      	ldr	r3, [r4, #28]
  402686:	2b01      	cmp	r3, #1
  402688:	d00a      	beq.n	4026a0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40268a:	6833      	ldr	r3, [r6, #0]
  40268c:	681a      	ldr	r2, [r3, #0]
  40268e:	2a00      	cmp	r2, #0
  402690:	d1ee      	bne.n	402670 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
  402692:	4a17      	ldr	r2, [pc, #92]	; (4026f0 <prvSwitchTimerLists+0x90>)
  402694:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402696:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
  402698:	6031      	str	r1, [r6, #0]
}
  40269a:	b002      	add	sp, #8
  40269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026a0:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026a2:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026a4:	f04f 0e00 	mov.w	lr, #0
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026a8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 4026f8 <prvSwitchTimerLists+0x98>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026ac:	eb09 0503 	add.w	r5, r9, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026b0:	464a      	mov	r2, r9
  4026b2:	4673      	mov	r3, lr
  4026b4:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
  4026b6:	45a9      	cmp	r9, r5
  4026b8:	d204      	bcs.n	4026c4 <prvSwitchTimerLists+0x64>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4026ba:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4026bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026be:	6830      	ldr	r0, [r6, #0]
  4026c0:	47d0      	blx	sl
  4026c2:	e7e2      	b.n	40268a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026c4:	f8cd e000 	str.w	lr, [sp]
  4026c8:	4671      	mov	r1, lr
  4026ca:	47c0      	blx	r8
				configASSERT( xResult );
  4026cc:	2800      	cmp	r0, #0
  4026ce:	d1dc      	bne.n	40268a <prvSwitchTimerLists+0x2a>
  4026d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d4:	b672      	cpsid	i
  4026d6:	f383 8811 	msr	BASEPRI, r3
  4026da:	f3bf 8f6f 	isb	sy
  4026de:	f3bf 8f4f 	dsb	sy
  4026e2:	b662      	cpsie	i
  4026e4:	e7fe      	b.n	4026e4 <prvSwitchTimerLists+0x84>
  4026e6:	bf00      	nop
  4026e8:	20400b54 	.word	0x20400b54
  4026ec:	00400d45 	.word	0x00400d45
  4026f0:	20400b58 	.word	0x20400b58
  4026f4:	004025fd 	.word	0x004025fd
  4026f8:	00400d11 	.word	0x00400d11

004026fc <prvTimerTask>:
{
  4026fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402700:	f8df 9204 	ldr.w	r9, [pc, #516]	; 402908 <prvTimerTask+0x20c>
  402704:	b089      	sub	sp, #36	; 0x24
  402706:	f8df a204 	ldr.w	sl, [pc, #516]	; 40290c <prvTimerTask+0x210>
  40270a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 402910 <prvTimerTask+0x214>
  40270e:	4d72      	ldr	r5, [pc, #456]	; (4028d8 <prvTimerTask+0x1dc>)
  402710:	4e72      	ldr	r6, [pc, #456]	; (4028dc <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402712:	f8d9 3000 	ldr.w	r3, [r9]
	if( *pxListWasEmpty == pdFALSE )
  402716:	681c      	ldr	r4, [r3, #0]
  402718:	2c00      	cmp	r4, #0
  40271a:	d04e      	beq.n	4027ba <prvTimerTask+0xbe>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40271c:	68db      	ldr	r3, [r3, #12]
  40271e:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
  402720:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  402722:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402724:	4a6e      	ldr	r2, [pc, #440]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402726:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  402728:	6812      	ldr	r2, [r2, #0]
  40272a:	4290      	cmp	r0, r2
  40272c:	d356      	bcc.n	4027dc <prvTimerTask+0xe0>
	xLastTime = xTimeNow;
  40272e:	4a6c      	ldr	r2, [pc, #432]	; (4028e0 <prvTimerTask+0x1e4>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402730:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
  402732:	6010      	str	r0, [r2, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402734:	d960      	bls.n	4027f8 <prvTimerTask+0xfc>
  402736:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402738:	1af9      	subs	r1, r7, r3
  40273a:	6828      	ldr	r0, [r5, #0]
  40273c:	4b69      	ldr	r3, [pc, #420]	; (4028e4 <prvTimerTask+0x1e8>)
  40273e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402740:	4b69      	ldr	r3, [pc, #420]	; (4028e8 <prvTimerTask+0x1ec>)
  402742:	4798      	blx	r3
  402744:	b938      	cbnz	r0, 402756 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
  402746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40274a:	4a68      	ldr	r2, [pc, #416]	; (4028ec <prvTimerTask+0x1f0>)
  40274c:	6013      	str	r3, [r2, #0]
  40274e:	f3bf 8f4f 	dsb	sy
  402752:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402756:	2300      	movs	r3, #0
  402758:	a904      	add	r1, sp, #16
  40275a:	6828      	ldr	r0, [r5, #0]
  40275c:	461a      	mov	r2, r3
  40275e:	47b0      	blx	r6
  402760:	2800      	cmp	r0, #0
  402762:	d0d6      	beq.n	402712 <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402764:	9b04      	ldr	r3, [sp, #16]
  402766:	2b00      	cmp	r3, #0
  402768:	db1f      	blt.n	4027aa <prvTimerTask+0xae>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40276a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40276c:	6963      	ldr	r3, [r4, #20]
  40276e:	b113      	cbz	r3, 402776 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402770:	1d20      	adds	r0, r4, #4
  402772:	4b5f      	ldr	r3, [pc, #380]	; (4028f0 <prvTimerTask+0x1f4>)
  402774:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
  402776:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402778:	4b59      	ldr	r3, [pc, #356]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  40277a:	4602      	mov	r2, r0
	if( xTimeNow < xLastTime )
  40277c:	681b      	ldr	r3, [r3, #0]
  40277e:	4298      	cmp	r0, r3
  402780:	d335      	bcc.n	4027ee <prvTimerTask+0xf2>
  402782:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
  402784:	4956      	ldr	r1, [pc, #344]	; (4028e0 <prvTimerTask+0x1e4>)
  402786:	2b09      	cmp	r3, #9
  402788:	600a      	str	r2, [r1, #0]
  40278a:	d8e4      	bhi.n	402756 <prvTimerTask+0x5a>
  40278c:	2101      	movs	r1, #1
  40278e:	fa01 f303 	lsl.w	r3, r1, r3
  402792:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
  402796:	d163      	bne.n	402860 <prvTimerTask+0x164>
  402798:	f013 0fc7 	tst.w	r3, #199	; 0xc7
  40279c:	d169      	bne.n	402872 <prvTimerTask+0x176>
  40279e:	069b      	lsls	r3, r3, #26
  4027a0:	d5d9      	bpl.n	402756 <prvTimerTask+0x5a>
					vPortFree( pxTimer );
  4027a2:	4620      	mov	r0, r4
  4027a4:	4b53      	ldr	r3, [pc, #332]	; (4028f4 <prvTimerTask+0x1f8>)
  4027a6:	4798      	blx	r3
  4027a8:	e7d5      	b.n	402756 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4027aa:	9b05      	ldr	r3, [sp, #20]
  4027ac:	9907      	ldr	r1, [sp, #28]
  4027ae:	9806      	ldr	r0, [sp, #24]
  4027b0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4027b2:	9b04      	ldr	r3, [sp, #16]
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	dbce      	blt.n	402756 <prvTimerTask+0x5a>
  4027b8:	e7d7      	b.n	40276a <prvTimerTask+0x6e>
	vTaskSuspendAll();
  4027ba:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  4027bc:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027be:	4a48      	ldr	r2, [pc, #288]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027c0:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  4027c2:	6812      	ldr	r2, [r2, #0]
  4027c4:	4282      	cmp	r2, r0
  4027c6:	d809      	bhi.n	4027dc <prvTimerTask+0xe0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027c8:	4a4b      	ldr	r2, [pc, #300]	; (4028f8 <prvTimerTask+0x1fc>)
  4027ca:	4627      	mov	r7, r4
	xLastTime = xTimeNow;
  4027cc:	4944      	ldr	r1, [pc, #272]	; (4028e0 <prvTimerTask+0x1e4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027ce:	6812      	ldr	r2, [r2, #0]
	xLastTime = xTimeNow;
  4027d0:	600b      	str	r3, [r1, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027d2:	6812      	ldr	r2, [r2, #0]
  4027d4:	fab2 f282 	clz	r2, r2
  4027d8:	0952      	lsrs	r2, r2, #5
  4027da:	e7ad      	b.n	402738 <prvTimerTask+0x3c>
  4027dc:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
  4027de:	4b47      	ldr	r3, [pc, #284]	; (4028fc <prvTimerTask+0x200>)
  4027e0:	4798      	blx	r3
	xLastTime = xTimeNow;
  4027e2:	9b03      	ldr	r3, [sp, #12]
  4027e4:	4a3e      	ldr	r2, [pc, #248]	; (4028e0 <prvTimerTask+0x1e4>)
  4027e6:	6013      	str	r3, [r2, #0]
			( void ) xTaskResumeAll();
  4027e8:	4b3f      	ldr	r3, [pc, #252]	; (4028e8 <prvTimerTask+0x1ec>)
  4027ea:	4798      	blx	r3
  4027ec:	e7b3      	b.n	402756 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
  4027ee:	4b43      	ldr	r3, [pc, #268]	; (4028fc <prvTimerTask+0x200>)
  4027f0:	9003      	str	r0, [sp, #12]
  4027f2:	4798      	blx	r3
  4027f4:	9a03      	ldr	r2, [sp, #12]
  4027f6:	e7c4      	b.n	402782 <prvTimerTask+0x86>
  4027f8:	9303      	str	r3, [sp, #12]
				( void ) xTaskResumeAll();
  4027fa:	4b3b      	ldr	r3, [pc, #236]	; (4028e8 <prvTimerTask+0x1ec>)
  4027fc:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027fe:	f8d9 2000 	ldr.w	r2, [r9]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402802:	4b3b      	ldr	r3, [pc, #236]	; (4028f0 <prvTimerTask+0x1f4>)
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402804:	68d2      	ldr	r2, [r2, #12]
  402806:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40280a:	f10b 0004 	add.w	r0, fp, #4
  40280e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402810:	f8db 201c 	ldr.w	r2, [fp, #28]
  402814:	9b03      	ldr	r3, [sp, #12]
  402816:	2a01      	cmp	r2, #1
  402818:	d004      	beq.n	402824 <prvTimerTask+0x128>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40281a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  40281e:	4658      	mov	r0, fp
  402820:	4798      	blx	r3
  402822:	e798      	b.n	402756 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402824:	f8db 1018 	ldr.w	r1, [fp, #24]
  402828:	461a      	mov	r2, r3
  40282a:	4658      	mov	r0, fp
  40282c:	463b      	mov	r3, r7
  40282e:	4439      	add	r1, r7
  402830:	4c33      	ldr	r4, [pc, #204]	; (402900 <prvTimerTask+0x204>)
  402832:	47a0      	blx	r4
  402834:	2801      	cmp	r0, #1
  402836:	d1f0      	bne.n	40281a <prvTimerTask+0x11e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402838:	2300      	movs	r3, #0
  40283a:	463a      	mov	r2, r7
  40283c:	4658      	mov	r0, fp
  40283e:	4c31      	ldr	r4, [pc, #196]	; (402904 <prvTimerTask+0x208>)
  402840:	9300      	str	r3, [sp, #0]
  402842:	4619      	mov	r1, r3
  402844:	47a0      	blx	r4
			configASSERT( xResult );
  402846:	2800      	cmp	r0, #0
  402848:	d1e7      	bne.n	40281a <prvTimerTask+0x11e>
  40284a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40284e:	b672      	cpsid	i
  402850:	f383 8811 	msr	BASEPRI, r3
  402854:	f3bf 8f6f 	isb	sy
  402858:	f3bf 8f4f 	dsb	sy
  40285c:	b662      	cpsie	i
  40285e:	e7fe      	b.n	40285e <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402860:	9905      	ldr	r1, [sp, #20]
  402862:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402864:	b369      	cbz	r1, 4028c2 <prvTimerTask+0x1c6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402866:	4411      	add	r1, r2
  402868:	4620      	mov	r0, r4
  40286a:	4613      	mov	r3, r2
  40286c:	4c24      	ldr	r4, [pc, #144]	; (402900 <prvTimerTask+0x204>)
  40286e:	47a0      	blx	r4
  402870:	e771      	b.n	402756 <prvTimerTask+0x5a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402872:	9b05      	ldr	r3, [sp, #20]
  402874:	4620      	mov	r0, r4
  402876:	69a1      	ldr	r1, [r4, #24]
  402878:	4f21      	ldr	r7, [pc, #132]	; (402900 <prvTimerTask+0x204>)
  40287a:	4419      	add	r1, r3
  40287c:	47b8      	blx	r7
  40287e:	2801      	cmp	r0, #1
  402880:	f47f af69 	bne.w	402756 <prvTimerTask+0x5a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402884:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402886:	4620      	mov	r0, r4
  402888:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40288a:	69e3      	ldr	r3, [r4, #28]
  40288c:	2b01      	cmp	r3, #1
  40288e:	f47f af62 	bne.w	402756 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402892:	9a05      	ldr	r2, [sp, #20]
  402894:	4620      	mov	r0, r4
  402896:	69a4      	ldr	r4, [r4, #24]
  402898:	465b      	mov	r3, fp
  40289a:	f8cd b000 	str.w	fp, [sp]
  40289e:	4659      	mov	r1, fp
  4028a0:	4422      	add	r2, r4
  4028a2:	4c18      	ldr	r4, [pc, #96]	; (402904 <prvTimerTask+0x208>)
  4028a4:	47a0      	blx	r4
							configASSERT( xResult );
  4028a6:	2800      	cmp	r0, #0
  4028a8:	f47f af55 	bne.w	402756 <prvTimerTask+0x5a>
  4028ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b0:	b672      	cpsid	i
  4028b2:	f383 8811 	msr	BASEPRI, r3
  4028b6:	f3bf 8f6f 	isb	sy
  4028ba:	f3bf 8f4f 	dsb	sy
  4028be:	b662      	cpsie	i
  4028c0:	e7fe      	b.n	4028c0 <prvTimerTask+0x1c4>
  4028c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028c6:	b672      	cpsid	i
  4028c8:	f383 8811 	msr	BASEPRI, r3
  4028cc:	f3bf 8f6f 	isb	sy
  4028d0:	f3bf 8f4f 	dsb	sy
  4028d4:	b662      	cpsie	i
  4028d6:	e7fe      	b.n	4028d6 <prvTimerTask+0x1da>
  4028d8:	20400b88 	.word	0x20400b88
  4028dc:	004016a5 	.word	0x004016a5
  4028e0:	20400b84 	.word	0x20400b84
  4028e4:	00401895 	.word	0x00401895
  4028e8:	00401de9 	.word	0x00401de9
  4028ec:	e000ed04 	.word	0xe000ed04
  4028f0:	00400d45 	.word	0x00400d45
  4028f4:	004010ad 	.word	0x004010ad
  4028f8:	20400b58 	.word	0x20400b58
  4028fc:	00402661 	.word	0x00402661
  402900:	00402471 	.word	0x00402471
  402904:	004025fd 	.word	0x004025fd
  402908:	20400b54 	.word	0x20400b54
  40290c:	00401c59 	.word	0x00401c59
  402910:	00401c69 	.word	0x00401c69

00402914 <vTimerCallback>:
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402914:	4b02      	ldr	r3, [pc, #8]	; (402920 <vTimerCallback+0xc>)
  402916:	2101      	movs	r1, #1
	afec->AFEC_CR = AFEC_CR_START;
  402918:	2202      	movs	r2, #2
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40291a:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40291c:	601a      	str	r2, [r3, #0]
  40291e:	4770      	bx	lr
  402920:	4003c000 	.word	0x4003c000

00402924 <task_adc>:
            }
        }
    }
}

static void task_adc(void *pvParameters) {
  402924:	b580      	push	{r7, lr}
  402926:	4e0d      	ldr	r6, [pc, #52]	; (40295c <task_adc+0x38>)
  402928:	b082      	sub	sp, #8
  40292a:	4d0d      	ldr	r5, [pc, #52]	; (402960 <task_adc+0x3c>)
  40292c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 40296c <task_adc+0x48>
  402930:	4c0c      	ldr	r4, [pc, #48]	; (402964 <task_adc+0x40>)
    float media;
    while (1) {
        if (xQueueReceive(xQueueADC, &media, 1000)) {
            printf("ADC_1: %.2f \n", media);
        } else {
            printf("Nao chegou um novo dado em 1 segundo");
  402932:	f8df 803c 	ldr.w	r8, [pc, #60]	; 402970 <task_adc+0x4c>
            printf("ADC_1: %.2f \n", media);
  402936:	4f0c      	ldr	r7, [pc, #48]	; (402968 <task_adc+0x44>)
        if (xQueueReceive(xQueueADC, &media, 1000)) {
  402938:	2300      	movs	r3, #0
  40293a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40293e:	a901      	add	r1, sp, #4
  402940:	6830      	ldr	r0, [r6, #0]
  402942:	47a8      	blx	r5
  402944:	b130      	cbz	r0, 402954 <task_adc+0x30>
            printf("ADC_1: %.2f \n", media);
  402946:	9801      	ldr	r0, [sp, #4]
  402948:	47c8      	blx	r9
  40294a:	4602      	mov	r2, r0
  40294c:	460b      	mov	r3, r1
  40294e:	4638      	mov	r0, r7
  402950:	47a0      	blx	r4
  402952:	e7f1      	b.n	402938 <task_adc+0x14>
            printf("Nao chegou um novo dado em 1 segundo");
  402954:	4640      	mov	r0, r8
  402956:	47a0      	blx	r4
  402958:	e7ee      	b.n	402938 <task_adc+0x14>
  40295a:	bf00      	nop
  40295c:	20400c98 	.word	0x20400c98
  402960:	004016a5 	.word	0x004016a5
  402964:	0040394d 	.word	0x0040394d
  402968:	00408704 	.word	0x00408704
  40296c:	004030ed 	.word	0x004030ed
  402970:	00408714 	.word	0x00408714

00402974 <AFEC_pot_callback>:
static void AFEC_pot_callback(void) {
  402974:	b530      	push	{r4, r5, lr}
  402976:	b085      	sub	sp, #20
	afec->AFEC_CSELR = afec_ch;
  402978:	4907      	ldr	r1, [pc, #28]	; (402998 <AFEC_pot_callback+0x24>)
  40297a:	2300      	movs	r3, #0
    BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  40297c:	2401      	movs	r4, #1
  40297e:	aa04      	add	r2, sp, #16
    xQueueSendFromISR(xQueueProc, &adc, &xHigherPriorityTaskWoken);
  402980:	4806      	ldr	r0, [pc, #24]	; (40299c <AFEC_pot_callback+0x28>)
  402982:	664b      	str	r3, [r1, #100]	; 0x64
	return afec->AFEC_CDR;
  402984:	6e8d      	ldr	r5, [r1, #104]	; 0x68
  402986:	a902      	add	r1, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402988:	f842 4d0c 	str.w	r4, [r2, #-12]!
    xQueueSendFromISR(xQueueProc, &adc, &xHigherPriorityTaskWoken);
  40298c:	4c04      	ldr	r4, [pc, #16]	; (4029a0 <AFEC_pot_callback+0x2c>)
  40298e:	6800      	ldr	r0, [r0, #0]
    adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  402990:	9502      	str	r5, [sp, #8]
    xQueueSendFromISR(xQueueProc, &adc, &xHigherPriorityTaskWoken);
  402992:	47a0      	blx	r4
}
  402994:	b005      	add	sp, #20
  402996:	bd30      	pop	{r4, r5, pc}
  402998:	4003c000 	.word	0x4003c000
  40299c:	20400c94 	.word	0x20400c94
  4029a0:	004015a5 	.word	0x004015a5

004029a4 <usart_serial_getchar>:
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4029a4:	4b2d      	ldr	r3, [pc, #180]	; (402a5c <usart_serial_getchar+0xb8>)
	uint32_t val = 0;
  4029a6:	2200      	movs	r2, #0
{
  4029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (UART0 == (Uart*)p_usart) {
  4029aa:	4298      	cmp	r0, r3
{
  4029ac:	b083      	sub	sp, #12
  4029ae:	4604      	mov	r4, r0
  4029b0:	460d      	mov	r5, r1
	uint32_t val = 0;
  4029b2:	9201      	str	r2, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  4029b4:	d03a      	beq.n	402a2c <usart_serial_getchar+0x88>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4029b6:	4b2a      	ldr	r3, [pc, #168]	; (402a60 <usart_serial_getchar+0xbc>)
  4029b8:	4298      	cmp	r0, r3
  4029ba:	d03f      	beq.n	402a3c <usart_serial_getchar+0x98>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4029bc:	4b29      	ldr	r3, [pc, #164]	; (402a64 <usart_serial_getchar+0xc0>)
  4029be:	4298      	cmp	r0, r3
  4029c0:	d044      	beq.n	402a4c <usart_serial_getchar+0xa8>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4029c2:	4b29      	ldr	r3, [pc, #164]	; (402a68 <usart_serial_getchar+0xc4>)
  4029c4:	4298      	cmp	r0, r3
  4029c6:	d015      	beq.n	4029f4 <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4029c8:	4b28      	ldr	r3, [pc, #160]	; (402a6c <usart_serial_getchar+0xc8>)
  4029ca:	4298      	cmp	r0, r3
  4029cc:	d024      	beq.n	402a18 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4029ce:	4b28      	ldr	r3, [pc, #160]	; (402a70 <usart_serial_getchar+0xcc>)
  4029d0:	429c      	cmp	r4, r3
  4029d2:	d017      	beq.n	402a04 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029d4:	4b27      	ldr	r3, [pc, #156]	; (402a74 <usart_serial_getchar+0xd0>)
  4029d6:	429c      	cmp	r4, r3
  4029d8:	d001      	beq.n	4029de <usart_serial_getchar+0x3a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4029da:	b003      	add	sp, #12
  4029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029de:	af01      	add	r7, sp, #4
  4029e0:	4e25      	ldr	r6, [pc, #148]	; (402a78 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  4029e2:	4639      	mov	r1, r7
  4029e4:	4620      	mov	r0, r4
  4029e6:	47b0      	blx	r6
  4029e8:	2800      	cmp	r0, #0
  4029ea:	d1fa      	bne.n	4029e2 <usart_serial_getchar+0x3e>
		*data = (uint8_t)(val & 0xFF);
  4029ec:	9b01      	ldr	r3, [sp, #4]
  4029ee:	702b      	strb	r3, [r5, #0]
}
  4029f0:	b003      	add	sp, #12
  4029f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029f4:	4e21      	ldr	r6, [pc, #132]	; (402a7c <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  4029f6:	4629      	mov	r1, r5
  4029f8:	4620      	mov	r0, r4
  4029fa:	47b0      	blx	r6
  4029fc:	2800      	cmp	r0, #0
  4029fe:	d1fa      	bne.n	4029f6 <usart_serial_getchar+0x52>
}
  402a00:	b003      	add	sp, #12
  402a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a04:	af01      	add	r7, sp, #4
  402a06:	4e1c      	ldr	r6, [pc, #112]	; (402a78 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a08:	4639      	mov	r1, r7
  402a0a:	4620      	mov	r0, r4
  402a0c:	47b0      	blx	r6
  402a0e:	2800      	cmp	r0, #0
  402a10:	d1fa      	bne.n	402a08 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  402a12:	9b01      	ldr	r3, [sp, #4]
  402a14:	702b      	strb	r3, [r5, #0]
  402a16:	e7eb      	b.n	4029f0 <usart_serial_getchar+0x4c>
  402a18:	af01      	add	r7, sp, #4
  402a1a:	4e17      	ldr	r6, [pc, #92]	; (402a78 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a1c:	4639      	mov	r1, r7
  402a1e:	4620      	mov	r0, r4
  402a20:	47b0      	blx	r6
  402a22:	2800      	cmp	r0, #0
  402a24:	d1fa      	bne.n	402a1c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402a26:	9b01      	ldr	r3, [sp, #4]
  402a28:	702b      	strb	r3, [r5, #0]
  402a2a:	e7e1      	b.n	4029f0 <usart_serial_getchar+0x4c>
  402a2c:	4e13      	ldr	r6, [pc, #76]	; (402a7c <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a2e:	4607      	mov	r7, r0
  402a30:	4629      	mov	r1, r5
  402a32:	4638      	mov	r0, r7
  402a34:	47b0      	blx	r6
  402a36:	2800      	cmp	r0, #0
  402a38:	d1fa      	bne.n	402a30 <usart_serial_getchar+0x8c>
  402a3a:	e7c8      	b.n	4029ce <usart_serial_getchar+0x2a>
  402a3c:	4e0f      	ldr	r6, [pc, #60]	; (402a7c <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a3e:	4607      	mov	r7, r0
  402a40:	4629      	mov	r1, r5
  402a42:	4638      	mov	r0, r7
  402a44:	47b0      	blx	r6
  402a46:	2800      	cmp	r0, #0
  402a48:	d1fa      	bne.n	402a40 <usart_serial_getchar+0x9c>
  402a4a:	e7c0      	b.n	4029ce <usart_serial_getchar+0x2a>
  402a4c:	4e0b      	ldr	r6, [pc, #44]	; (402a7c <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a4e:	4607      	mov	r7, r0
  402a50:	4629      	mov	r1, r5
  402a52:	4638      	mov	r0, r7
  402a54:	47b0      	blx	r6
  402a56:	2800      	cmp	r0, #0
  402a58:	d1fa      	bne.n	402a50 <usart_serial_getchar+0xac>
  402a5a:	e7bb      	b.n	4029d4 <usart_serial_getchar+0x30>
  402a5c:	400e0800 	.word	0x400e0800
  402a60:	400e0a00 	.word	0x400e0a00
  402a64:	400e1a00 	.word	0x400e1a00
  402a68:	400e1c00 	.word	0x400e1c00
  402a6c:	40024000 	.word	0x40024000
  402a70:	40028000 	.word	0x40028000
  402a74:	4002c000 	.word	0x4002c000
  402a78:	00400a2d 	.word	0x00400a2d
  402a7c:	0040092d 	.word	0x0040092d

00402a80 <usart_serial_putchar>:
	if (UART0 == (Uart*)p_usart) {
  402a80:	4b2a      	ldr	r3, [pc, #168]	; (402b2c <usart_serial_putchar+0xac>)
  402a82:	4298      	cmp	r0, r3
{
  402a84:	b570      	push	{r4, r5, r6, lr}
  402a86:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  402a88:	d01c      	beq.n	402ac4 <usart_serial_putchar+0x44>
	if (UART1 == (Uart*)p_usart) {
  402a8a:	4b29      	ldr	r3, [pc, #164]	; (402b30 <usart_serial_putchar+0xb0>)
  402a8c:	4298      	cmp	r0, r3
  402a8e:	d022      	beq.n	402ad6 <usart_serial_putchar+0x56>
	if (UART2 == (Uart*)p_usart) {
  402a90:	4b28      	ldr	r3, [pc, #160]	; (402b34 <usart_serial_putchar+0xb4>)
  402a92:	4298      	cmp	r0, r3
  402a94:	d028      	beq.n	402ae8 <usart_serial_putchar+0x68>
	if (UART3 == (Uart*)p_usart) {
  402a96:	4b28      	ldr	r3, [pc, #160]	; (402b38 <usart_serial_putchar+0xb8>)
  402a98:	4298      	cmp	r0, r3
  402a9a:	d02e      	beq.n	402afa <usart_serial_putchar+0x7a>
	if (USART0 == p_usart) {
  402a9c:	4b27      	ldr	r3, [pc, #156]	; (402b3c <usart_serial_putchar+0xbc>)
  402a9e:	4298      	cmp	r0, r3
  402aa0:	d007      	beq.n	402ab2 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
  402aa2:	4b27      	ldr	r3, [pc, #156]	; (402b40 <usart_serial_putchar+0xc0>)
  402aa4:	4298      	cmp	r0, r3
  402aa6:	d038      	beq.n	402b1a <usart_serial_putchar+0x9a>
	if (USART2 == p_usart) {
  402aa8:	4b26      	ldr	r3, [pc, #152]	; (402b44 <usart_serial_putchar+0xc4>)
  402aaa:	4298      	cmp	r0, r3
  402aac:	d02d      	beq.n	402b0a <usart_serial_putchar+0x8a>
	return 0;
  402aae:	2000      	movs	r0, #0
}
  402ab0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402ab2:	4604      	mov	r4, r0
  402ab4:	4e24      	ldr	r6, [pc, #144]	; (402b48 <usart_serial_putchar+0xc8>)
  402ab6:	4629      	mov	r1, r5
  402ab8:	4620      	mov	r0, r4
  402aba:	47b0      	blx	r6
  402abc:	2800      	cmp	r0, #0
  402abe:	d1fa      	bne.n	402ab6 <usart_serial_putchar+0x36>
		return 1;
  402ac0:	2001      	movs	r0, #1
  402ac2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ac4:	4604      	mov	r4, r0
  402ac6:	4e21      	ldr	r6, [pc, #132]	; (402b4c <usart_serial_putchar+0xcc>)
  402ac8:	4629      	mov	r1, r5
  402aca:	4620      	mov	r0, r4
  402acc:	47b0      	blx	r6
  402ace:	2800      	cmp	r0, #0
  402ad0:	d1fa      	bne.n	402ac8 <usart_serial_putchar+0x48>
		return 1;
  402ad2:	2001      	movs	r0, #1
  402ad4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ad6:	4604      	mov	r4, r0
  402ad8:	4e1c      	ldr	r6, [pc, #112]	; (402b4c <usart_serial_putchar+0xcc>)
  402ada:	4629      	mov	r1, r5
  402adc:	4620      	mov	r0, r4
  402ade:	47b0      	blx	r6
  402ae0:	2800      	cmp	r0, #0
  402ae2:	d1fa      	bne.n	402ada <usart_serial_putchar+0x5a>
		return 1;
  402ae4:	2001      	movs	r0, #1
  402ae6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ae8:	4604      	mov	r4, r0
  402aea:	4e18      	ldr	r6, [pc, #96]	; (402b4c <usart_serial_putchar+0xcc>)
  402aec:	4629      	mov	r1, r5
  402aee:	4620      	mov	r0, r4
  402af0:	47b0      	blx	r6
  402af2:	2800      	cmp	r0, #0
  402af4:	d1fa      	bne.n	402aec <usart_serial_putchar+0x6c>
		return 1;
  402af6:	2001      	movs	r0, #1
  402af8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402afa:	4604      	mov	r4, r0
  402afc:	4e13      	ldr	r6, [pc, #76]	; (402b4c <usart_serial_putchar+0xcc>)
  402afe:	4629      	mov	r1, r5
  402b00:	4620      	mov	r0, r4
  402b02:	47b0      	blx	r6
  402b04:	2800      	cmp	r0, #0
  402b06:	d1fa      	bne.n	402afe <usart_serial_putchar+0x7e>
  402b08:	e7da      	b.n	402ac0 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402b0a:	4604      	mov	r4, r0
  402b0c:	4e0e      	ldr	r6, [pc, #56]	; (402b48 <usart_serial_putchar+0xc8>)
  402b0e:	4629      	mov	r1, r5
  402b10:	4620      	mov	r0, r4
  402b12:	47b0      	blx	r6
  402b14:	2800      	cmp	r0, #0
  402b16:	d1fa      	bne.n	402b0e <usart_serial_putchar+0x8e>
  402b18:	e7d2      	b.n	402ac0 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402b1a:	4604      	mov	r4, r0
  402b1c:	4e0a      	ldr	r6, [pc, #40]	; (402b48 <usart_serial_putchar+0xc8>)
  402b1e:	4629      	mov	r1, r5
  402b20:	4620      	mov	r0, r4
  402b22:	47b0      	blx	r6
  402b24:	2800      	cmp	r0, #0
  402b26:	d1fa      	bne.n	402b1e <usart_serial_putchar+0x9e>
  402b28:	e7ca      	b.n	402ac0 <usart_serial_putchar+0x40>
  402b2a:	bf00      	nop
  402b2c:	400e0800 	.word	0x400e0800
  402b30:	400e0a00 	.word	0x400e0a00
  402b34:	400e1a00 	.word	0x400e1a00
  402b38:	400e1c00 	.word	0x400e1c00
  402b3c:	40024000 	.word	0x40024000
  402b40:	40028000 	.word	0x40028000
  402b44:	4002c000 	.word	0x4002c000
  402b48:	00400a15 	.word	0x00400a15
  402b4c:	0040091d 	.word	0x0040091d

00402b50 <task_proc>:
static void task_proc(void *pvParameters) {
  402b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                            afec_callback_t callback) {
    /*************************************
     * Ativa e configura AFEC
     *************************************/
    /* Ativa AFEC - 0 */
    afec_enable(afec);
  402b54:	4d3b      	ldr	r5, [pc, #236]	; (402c44 <task_proc+0xf4>)
    afec_set_trigger(afec, AFEC_TRIG_SW);

    /*** Configuracao específica do canal AFEC ***/
    struct afec_ch_config afec_ch_cfg;
    afec_ch_get_config_defaults(&afec_ch_cfg);
    afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402b56:	2600      	movs	r6, #0
    afec_enable(afec);
  402b58:	4b3b      	ldr	r3, [pc, #236]	; (402c48 <task_proc+0xf8>)
  402b5a:	4628      	mov	r0, r5
    int contador = 0;
  402b5c:	4634      	mov	r4, r6
  402b5e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 402c98 <task_proc+0x148>
  402b62:	4f3a      	ldr	r7, [pc, #232]	; (402c4c <task_proc+0xfc>)
static void task_proc(void *pvParameters) {
  402b64:	ed2d 8b02 	vpush	{d8}
  402b68:	b08c      	sub	sp, #48	; 0x30
                media = soma / 10;
  402b6a:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
    afec_enable(afec);
  402b6e:	4798      	blx	r3
    afec_get_config_defaults(&afec_cfg);
  402b70:	4b37      	ldr	r3, [pc, #220]	; (402c50 <task_proc+0x100>)
  402b72:	a806      	add	r0, sp, #24
  402b74:	4798      	blx	r3
    afec_init(afec, &afec_cfg);
  402b76:	a906      	add	r1, sp, #24
  402b78:	4628      	mov	r0, r5
  402b7a:	4b36      	ldr	r3, [pc, #216]	; (402c54 <task_proc+0x104>)
  402b7c:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402b7e:	686b      	ldr	r3, [r5, #4]
    afec_ch_get_config_defaults(&afec_ch_cfg);
  402b80:	a803      	add	r0, sp, #12
  402b82:	4a35      	ldr	r2, [pc, #212]	; (402c58 <task_proc+0x108>)
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402b84:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402b88:	606b      	str	r3, [r5, #4]
  402b8a:	4790      	blx	r2
    afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402b8c:	4631      	mov	r1, r6
  402b8e:	4628      	mov	r0, r5
  402b90:	aa03      	add	r2, sp, #12
  402b92:	4b32      	ldr	r3, [pc, #200]	; (402c5c <task_proc+0x10c>)
    afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402b94:	f88d 600d 	strb.w	r6, [sp, #13]
    afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402b98:	4798      	blx	r3
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
	afec->AFEC_CSELR = afec_ch;
  402b9e:	666e      	str	r6, [r5, #100]	; 0x64
    afec_channel_set_analog_offset(afec, afec_channel, 0x200);

    /***  Configura sensor de temperatura ***/
    struct afec_temp_sensor_config afec_temp_sensor_cfg;

    afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402ba0:	a804      	add	r0, sp, #16
  402ba2:	4b2f      	ldr	r3, [pc, #188]	; (402c60 <task_proc+0x110>)
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402ba4:	66ea      	str	r2, [r5, #108]	; 0x6c
  402ba6:	4798      	blx	r3
    afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  402ba8:	4628      	mov	r0, r5
  402baa:	a904      	add	r1, sp, #16
  402bac:	4b2d      	ldr	r3, [pc, #180]	; (402c64 <task_proc+0x114>)
  402bae:	4798      	blx	r3

    /* configura IRQ */
    afec_set_callback(afec, afec_channel, callback, 1);
  402bb0:	4628      	mov	r0, r5
  402bb2:	4631      	mov	r1, r6
  402bb4:	2301      	movs	r3, #1
  402bb6:	4a2c      	ldr	r2, [pc, #176]	; (402c68 <task_proc+0x118>)
  402bb8:	4d2c      	ldr	r5, [pc, #176]	; (402c6c <task_proc+0x11c>)
  402bba:	47a8      	blx	r5
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402bbc:	492c      	ldr	r1, [pc, #176]	; (402c70 <task_proc+0x120>)
  402bbe:	2280      	movs	r2, #128	; 0x80
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402bc0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    xTimer = xTimerCreate(/* Just a text name, not used by the RTOS
  402bc4:	482b      	ldr	r0, [pc, #172]	; (402c74 <task_proc+0x124>)
  402bc6:	4633      	mov	r3, r6
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402bc8:	f881 231d 	strb.w	r2, [r1, #797]	; 0x31d
  402bcc:	2201      	movs	r2, #1
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402bce:	600d      	str	r5, [r1, #0]
  402bd0:	2164      	movs	r1, #100	; 0x64
  402bd2:	9000      	str	r0, [sp, #0]
  402bd4:	4d28      	ldr	r5, [pc, #160]	; (402c78 <task_proc+0x128>)
  402bd6:	4829      	ldr	r0, [pc, #164]	; (402c7c <task_proc+0x12c>)
  402bd8:	47a8      	blx	r5
  402bda:	4a29      	ldr	r2, [pc, #164]	; (402c80 <task_proc+0x130>)
  402bdc:	4605      	mov	r5, r0
    xTimerStart(xTimer, 0);
  402bde:	4b29      	ldr	r3, [pc, #164]	; (402c84 <task_proc+0x134>)
    xTimer = xTimerCreate(/* Just a text name, not used by the RTOS
  402be0:	6010      	str	r0, [r2, #0]
    xTimerStart(xTimer, 0);
  402be2:	4798      	blx	r3
  402be4:	4633      	mov	r3, r6
  402be6:	9600      	str	r6, [sp, #0]
  402be8:	4602      	mov	r2, r0
  402bea:	2101      	movs	r1, #1
  402bec:	4628      	mov	r0, r5
  402bee:	4d26      	ldr	r5, [pc, #152]	; (402c88 <task_proc+0x138>)
  402bf0:	47a8      	blx	r5
    float soma = 0, media = 0;
  402bf2:	eddf 7a26 	vldr	s15, [pc, #152]	; 402c8c <task_proc+0x13c>
    BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402bf6:	2301      	movs	r3, #1
  402bf8:	4e25      	ldr	r6, [pc, #148]	; (402c90 <task_proc+0x140>)
    float soma = 0, media = 0;
  402bfa:	eeb0 8a67 	vmov.f32	s16, s15
  402bfe:	4d25      	ldr	r5, [pc, #148]	; (402c94 <task_proc+0x144>)
  402c00:	edcd 7a04 	vstr	s15, [sp, #16]
    BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402c04:	9303      	str	r3, [sp, #12]
        if (xQueueReceive(xQueueProc, &adc, 1000)) {
  402c06:	2300      	movs	r3, #0
  402c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402c0c:	a906      	add	r1, sp, #24
  402c0e:	6830      	ldr	r0, [r6, #0]
  402c10:	47a8      	blx	r5
  402c12:	2800      	cmp	r0, #0
  402c14:	d0f7      	beq.n	402c06 <task_proc+0xb6>
            soma += adc.value;
  402c16:	eddd 7a06 	vldr	s15, [sp, #24]
            contador += 1;
  402c1a:	3401      	adds	r4, #1
            soma += adc.value;
  402c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
            if (contador == 10) {
  402c20:	2c0a      	cmp	r4, #10
            soma += adc.value;
  402c22:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (contador == 10) {
  402c26:	d1ee      	bne.n	402c06 <task_proc+0xb6>
                media = soma / 10;
  402c28:	eec8 7a28 	vdiv.f32	s15, s16, s17
                xQueueSend(xQueueADC, &media, &xHigherPriorityTaskWoken);
  402c2c:	2300      	movs	r3, #0
  402c2e:	aa03      	add	r2, sp, #12
  402c30:	a904      	add	r1, sp, #16
  402c32:	f8d8 0000 	ldr.w	r0, [r8]
                contador = 0;
  402c36:	461c      	mov	r4, r3
                soma = 0;
  402c38:	ed9f 8a14 	vldr	s16, [pc, #80]	; 402c8c <task_proc+0x13c>
                media = soma / 10;
  402c3c:	edcd 7a04 	vstr	s15, [sp, #16]
                xQueueSend(xQueueADC, &media, &xHigherPriorityTaskWoken);
  402c40:	47b8      	blx	r7
  402c42:	e7e0      	b.n	402c06 <task_proc+0xb6>
  402c44:	4003c000 	.word	0x4003c000
  402c48:	004006c5 	.word	0x004006c5
  402c4c:	004013c5 	.word	0x004013c5
  402c50:	004004f1 	.word	0x004004f1
  402c54:	0040054d 	.word	0x0040054d
  402c58:	00400525 	.word	0x00400525
  402c5c:	004004ad 	.word	0x004004ad
  402c60:	00400531 	.word	0x00400531
  402c64:	004004e1 	.word	0x004004e1
  402c68:	00402975 	.word	0x00402975
  402c6c:	00400649 	.word	0x00400649
  402c70:	e000e100 	.word	0xe000e100
  402c74:	00402915 	.word	0x00402915
  402c78:	004025a1 	.word	0x004025a1
  402c7c:	0040873c 	.word	0x0040873c
  402c80:	20400c9c 	.word	0x20400c9c
  402c84:	00401c69 	.word	0x00401c69
  402c88:	004025fd 	.word	0x004025fd
  402c8c:	00000000 	.word	0x00000000
  402c90:	20400c94 	.word	0x20400c94
  402c94:	004016a5 	.word	0x004016a5
  402c98:	20400c98 	.word	0x20400c98

00402c9c <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  402c9c:	b508      	push	{r3, lr}
    printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402c9e:	460a      	mov	r2, r1
  402ca0:	4b02      	ldr	r3, [pc, #8]	; (402cac <vApplicationStackOverflowHook+0x10>)
  402ca2:	4601      	mov	r1, r0
  402ca4:	4802      	ldr	r0, [pc, #8]	; (402cb0 <vApplicationStackOverflowHook+0x14>)
  402ca6:	4798      	blx	r3
  402ca8:	e7fe      	b.n	402ca8 <vApplicationStackOverflowHook+0xc>
  402caa:	bf00      	nop
  402cac:	0040394d 	.word	0x0040394d
  402cb0:	00408744 	.word	0x00408744

00402cb4 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  402cb4:	4770      	bx	lr
  402cb6:	bf00      	nop

00402cb8 <vApplicationMallocFailedHook>:
  402cb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cbc:	b672      	cpsid	i
  402cbe:	f383 8811 	msr	BASEPRI, r3
  402cc2:	f3bf 8f6f 	isb	sy
  402cc6:	f3bf 8f4f 	dsb	sy
  402cca:	b662      	cpsie	i
  402ccc:	e7fe      	b.n	402ccc <vApplicationMallocFailedHook+0x14>
  402cce:	bf00      	nop

00402cd0 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  402cd0:	b580      	push	{r7, lr}
    sysclk_init();
  402cd2:	4b38      	ldr	r3, [pc, #224]	; (402db4 <main+0xe4>)
int main(void) {
  402cd4:	b08a      	sub	sp, #40	; 0x28
    sysclk_init();
  402cd6:	4798      	blx	r3
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402cd8:	4e37      	ldr	r6, [pc, #220]	; (402db8 <main+0xe8>)
    board_init();
  402cda:	4b38      	ldr	r3, [pc, #224]	; (402dbc <main+0xec>)
	usart_settings.stop_bits= opt->stopbits;
  402cdc:	2400      	movs	r4, #0
  402cde:	4f38      	ldr	r7, [pc, #224]	; (402dc0 <main+0xf0>)
  402ce0:	4798      	blx	r3
	stdio_base = (void *)usart;
  402ce2:	4d38      	ldr	r5, [pc, #224]	; (402dc4 <main+0xf4>)
	usart_settings.baudrate = opt->baudrate;
  402ce4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402ce8:	4837      	ldr	r0, [pc, #220]	; (402dc8 <main+0xf8>)
	usart_settings.char_length = opt->charlength;
  402cea:	21c0      	movs	r1, #192	; 0xc0
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402cec:	6037      	str	r7, [r6, #0]
	usart_settings.parity_type = opt->paritytype;
  402cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402cf2:	4e36      	ldr	r6, [pc, #216]	; (402dcc <main+0xfc>)
  402cf4:	4f36      	ldr	r7, [pc, #216]	; (402dd0 <main+0x100>)
	stdio_base = (void *)usart;
  402cf6:	6005      	str	r5, [r0, #0]
  402cf8:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402cfa:	9304      	str	r3, [sp, #16]
  402cfc:	4b35      	ldr	r3, [pc, #212]	; (402dd4 <main+0x104>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402cfe:	6037      	str	r7, [r6, #0]
	usart_settings.char_length = opt->charlength;
  402d00:	9105      	str	r1, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402d02:	9206      	str	r2, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402d04:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402d06:	9408      	str	r4, [sp, #32]
  402d08:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402d0a:	4a33      	ldr	r2, [pc, #204]	; (402dd8 <main+0x108>)
  402d0c:	a904      	add	r1, sp, #16
  402d0e:	4628      	mov	r0, r5
  402d10:	4b32      	ldr	r3, [pc, #200]	; (402ddc <main+0x10c>)
  402d12:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402d14:	4e32      	ldr	r6, [pc, #200]	; (402de0 <main+0x110>)
		usart_enable_tx(p_usart);
  402d16:	4628      	mov	r0, r5
  402d18:	4b32      	ldr	r3, [pc, #200]	; (402de4 <main+0x114>)
  402d1a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402d1c:	4628      	mov	r0, r5
  402d1e:	4b32      	ldr	r3, [pc, #200]	; (402de8 <main+0x118>)
  402d20:	4798      	blx	r3
  402d22:	6833      	ldr	r3, [r6, #0]
  402d24:	4d31      	ldr	r5, [pc, #196]	; (402dec <main+0x11c>)
  402d26:	4621      	mov	r1, r4
  402d28:	6898      	ldr	r0, [r3, #8]
  402d2a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402d2c:	6833      	ldr	r3, [r6, #0]
  402d2e:	4621      	mov	r1, r4
    configure_console();

    xQueueProc = xQueueCreate(100, sizeof(adcData));
  402d30:	4f2f      	ldr	r7, [pc, #188]	; (402df0 <main+0x120>)
  402d32:	6858      	ldr	r0, [r3, #4]
  402d34:	47a8      	blx	r5
    setbuf(stdout, NULL);
  402d36:	6833      	ldr	r3, [r6, #0]
  402d38:	4621      	mov	r1, r4
    xQueueProc = xQueueCreate(100, sizeof(adcData));
  402d3a:	4e2e      	ldr	r6, [pc, #184]	; (402df4 <main+0x124>)
    setbuf(stdout, NULL);
  402d3c:	6898      	ldr	r0, [r3, #8]
  402d3e:	47a8      	blx	r5
    xQueueProc = xQueueCreate(100, sizeof(adcData));
  402d40:	4622      	mov	r2, r4
  402d42:	2108      	movs	r1, #8
  402d44:	2064      	movs	r0, #100	; 0x64
  402d46:	47b0      	blx	r6
    xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d48:	4622      	mov	r2, r4
    xQueueProc = xQueueCreate(100, sizeof(adcData));
  402d4a:	6038      	str	r0, [r7, #0]
    xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d4c:	2108      	movs	r1, #8
  402d4e:	2064      	movs	r0, #100	; 0x64
  402d50:	4d29      	ldr	r5, [pc, #164]	; (402df8 <main+0x128>)
  402d52:	47b0      	blx	r6
    if (xQueueProc == NULL)
  402d54:	683b      	ldr	r3, [r7, #0]
    xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d56:	6028      	str	r0, [r5, #0]
    if (xQueueProc == NULL)
  402d58:	b333      	cbz	r3, 402da8 <main+0xd8>
  402d5a:	4c28      	ldr	r4, [pc, #160]	; (402dfc <main+0x12c>)
        printf("falha em criar a queue xQueueProc \n");
    if (xQueueADC == NULL)
  402d5c:	b308      	cbz	r0, 402da2 <main+0xd2>
        printf("falha em criar a queue xQueueADC \n");

    if (xTaskCreate(task_proc, "ADC", TASK_PROC_STACK_SIZE, NULL,
  402d5e:	2000      	movs	r0, #0
  402d60:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402d64:	4926      	ldr	r1, [pc, #152]	; (402e00 <main+0x130>)
  402d66:	9003      	str	r0, [sp, #12]
  402d68:	4603      	mov	r3, r0
  402d6a:	9002      	str	r0, [sp, #8]
  402d6c:	9001      	str	r0, [sp, #4]
  402d6e:	9000      	str	r0, [sp, #0]
  402d70:	4d24      	ldr	r5, [pc, #144]	; (402e04 <main+0x134>)
  402d72:	4825      	ldr	r0, [pc, #148]	; (402e08 <main+0x138>)
  402d74:	47a8      	blx	r5
  402d76:	2801      	cmp	r0, #1
  402d78:	d001      	beq.n	402d7e <main+0xae>
                    TASK_PROC_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create test PROC task\r\n");
  402d7a:	4824      	ldr	r0, [pc, #144]	; (402e0c <main+0x13c>)
  402d7c:	47a0      	blx	r4
    }
    if (xTaskCreate(task_adc, "ADC", TASK_ADC_STACK_SIZE, NULL,
  402d7e:	2000      	movs	r0, #0
  402d80:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402d84:	491e      	ldr	r1, [pc, #120]	; (402e00 <main+0x130>)
  402d86:	9003      	str	r0, [sp, #12]
  402d88:	4603      	mov	r3, r0
  402d8a:	9002      	str	r0, [sp, #8]
  402d8c:	9001      	str	r0, [sp, #4]
  402d8e:	9000      	str	r0, [sp, #0]
  402d90:	481f      	ldr	r0, [pc, #124]	; (402e10 <main+0x140>)
  402d92:	47a8      	blx	r5
  402d94:	2801      	cmp	r0, #1
  402d96:	d001      	beq.n	402d9c <main+0xcc>
                    TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create test ADC task\r\n");
  402d98:	481e      	ldr	r0, [pc, #120]	; (402e14 <main+0x144>)
  402d9a:	47a0      	blx	r4
    }

    vTaskStartScheduler();
  402d9c:	4b1e      	ldr	r3, [pc, #120]	; (402e18 <main+0x148>)
  402d9e:	4798      	blx	r3
  402da0:	e7fe      	b.n	402da0 <main+0xd0>
        printf("falha em criar a queue xQueueADC \n");
  402da2:	481e      	ldr	r0, [pc, #120]	; (402e1c <main+0x14c>)
  402da4:	47a0      	blx	r4
  402da6:	e7da      	b.n	402d5e <main+0x8e>
        printf("falha em criar a queue xQueueProc \n");
  402da8:	481d      	ldr	r0, [pc, #116]	; (402e20 <main+0x150>)
  402daa:	4c14      	ldr	r4, [pc, #80]	; (402dfc <main+0x12c>)
  402dac:	47a0      	blx	r4
  402dae:	6828      	ldr	r0, [r5, #0]
  402db0:	e7d4      	b.n	402d5c <main+0x8c>
  402db2:	bf00      	nop
  402db4:	004001ad 	.word	0x004001ad
  402db8:	20400bcc 	.word	0x20400bcc
  402dbc:	004002ad 	.word	0x004002ad
  402dc0:	00402a81 	.word	0x00402a81
  402dc4:	40028000 	.word	0x40028000
  402dc8:	20400bd0 	.word	0x20400bd0
  402dcc:	20400bc8 	.word	0x20400bc8
  402dd0:	004029a5 	.word	0x004029a5
  402dd4:	004008d5 	.word	0x004008d5
  402dd8:	08f0d180 	.word	0x08f0d180
  402ddc:	004009a1 	.word	0x004009a1
  402de0:	2040000c 	.word	0x2040000c
  402de4:	00400a05 	.word	0x00400a05
  402de8:	00400a0d 	.word	0x00400a0d
  402dec:	00403a45 	.word	0x00403a45
  402df0:	20400c94 	.word	0x20400c94
  402df4:	00401359 	.word	0x00401359
  402df8:	20400c98 	.word	0x20400c98
  402dfc:	00403a11 	.word	0x00403a11
  402e00:	004086bc 	.word	0x004086bc
  402e04:	00401b7d 	.word	0x00401b7d
  402e08:	00402b51 	.word	0x00402b51
  402e0c:	004086c0 	.word	0x004086c0
  402e10:	00402925 	.word	0x00402925
  402e14:	004086e4 	.word	0x004086e4
  402e18:	00401bc9 	.word	0x00401bc9
  402e1c:	00408698 	.word	0x00408698
  402e20:	00408674 	.word	0x00408674

00402e24 <__aeabi_drsub>:
  402e24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402e28:	e002      	b.n	402e30 <__adddf3>
  402e2a:	bf00      	nop

00402e2c <__aeabi_dsub>:
  402e2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402e30 <__adddf3>:
  402e30:	b530      	push	{r4, r5, lr}
  402e32:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402e36:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402e3a:	ea94 0f05 	teq	r4, r5
  402e3e:	bf08      	it	eq
  402e40:	ea90 0f02 	teqeq	r0, r2
  402e44:	bf1f      	itttt	ne
  402e46:	ea54 0c00 	orrsne.w	ip, r4, r0
  402e4a:	ea55 0c02 	orrsne.w	ip, r5, r2
  402e4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402e52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402e56:	f000 80e2 	beq.w	40301e <__adddf3+0x1ee>
  402e5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402e5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402e62:	bfb8      	it	lt
  402e64:	426d      	neglt	r5, r5
  402e66:	dd0c      	ble.n	402e82 <__adddf3+0x52>
  402e68:	442c      	add	r4, r5
  402e6a:	ea80 0202 	eor.w	r2, r0, r2
  402e6e:	ea81 0303 	eor.w	r3, r1, r3
  402e72:	ea82 0000 	eor.w	r0, r2, r0
  402e76:	ea83 0101 	eor.w	r1, r3, r1
  402e7a:	ea80 0202 	eor.w	r2, r0, r2
  402e7e:	ea81 0303 	eor.w	r3, r1, r3
  402e82:	2d36      	cmp	r5, #54	; 0x36
  402e84:	bf88      	it	hi
  402e86:	bd30      	pophi	{r4, r5, pc}
  402e88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402e8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402e90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402e94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402e98:	d002      	beq.n	402ea0 <__adddf3+0x70>
  402e9a:	4240      	negs	r0, r0
  402e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402ea0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402ea4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402ea8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402eac:	d002      	beq.n	402eb4 <__adddf3+0x84>
  402eae:	4252      	negs	r2, r2
  402eb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402eb4:	ea94 0f05 	teq	r4, r5
  402eb8:	f000 80a7 	beq.w	40300a <__adddf3+0x1da>
  402ebc:	f1a4 0401 	sub.w	r4, r4, #1
  402ec0:	f1d5 0e20 	rsbs	lr, r5, #32
  402ec4:	db0d      	blt.n	402ee2 <__adddf3+0xb2>
  402ec6:	fa02 fc0e 	lsl.w	ip, r2, lr
  402eca:	fa22 f205 	lsr.w	r2, r2, r5
  402ece:	1880      	adds	r0, r0, r2
  402ed0:	f141 0100 	adc.w	r1, r1, #0
  402ed4:	fa03 f20e 	lsl.w	r2, r3, lr
  402ed8:	1880      	adds	r0, r0, r2
  402eda:	fa43 f305 	asr.w	r3, r3, r5
  402ede:	4159      	adcs	r1, r3
  402ee0:	e00e      	b.n	402f00 <__adddf3+0xd0>
  402ee2:	f1a5 0520 	sub.w	r5, r5, #32
  402ee6:	f10e 0e20 	add.w	lr, lr, #32
  402eea:	2a01      	cmp	r2, #1
  402eec:	fa03 fc0e 	lsl.w	ip, r3, lr
  402ef0:	bf28      	it	cs
  402ef2:	f04c 0c02 	orrcs.w	ip, ip, #2
  402ef6:	fa43 f305 	asr.w	r3, r3, r5
  402efa:	18c0      	adds	r0, r0, r3
  402efc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402f00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f04:	d507      	bpl.n	402f16 <__adddf3+0xe6>
  402f06:	f04f 0e00 	mov.w	lr, #0
  402f0a:	f1dc 0c00 	rsbs	ip, ip, #0
  402f0e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402f12:	eb6e 0101 	sbc.w	r1, lr, r1
  402f16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402f1a:	d31b      	bcc.n	402f54 <__adddf3+0x124>
  402f1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402f20:	d30c      	bcc.n	402f3c <__adddf3+0x10c>
  402f22:	0849      	lsrs	r1, r1, #1
  402f24:	ea5f 0030 	movs.w	r0, r0, rrx
  402f28:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402f2c:	f104 0401 	add.w	r4, r4, #1
  402f30:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402f34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402f38:	f080 809a 	bcs.w	403070 <__adddf3+0x240>
  402f3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402f40:	bf08      	it	eq
  402f42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402f46:	f150 0000 	adcs.w	r0, r0, #0
  402f4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f4e:	ea41 0105 	orr.w	r1, r1, r5
  402f52:	bd30      	pop	{r4, r5, pc}
  402f54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402f58:	4140      	adcs	r0, r0
  402f5a:	eb41 0101 	adc.w	r1, r1, r1
  402f5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402f62:	f1a4 0401 	sub.w	r4, r4, #1
  402f66:	d1e9      	bne.n	402f3c <__adddf3+0x10c>
  402f68:	f091 0f00 	teq	r1, #0
  402f6c:	bf04      	itt	eq
  402f6e:	4601      	moveq	r1, r0
  402f70:	2000      	moveq	r0, #0
  402f72:	fab1 f381 	clz	r3, r1
  402f76:	bf08      	it	eq
  402f78:	3320      	addeq	r3, #32
  402f7a:	f1a3 030b 	sub.w	r3, r3, #11
  402f7e:	f1b3 0220 	subs.w	r2, r3, #32
  402f82:	da0c      	bge.n	402f9e <__adddf3+0x16e>
  402f84:	320c      	adds	r2, #12
  402f86:	dd08      	ble.n	402f9a <__adddf3+0x16a>
  402f88:	f102 0c14 	add.w	ip, r2, #20
  402f8c:	f1c2 020c 	rsb	r2, r2, #12
  402f90:	fa01 f00c 	lsl.w	r0, r1, ip
  402f94:	fa21 f102 	lsr.w	r1, r1, r2
  402f98:	e00c      	b.n	402fb4 <__adddf3+0x184>
  402f9a:	f102 0214 	add.w	r2, r2, #20
  402f9e:	bfd8      	it	le
  402fa0:	f1c2 0c20 	rsble	ip, r2, #32
  402fa4:	fa01 f102 	lsl.w	r1, r1, r2
  402fa8:	fa20 fc0c 	lsr.w	ip, r0, ip
  402fac:	bfdc      	itt	le
  402fae:	ea41 010c 	orrle.w	r1, r1, ip
  402fb2:	4090      	lslle	r0, r2
  402fb4:	1ae4      	subs	r4, r4, r3
  402fb6:	bfa2      	ittt	ge
  402fb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402fbc:	4329      	orrge	r1, r5
  402fbe:	bd30      	popge	{r4, r5, pc}
  402fc0:	ea6f 0404 	mvn.w	r4, r4
  402fc4:	3c1f      	subs	r4, #31
  402fc6:	da1c      	bge.n	403002 <__adddf3+0x1d2>
  402fc8:	340c      	adds	r4, #12
  402fca:	dc0e      	bgt.n	402fea <__adddf3+0x1ba>
  402fcc:	f104 0414 	add.w	r4, r4, #20
  402fd0:	f1c4 0220 	rsb	r2, r4, #32
  402fd4:	fa20 f004 	lsr.w	r0, r0, r4
  402fd8:	fa01 f302 	lsl.w	r3, r1, r2
  402fdc:	ea40 0003 	orr.w	r0, r0, r3
  402fe0:	fa21 f304 	lsr.w	r3, r1, r4
  402fe4:	ea45 0103 	orr.w	r1, r5, r3
  402fe8:	bd30      	pop	{r4, r5, pc}
  402fea:	f1c4 040c 	rsb	r4, r4, #12
  402fee:	f1c4 0220 	rsb	r2, r4, #32
  402ff2:	fa20 f002 	lsr.w	r0, r0, r2
  402ff6:	fa01 f304 	lsl.w	r3, r1, r4
  402ffa:	ea40 0003 	orr.w	r0, r0, r3
  402ffe:	4629      	mov	r1, r5
  403000:	bd30      	pop	{r4, r5, pc}
  403002:	fa21 f004 	lsr.w	r0, r1, r4
  403006:	4629      	mov	r1, r5
  403008:	bd30      	pop	{r4, r5, pc}
  40300a:	f094 0f00 	teq	r4, #0
  40300e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403012:	bf06      	itte	eq
  403014:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403018:	3401      	addeq	r4, #1
  40301a:	3d01      	subne	r5, #1
  40301c:	e74e      	b.n	402ebc <__adddf3+0x8c>
  40301e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403022:	bf18      	it	ne
  403024:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403028:	d029      	beq.n	40307e <__adddf3+0x24e>
  40302a:	ea94 0f05 	teq	r4, r5
  40302e:	bf08      	it	eq
  403030:	ea90 0f02 	teqeq	r0, r2
  403034:	d005      	beq.n	403042 <__adddf3+0x212>
  403036:	ea54 0c00 	orrs.w	ip, r4, r0
  40303a:	bf04      	itt	eq
  40303c:	4619      	moveq	r1, r3
  40303e:	4610      	moveq	r0, r2
  403040:	bd30      	pop	{r4, r5, pc}
  403042:	ea91 0f03 	teq	r1, r3
  403046:	bf1e      	ittt	ne
  403048:	2100      	movne	r1, #0
  40304a:	2000      	movne	r0, #0
  40304c:	bd30      	popne	{r4, r5, pc}
  40304e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403052:	d105      	bne.n	403060 <__adddf3+0x230>
  403054:	0040      	lsls	r0, r0, #1
  403056:	4149      	adcs	r1, r1
  403058:	bf28      	it	cs
  40305a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40305e:	bd30      	pop	{r4, r5, pc}
  403060:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403064:	bf3c      	itt	cc
  403066:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40306a:	bd30      	popcc	{r4, r5, pc}
  40306c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403070:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403074:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403078:	f04f 0000 	mov.w	r0, #0
  40307c:	bd30      	pop	{r4, r5, pc}
  40307e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403082:	bf1a      	itte	ne
  403084:	4619      	movne	r1, r3
  403086:	4610      	movne	r0, r2
  403088:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40308c:	bf1c      	itt	ne
  40308e:	460b      	movne	r3, r1
  403090:	4602      	movne	r2, r0
  403092:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403096:	bf06      	itte	eq
  403098:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40309c:	ea91 0f03 	teqeq	r1, r3
  4030a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4030a4:	bd30      	pop	{r4, r5, pc}
  4030a6:	bf00      	nop

004030a8 <__aeabi_ui2d>:
  4030a8:	f090 0f00 	teq	r0, #0
  4030ac:	bf04      	itt	eq
  4030ae:	2100      	moveq	r1, #0
  4030b0:	4770      	bxeq	lr
  4030b2:	b530      	push	{r4, r5, lr}
  4030b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4030b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4030bc:	f04f 0500 	mov.w	r5, #0
  4030c0:	f04f 0100 	mov.w	r1, #0
  4030c4:	e750      	b.n	402f68 <__adddf3+0x138>
  4030c6:	bf00      	nop

004030c8 <__aeabi_i2d>:
  4030c8:	f090 0f00 	teq	r0, #0
  4030cc:	bf04      	itt	eq
  4030ce:	2100      	moveq	r1, #0
  4030d0:	4770      	bxeq	lr
  4030d2:	b530      	push	{r4, r5, lr}
  4030d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4030d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4030dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4030e0:	bf48      	it	mi
  4030e2:	4240      	negmi	r0, r0
  4030e4:	f04f 0100 	mov.w	r1, #0
  4030e8:	e73e      	b.n	402f68 <__adddf3+0x138>
  4030ea:	bf00      	nop

004030ec <__aeabi_f2d>:
  4030ec:	0042      	lsls	r2, r0, #1
  4030ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4030f2:	ea4f 0131 	mov.w	r1, r1, rrx
  4030f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4030fa:	bf1f      	itttt	ne
  4030fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403100:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403104:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403108:	4770      	bxne	lr
  40310a:	f092 0f00 	teq	r2, #0
  40310e:	bf14      	ite	ne
  403110:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403114:	4770      	bxeq	lr
  403116:	b530      	push	{r4, r5, lr}
  403118:	f44f 7460 	mov.w	r4, #896	; 0x380
  40311c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403120:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403124:	e720      	b.n	402f68 <__adddf3+0x138>
  403126:	bf00      	nop

00403128 <__aeabi_ul2d>:
  403128:	ea50 0201 	orrs.w	r2, r0, r1
  40312c:	bf08      	it	eq
  40312e:	4770      	bxeq	lr
  403130:	b530      	push	{r4, r5, lr}
  403132:	f04f 0500 	mov.w	r5, #0
  403136:	e00a      	b.n	40314e <__aeabi_l2d+0x16>

00403138 <__aeabi_l2d>:
  403138:	ea50 0201 	orrs.w	r2, r0, r1
  40313c:	bf08      	it	eq
  40313e:	4770      	bxeq	lr
  403140:	b530      	push	{r4, r5, lr}
  403142:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403146:	d502      	bpl.n	40314e <__aeabi_l2d+0x16>
  403148:	4240      	negs	r0, r0
  40314a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40314e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403152:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403156:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40315a:	f43f aedc 	beq.w	402f16 <__adddf3+0xe6>
  40315e:	f04f 0203 	mov.w	r2, #3
  403162:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403166:	bf18      	it	ne
  403168:	3203      	addne	r2, #3
  40316a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40316e:	bf18      	it	ne
  403170:	3203      	addne	r2, #3
  403172:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403176:	f1c2 0320 	rsb	r3, r2, #32
  40317a:	fa00 fc03 	lsl.w	ip, r0, r3
  40317e:	fa20 f002 	lsr.w	r0, r0, r2
  403182:	fa01 fe03 	lsl.w	lr, r1, r3
  403186:	ea40 000e 	orr.w	r0, r0, lr
  40318a:	fa21 f102 	lsr.w	r1, r1, r2
  40318e:	4414      	add	r4, r2
  403190:	e6c1      	b.n	402f16 <__adddf3+0xe6>
  403192:	bf00      	nop

00403194 <__libc_init_array>:
  403194:	b570      	push	{r4, r5, r6, lr}
  403196:	4e0f      	ldr	r6, [pc, #60]	; (4031d4 <__libc_init_array+0x40>)
  403198:	4d0f      	ldr	r5, [pc, #60]	; (4031d8 <__libc_init_array+0x44>)
  40319a:	1b76      	subs	r6, r6, r5
  40319c:	10b6      	asrs	r6, r6, #2
  40319e:	bf18      	it	ne
  4031a0:	2400      	movne	r4, #0
  4031a2:	d005      	beq.n	4031b0 <__libc_init_array+0x1c>
  4031a4:	3401      	adds	r4, #1
  4031a6:	f855 3b04 	ldr.w	r3, [r5], #4
  4031aa:	4798      	blx	r3
  4031ac:	42a6      	cmp	r6, r4
  4031ae:	d1f9      	bne.n	4031a4 <__libc_init_array+0x10>
  4031b0:	4e0a      	ldr	r6, [pc, #40]	; (4031dc <__libc_init_array+0x48>)
  4031b2:	4d0b      	ldr	r5, [pc, #44]	; (4031e0 <__libc_init_array+0x4c>)
  4031b4:	1b76      	subs	r6, r6, r5
  4031b6:	f005 fc17 	bl	4089e8 <_init>
  4031ba:	10b6      	asrs	r6, r6, #2
  4031bc:	bf18      	it	ne
  4031be:	2400      	movne	r4, #0
  4031c0:	d006      	beq.n	4031d0 <__libc_init_array+0x3c>
  4031c2:	3401      	adds	r4, #1
  4031c4:	f855 3b04 	ldr.w	r3, [r5], #4
  4031c8:	4798      	blx	r3
  4031ca:	42a6      	cmp	r6, r4
  4031cc:	d1f9      	bne.n	4031c2 <__libc_init_array+0x2e>
  4031ce:	bd70      	pop	{r4, r5, r6, pc}
  4031d0:	bd70      	pop	{r4, r5, r6, pc}
  4031d2:	bf00      	nop
  4031d4:	004089f4 	.word	0x004089f4
  4031d8:	004089f4 	.word	0x004089f4
  4031dc:	004089fc 	.word	0x004089fc
  4031e0:	004089f4 	.word	0x004089f4

004031e4 <malloc>:
  4031e4:	4b02      	ldr	r3, [pc, #8]	; (4031f0 <malloc+0xc>)
  4031e6:	4601      	mov	r1, r0
  4031e8:	6818      	ldr	r0, [r3, #0]
  4031ea:	f000 b80b 	b.w	403204 <_malloc_r>
  4031ee:	bf00      	nop
  4031f0:	2040000c 	.word	0x2040000c

004031f4 <free>:
  4031f4:	4b02      	ldr	r3, [pc, #8]	; (403200 <free+0xc>)
  4031f6:	4601      	mov	r1, r0
  4031f8:	6818      	ldr	r0, [r3, #0]
  4031fa:	f003 ba29 	b.w	406650 <_free_r>
  4031fe:	bf00      	nop
  403200:	2040000c 	.word	0x2040000c

00403204 <_malloc_r>:
  403204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403208:	f101 060b 	add.w	r6, r1, #11
  40320c:	2e16      	cmp	r6, #22
  40320e:	b083      	sub	sp, #12
  403210:	4605      	mov	r5, r0
  403212:	f240 809e 	bls.w	403352 <_malloc_r+0x14e>
  403216:	f036 0607 	bics.w	r6, r6, #7
  40321a:	f100 80bd 	bmi.w	403398 <_malloc_r+0x194>
  40321e:	42b1      	cmp	r1, r6
  403220:	f200 80ba 	bhi.w	403398 <_malloc_r+0x194>
  403224:	f000 fb86 	bl	403934 <__malloc_lock>
  403228:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40322c:	f0c0 8293 	bcc.w	403756 <_malloc_r+0x552>
  403230:	0a73      	lsrs	r3, r6, #9
  403232:	f000 80b8 	beq.w	4033a6 <_malloc_r+0x1a2>
  403236:	2b04      	cmp	r3, #4
  403238:	f200 8179 	bhi.w	40352e <_malloc_r+0x32a>
  40323c:	09b3      	lsrs	r3, r6, #6
  40323e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403242:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403246:	00c3      	lsls	r3, r0, #3
  403248:	4fbf      	ldr	r7, [pc, #764]	; (403548 <_malloc_r+0x344>)
  40324a:	443b      	add	r3, r7
  40324c:	f1a3 0108 	sub.w	r1, r3, #8
  403250:	685c      	ldr	r4, [r3, #4]
  403252:	42a1      	cmp	r1, r4
  403254:	d106      	bne.n	403264 <_malloc_r+0x60>
  403256:	e00c      	b.n	403272 <_malloc_r+0x6e>
  403258:	2a00      	cmp	r2, #0
  40325a:	f280 80aa 	bge.w	4033b2 <_malloc_r+0x1ae>
  40325e:	68e4      	ldr	r4, [r4, #12]
  403260:	42a1      	cmp	r1, r4
  403262:	d006      	beq.n	403272 <_malloc_r+0x6e>
  403264:	6863      	ldr	r3, [r4, #4]
  403266:	f023 0303 	bic.w	r3, r3, #3
  40326a:	1b9a      	subs	r2, r3, r6
  40326c:	2a0f      	cmp	r2, #15
  40326e:	ddf3      	ble.n	403258 <_malloc_r+0x54>
  403270:	4670      	mov	r0, lr
  403272:	693c      	ldr	r4, [r7, #16]
  403274:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40355c <_malloc_r+0x358>
  403278:	4574      	cmp	r4, lr
  40327a:	f000 81ab 	beq.w	4035d4 <_malloc_r+0x3d0>
  40327e:	6863      	ldr	r3, [r4, #4]
  403280:	f023 0303 	bic.w	r3, r3, #3
  403284:	1b9a      	subs	r2, r3, r6
  403286:	2a0f      	cmp	r2, #15
  403288:	f300 8190 	bgt.w	4035ac <_malloc_r+0x3a8>
  40328c:	2a00      	cmp	r2, #0
  40328e:	f8c7 e014 	str.w	lr, [r7, #20]
  403292:	f8c7 e010 	str.w	lr, [r7, #16]
  403296:	f280 809d 	bge.w	4033d4 <_malloc_r+0x1d0>
  40329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40329e:	f080 8161 	bcs.w	403564 <_malloc_r+0x360>
  4032a2:	08db      	lsrs	r3, r3, #3
  4032a4:	f103 0c01 	add.w	ip, r3, #1
  4032a8:	1099      	asrs	r1, r3, #2
  4032aa:	687a      	ldr	r2, [r7, #4]
  4032ac:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4032b0:	f8c4 8008 	str.w	r8, [r4, #8]
  4032b4:	2301      	movs	r3, #1
  4032b6:	408b      	lsls	r3, r1
  4032b8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4032bc:	4313      	orrs	r3, r2
  4032be:	3908      	subs	r1, #8
  4032c0:	60e1      	str	r1, [r4, #12]
  4032c2:	607b      	str	r3, [r7, #4]
  4032c4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4032c8:	f8c8 400c 	str.w	r4, [r8, #12]
  4032cc:	1082      	asrs	r2, r0, #2
  4032ce:	2401      	movs	r4, #1
  4032d0:	4094      	lsls	r4, r2
  4032d2:	429c      	cmp	r4, r3
  4032d4:	f200 808b 	bhi.w	4033ee <_malloc_r+0x1ea>
  4032d8:	421c      	tst	r4, r3
  4032da:	d106      	bne.n	4032ea <_malloc_r+0xe6>
  4032dc:	f020 0003 	bic.w	r0, r0, #3
  4032e0:	0064      	lsls	r4, r4, #1
  4032e2:	421c      	tst	r4, r3
  4032e4:	f100 0004 	add.w	r0, r0, #4
  4032e8:	d0fa      	beq.n	4032e0 <_malloc_r+0xdc>
  4032ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4032ee:	46cc      	mov	ip, r9
  4032f0:	4680      	mov	r8, r0
  4032f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4032f6:	459c      	cmp	ip, r3
  4032f8:	d107      	bne.n	40330a <_malloc_r+0x106>
  4032fa:	e16d      	b.n	4035d8 <_malloc_r+0x3d4>
  4032fc:	2a00      	cmp	r2, #0
  4032fe:	f280 817b 	bge.w	4035f8 <_malloc_r+0x3f4>
  403302:	68db      	ldr	r3, [r3, #12]
  403304:	459c      	cmp	ip, r3
  403306:	f000 8167 	beq.w	4035d8 <_malloc_r+0x3d4>
  40330a:	6859      	ldr	r1, [r3, #4]
  40330c:	f021 0103 	bic.w	r1, r1, #3
  403310:	1b8a      	subs	r2, r1, r6
  403312:	2a0f      	cmp	r2, #15
  403314:	ddf2      	ble.n	4032fc <_malloc_r+0xf8>
  403316:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40331a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40331e:	9300      	str	r3, [sp, #0]
  403320:	199c      	adds	r4, r3, r6
  403322:	4628      	mov	r0, r5
  403324:	f046 0601 	orr.w	r6, r6, #1
  403328:	f042 0501 	orr.w	r5, r2, #1
  40332c:	605e      	str	r6, [r3, #4]
  40332e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403332:	f8cc 8008 	str.w	r8, [ip, #8]
  403336:	617c      	str	r4, [r7, #20]
  403338:	613c      	str	r4, [r7, #16]
  40333a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40333e:	f8c4 e008 	str.w	lr, [r4, #8]
  403342:	6065      	str	r5, [r4, #4]
  403344:	505a      	str	r2, [r3, r1]
  403346:	f000 fafb 	bl	403940 <__malloc_unlock>
  40334a:	9b00      	ldr	r3, [sp, #0]
  40334c:	f103 0408 	add.w	r4, r3, #8
  403350:	e01e      	b.n	403390 <_malloc_r+0x18c>
  403352:	2910      	cmp	r1, #16
  403354:	d820      	bhi.n	403398 <_malloc_r+0x194>
  403356:	f000 faed 	bl	403934 <__malloc_lock>
  40335a:	2610      	movs	r6, #16
  40335c:	2318      	movs	r3, #24
  40335e:	2002      	movs	r0, #2
  403360:	4f79      	ldr	r7, [pc, #484]	; (403548 <_malloc_r+0x344>)
  403362:	443b      	add	r3, r7
  403364:	f1a3 0208 	sub.w	r2, r3, #8
  403368:	685c      	ldr	r4, [r3, #4]
  40336a:	4294      	cmp	r4, r2
  40336c:	f000 813d 	beq.w	4035ea <_malloc_r+0x3e6>
  403370:	6863      	ldr	r3, [r4, #4]
  403372:	68e1      	ldr	r1, [r4, #12]
  403374:	68a6      	ldr	r6, [r4, #8]
  403376:	f023 0303 	bic.w	r3, r3, #3
  40337a:	4423      	add	r3, r4
  40337c:	4628      	mov	r0, r5
  40337e:	685a      	ldr	r2, [r3, #4]
  403380:	60f1      	str	r1, [r6, #12]
  403382:	f042 0201 	orr.w	r2, r2, #1
  403386:	608e      	str	r6, [r1, #8]
  403388:	605a      	str	r2, [r3, #4]
  40338a:	f000 fad9 	bl	403940 <__malloc_unlock>
  40338e:	3408      	adds	r4, #8
  403390:	4620      	mov	r0, r4
  403392:	b003      	add	sp, #12
  403394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403398:	2400      	movs	r4, #0
  40339a:	230c      	movs	r3, #12
  40339c:	4620      	mov	r0, r4
  40339e:	602b      	str	r3, [r5, #0]
  4033a0:	b003      	add	sp, #12
  4033a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033a6:	2040      	movs	r0, #64	; 0x40
  4033a8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4033ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4033b0:	e74a      	b.n	403248 <_malloc_r+0x44>
  4033b2:	4423      	add	r3, r4
  4033b4:	68e1      	ldr	r1, [r4, #12]
  4033b6:	685a      	ldr	r2, [r3, #4]
  4033b8:	68a6      	ldr	r6, [r4, #8]
  4033ba:	f042 0201 	orr.w	r2, r2, #1
  4033be:	60f1      	str	r1, [r6, #12]
  4033c0:	4628      	mov	r0, r5
  4033c2:	608e      	str	r6, [r1, #8]
  4033c4:	605a      	str	r2, [r3, #4]
  4033c6:	f000 fabb 	bl	403940 <__malloc_unlock>
  4033ca:	3408      	adds	r4, #8
  4033cc:	4620      	mov	r0, r4
  4033ce:	b003      	add	sp, #12
  4033d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d4:	4423      	add	r3, r4
  4033d6:	4628      	mov	r0, r5
  4033d8:	685a      	ldr	r2, [r3, #4]
  4033da:	f042 0201 	orr.w	r2, r2, #1
  4033de:	605a      	str	r2, [r3, #4]
  4033e0:	f000 faae 	bl	403940 <__malloc_unlock>
  4033e4:	3408      	adds	r4, #8
  4033e6:	4620      	mov	r0, r4
  4033e8:	b003      	add	sp, #12
  4033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033ee:	68bc      	ldr	r4, [r7, #8]
  4033f0:	6863      	ldr	r3, [r4, #4]
  4033f2:	f023 0803 	bic.w	r8, r3, #3
  4033f6:	45b0      	cmp	r8, r6
  4033f8:	d304      	bcc.n	403404 <_malloc_r+0x200>
  4033fa:	eba8 0306 	sub.w	r3, r8, r6
  4033fe:	2b0f      	cmp	r3, #15
  403400:	f300 8085 	bgt.w	40350e <_malloc_r+0x30a>
  403404:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403560 <_malloc_r+0x35c>
  403408:	4b50      	ldr	r3, [pc, #320]	; (40354c <_malloc_r+0x348>)
  40340a:	f8d9 2000 	ldr.w	r2, [r9]
  40340e:	681b      	ldr	r3, [r3, #0]
  403410:	3201      	adds	r2, #1
  403412:	4433      	add	r3, r6
  403414:	eb04 0a08 	add.w	sl, r4, r8
  403418:	f000 8155 	beq.w	4036c6 <_malloc_r+0x4c2>
  40341c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403420:	330f      	adds	r3, #15
  403422:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403426:	f02b 0b0f 	bic.w	fp, fp, #15
  40342a:	4659      	mov	r1, fp
  40342c:	4628      	mov	r0, r5
  40342e:	f000 faf7 	bl	403a20 <_sbrk_r>
  403432:	1c41      	adds	r1, r0, #1
  403434:	4602      	mov	r2, r0
  403436:	f000 80fc 	beq.w	403632 <_malloc_r+0x42e>
  40343a:	4582      	cmp	sl, r0
  40343c:	f200 80f7 	bhi.w	40362e <_malloc_r+0x42a>
  403440:	4b43      	ldr	r3, [pc, #268]	; (403550 <_malloc_r+0x34c>)
  403442:	6819      	ldr	r1, [r3, #0]
  403444:	4459      	add	r1, fp
  403446:	6019      	str	r1, [r3, #0]
  403448:	f000 814d 	beq.w	4036e6 <_malloc_r+0x4e2>
  40344c:	f8d9 0000 	ldr.w	r0, [r9]
  403450:	3001      	adds	r0, #1
  403452:	bf1b      	ittet	ne
  403454:	eba2 0a0a 	subne.w	sl, r2, sl
  403458:	4451      	addne	r1, sl
  40345a:	f8c9 2000 	streq.w	r2, [r9]
  40345e:	6019      	strne	r1, [r3, #0]
  403460:	f012 0107 	ands.w	r1, r2, #7
  403464:	f000 8115 	beq.w	403692 <_malloc_r+0x48e>
  403468:	f1c1 0008 	rsb	r0, r1, #8
  40346c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403470:	4402      	add	r2, r0
  403472:	3108      	adds	r1, #8
  403474:	eb02 090b 	add.w	r9, r2, fp
  403478:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40347c:	eba1 0909 	sub.w	r9, r1, r9
  403480:	4649      	mov	r1, r9
  403482:	4628      	mov	r0, r5
  403484:	9301      	str	r3, [sp, #4]
  403486:	9200      	str	r2, [sp, #0]
  403488:	f000 faca 	bl	403a20 <_sbrk_r>
  40348c:	1c43      	adds	r3, r0, #1
  40348e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403492:	f000 8143 	beq.w	40371c <_malloc_r+0x518>
  403496:	1a80      	subs	r0, r0, r2
  403498:	4448      	add	r0, r9
  40349a:	f040 0001 	orr.w	r0, r0, #1
  40349e:	6819      	ldr	r1, [r3, #0]
  4034a0:	60ba      	str	r2, [r7, #8]
  4034a2:	4449      	add	r1, r9
  4034a4:	42bc      	cmp	r4, r7
  4034a6:	6050      	str	r0, [r2, #4]
  4034a8:	6019      	str	r1, [r3, #0]
  4034aa:	d017      	beq.n	4034dc <_malloc_r+0x2d8>
  4034ac:	f1b8 0f0f 	cmp.w	r8, #15
  4034b0:	f240 80fb 	bls.w	4036aa <_malloc_r+0x4a6>
  4034b4:	6860      	ldr	r0, [r4, #4]
  4034b6:	f1a8 020c 	sub.w	r2, r8, #12
  4034ba:	f022 0207 	bic.w	r2, r2, #7
  4034be:	eb04 0e02 	add.w	lr, r4, r2
  4034c2:	f000 0001 	and.w	r0, r0, #1
  4034c6:	f04f 0c05 	mov.w	ip, #5
  4034ca:	4310      	orrs	r0, r2
  4034cc:	2a0f      	cmp	r2, #15
  4034ce:	6060      	str	r0, [r4, #4]
  4034d0:	f8ce c004 	str.w	ip, [lr, #4]
  4034d4:	f8ce c008 	str.w	ip, [lr, #8]
  4034d8:	f200 8117 	bhi.w	40370a <_malloc_r+0x506>
  4034dc:	4b1d      	ldr	r3, [pc, #116]	; (403554 <_malloc_r+0x350>)
  4034de:	68bc      	ldr	r4, [r7, #8]
  4034e0:	681a      	ldr	r2, [r3, #0]
  4034e2:	4291      	cmp	r1, r2
  4034e4:	bf88      	it	hi
  4034e6:	6019      	strhi	r1, [r3, #0]
  4034e8:	4b1b      	ldr	r3, [pc, #108]	; (403558 <_malloc_r+0x354>)
  4034ea:	681a      	ldr	r2, [r3, #0]
  4034ec:	4291      	cmp	r1, r2
  4034ee:	6862      	ldr	r2, [r4, #4]
  4034f0:	bf88      	it	hi
  4034f2:	6019      	strhi	r1, [r3, #0]
  4034f4:	f022 0203 	bic.w	r2, r2, #3
  4034f8:	4296      	cmp	r6, r2
  4034fa:	eba2 0306 	sub.w	r3, r2, r6
  4034fe:	d801      	bhi.n	403504 <_malloc_r+0x300>
  403500:	2b0f      	cmp	r3, #15
  403502:	dc04      	bgt.n	40350e <_malloc_r+0x30a>
  403504:	4628      	mov	r0, r5
  403506:	f000 fa1b 	bl	403940 <__malloc_unlock>
  40350a:	2400      	movs	r4, #0
  40350c:	e740      	b.n	403390 <_malloc_r+0x18c>
  40350e:	19a2      	adds	r2, r4, r6
  403510:	f043 0301 	orr.w	r3, r3, #1
  403514:	f046 0601 	orr.w	r6, r6, #1
  403518:	6066      	str	r6, [r4, #4]
  40351a:	4628      	mov	r0, r5
  40351c:	60ba      	str	r2, [r7, #8]
  40351e:	6053      	str	r3, [r2, #4]
  403520:	f000 fa0e 	bl	403940 <__malloc_unlock>
  403524:	3408      	adds	r4, #8
  403526:	4620      	mov	r0, r4
  403528:	b003      	add	sp, #12
  40352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40352e:	2b14      	cmp	r3, #20
  403530:	d971      	bls.n	403616 <_malloc_r+0x412>
  403532:	2b54      	cmp	r3, #84	; 0x54
  403534:	f200 80a3 	bhi.w	40367e <_malloc_r+0x47a>
  403538:	0b33      	lsrs	r3, r6, #12
  40353a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40353e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403542:	00c3      	lsls	r3, r0, #3
  403544:	e680      	b.n	403248 <_malloc_r+0x44>
  403546:	bf00      	nop
  403548:	20400438 	.word	0x20400438
  40354c:	20400bbc 	.word	0x20400bbc
  403550:	20400b8c 	.word	0x20400b8c
  403554:	20400bb4 	.word	0x20400bb4
  403558:	20400bb8 	.word	0x20400bb8
  40355c:	20400440 	.word	0x20400440
  403560:	20400840 	.word	0x20400840
  403564:	0a5a      	lsrs	r2, r3, #9
  403566:	2a04      	cmp	r2, #4
  403568:	d95b      	bls.n	403622 <_malloc_r+0x41e>
  40356a:	2a14      	cmp	r2, #20
  40356c:	f200 80ae 	bhi.w	4036cc <_malloc_r+0x4c8>
  403570:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403574:	00c9      	lsls	r1, r1, #3
  403576:	325b      	adds	r2, #91	; 0x5b
  403578:	eb07 0c01 	add.w	ip, r7, r1
  40357c:	5879      	ldr	r1, [r7, r1]
  40357e:	f1ac 0c08 	sub.w	ip, ip, #8
  403582:	458c      	cmp	ip, r1
  403584:	f000 8088 	beq.w	403698 <_malloc_r+0x494>
  403588:	684a      	ldr	r2, [r1, #4]
  40358a:	f022 0203 	bic.w	r2, r2, #3
  40358e:	4293      	cmp	r3, r2
  403590:	d273      	bcs.n	40367a <_malloc_r+0x476>
  403592:	6889      	ldr	r1, [r1, #8]
  403594:	458c      	cmp	ip, r1
  403596:	d1f7      	bne.n	403588 <_malloc_r+0x384>
  403598:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40359c:	687b      	ldr	r3, [r7, #4]
  40359e:	60e2      	str	r2, [r4, #12]
  4035a0:	f8c4 c008 	str.w	ip, [r4, #8]
  4035a4:	6094      	str	r4, [r2, #8]
  4035a6:	f8cc 400c 	str.w	r4, [ip, #12]
  4035aa:	e68f      	b.n	4032cc <_malloc_r+0xc8>
  4035ac:	19a1      	adds	r1, r4, r6
  4035ae:	f046 0c01 	orr.w	ip, r6, #1
  4035b2:	f042 0601 	orr.w	r6, r2, #1
  4035b6:	f8c4 c004 	str.w	ip, [r4, #4]
  4035ba:	4628      	mov	r0, r5
  4035bc:	6179      	str	r1, [r7, #20]
  4035be:	6139      	str	r1, [r7, #16]
  4035c0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4035c4:	f8c1 e008 	str.w	lr, [r1, #8]
  4035c8:	604e      	str	r6, [r1, #4]
  4035ca:	50e2      	str	r2, [r4, r3]
  4035cc:	f000 f9b8 	bl	403940 <__malloc_unlock>
  4035d0:	3408      	adds	r4, #8
  4035d2:	e6dd      	b.n	403390 <_malloc_r+0x18c>
  4035d4:	687b      	ldr	r3, [r7, #4]
  4035d6:	e679      	b.n	4032cc <_malloc_r+0xc8>
  4035d8:	f108 0801 	add.w	r8, r8, #1
  4035dc:	f018 0f03 	tst.w	r8, #3
  4035e0:	f10c 0c08 	add.w	ip, ip, #8
  4035e4:	f47f ae85 	bne.w	4032f2 <_malloc_r+0xee>
  4035e8:	e02d      	b.n	403646 <_malloc_r+0x442>
  4035ea:	68dc      	ldr	r4, [r3, #12]
  4035ec:	42a3      	cmp	r3, r4
  4035ee:	bf08      	it	eq
  4035f0:	3002      	addeq	r0, #2
  4035f2:	f43f ae3e 	beq.w	403272 <_malloc_r+0x6e>
  4035f6:	e6bb      	b.n	403370 <_malloc_r+0x16c>
  4035f8:	4419      	add	r1, r3
  4035fa:	461c      	mov	r4, r3
  4035fc:	684a      	ldr	r2, [r1, #4]
  4035fe:	68db      	ldr	r3, [r3, #12]
  403600:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403604:	f042 0201 	orr.w	r2, r2, #1
  403608:	604a      	str	r2, [r1, #4]
  40360a:	4628      	mov	r0, r5
  40360c:	60f3      	str	r3, [r6, #12]
  40360e:	609e      	str	r6, [r3, #8]
  403610:	f000 f996 	bl	403940 <__malloc_unlock>
  403614:	e6bc      	b.n	403390 <_malloc_r+0x18c>
  403616:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40361a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40361e:	00c3      	lsls	r3, r0, #3
  403620:	e612      	b.n	403248 <_malloc_r+0x44>
  403622:	099a      	lsrs	r2, r3, #6
  403624:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403628:	00c9      	lsls	r1, r1, #3
  40362a:	3238      	adds	r2, #56	; 0x38
  40362c:	e7a4      	b.n	403578 <_malloc_r+0x374>
  40362e:	42bc      	cmp	r4, r7
  403630:	d054      	beq.n	4036dc <_malloc_r+0x4d8>
  403632:	68bc      	ldr	r4, [r7, #8]
  403634:	6862      	ldr	r2, [r4, #4]
  403636:	f022 0203 	bic.w	r2, r2, #3
  40363a:	e75d      	b.n	4034f8 <_malloc_r+0x2f4>
  40363c:	f859 3908 	ldr.w	r3, [r9], #-8
  403640:	4599      	cmp	r9, r3
  403642:	f040 8086 	bne.w	403752 <_malloc_r+0x54e>
  403646:	f010 0f03 	tst.w	r0, #3
  40364a:	f100 30ff 	add.w	r0, r0, #4294967295
  40364e:	d1f5      	bne.n	40363c <_malloc_r+0x438>
  403650:	687b      	ldr	r3, [r7, #4]
  403652:	ea23 0304 	bic.w	r3, r3, r4
  403656:	607b      	str	r3, [r7, #4]
  403658:	0064      	lsls	r4, r4, #1
  40365a:	429c      	cmp	r4, r3
  40365c:	f63f aec7 	bhi.w	4033ee <_malloc_r+0x1ea>
  403660:	2c00      	cmp	r4, #0
  403662:	f43f aec4 	beq.w	4033ee <_malloc_r+0x1ea>
  403666:	421c      	tst	r4, r3
  403668:	4640      	mov	r0, r8
  40366a:	f47f ae3e 	bne.w	4032ea <_malloc_r+0xe6>
  40366e:	0064      	lsls	r4, r4, #1
  403670:	421c      	tst	r4, r3
  403672:	f100 0004 	add.w	r0, r0, #4
  403676:	d0fa      	beq.n	40366e <_malloc_r+0x46a>
  403678:	e637      	b.n	4032ea <_malloc_r+0xe6>
  40367a:	468c      	mov	ip, r1
  40367c:	e78c      	b.n	403598 <_malloc_r+0x394>
  40367e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403682:	d815      	bhi.n	4036b0 <_malloc_r+0x4ac>
  403684:	0bf3      	lsrs	r3, r6, #15
  403686:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40368a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40368e:	00c3      	lsls	r3, r0, #3
  403690:	e5da      	b.n	403248 <_malloc_r+0x44>
  403692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403696:	e6ed      	b.n	403474 <_malloc_r+0x270>
  403698:	687b      	ldr	r3, [r7, #4]
  40369a:	1092      	asrs	r2, r2, #2
  40369c:	2101      	movs	r1, #1
  40369e:	fa01 f202 	lsl.w	r2, r1, r2
  4036a2:	4313      	orrs	r3, r2
  4036a4:	607b      	str	r3, [r7, #4]
  4036a6:	4662      	mov	r2, ip
  4036a8:	e779      	b.n	40359e <_malloc_r+0x39a>
  4036aa:	2301      	movs	r3, #1
  4036ac:	6053      	str	r3, [r2, #4]
  4036ae:	e729      	b.n	403504 <_malloc_r+0x300>
  4036b0:	f240 5254 	movw	r2, #1364	; 0x554
  4036b4:	4293      	cmp	r3, r2
  4036b6:	d822      	bhi.n	4036fe <_malloc_r+0x4fa>
  4036b8:	0cb3      	lsrs	r3, r6, #18
  4036ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4036be:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4036c2:	00c3      	lsls	r3, r0, #3
  4036c4:	e5c0      	b.n	403248 <_malloc_r+0x44>
  4036c6:	f103 0b10 	add.w	fp, r3, #16
  4036ca:	e6ae      	b.n	40342a <_malloc_r+0x226>
  4036cc:	2a54      	cmp	r2, #84	; 0x54
  4036ce:	d829      	bhi.n	403724 <_malloc_r+0x520>
  4036d0:	0b1a      	lsrs	r2, r3, #12
  4036d2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4036d6:	00c9      	lsls	r1, r1, #3
  4036d8:	326e      	adds	r2, #110	; 0x6e
  4036da:	e74d      	b.n	403578 <_malloc_r+0x374>
  4036dc:	4b20      	ldr	r3, [pc, #128]	; (403760 <_malloc_r+0x55c>)
  4036de:	6819      	ldr	r1, [r3, #0]
  4036e0:	4459      	add	r1, fp
  4036e2:	6019      	str	r1, [r3, #0]
  4036e4:	e6b2      	b.n	40344c <_malloc_r+0x248>
  4036e6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4036ea:	2800      	cmp	r0, #0
  4036ec:	f47f aeae 	bne.w	40344c <_malloc_r+0x248>
  4036f0:	eb08 030b 	add.w	r3, r8, fp
  4036f4:	68ba      	ldr	r2, [r7, #8]
  4036f6:	f043 0301 	orr.w	r3, r3, #1
  4036fa:	6053      	str	r3, [r2, #4]
  4036fc:	e6ee      	b.n	4034dc <_malloc_r+0x2d8>
  4036fe:	207f      	movs	r0, #127	; 0x7f
  403700:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403704:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403708:	e59e      	b.n	403248 <_malloc_r+0x44>
  40370a:	f104 0108 	add.w	r1, r4, #8
  40370e:	4628      	mov	r0, r5
  403710:	9300      	str	r3, [sp, #0]
  403712:	f002 ff9d 	bl	406650 <_free_r>
  403716:	9b00      	ldr	r3, [sp, #0]
  403718:	6819      	ldr	r1, [r3, #0]
  40371a:	e6df      	b.n	4034dc <_malloc_r+0x2d8>
  40371c:	2001      	movs	r0, #1
  40371e:	f04f 0900 	mov.w	r9, #0
  403722:	e6bc      	b.n	40349e <_malloc_r+0x29a>
  403724:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403728:	d805      	bhi.n	403736 <_malloc_r+0x532>
  40372a:	0bda      	lsrs	r2, r3, #15
  40372c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403730:	00c9      	lsls	r1, r1, #3
  403732:	3277      	adds	r2, #119	; 0x77
  403734:	e720      	b.n	403578 <_malloc_r+0x374>
  403736:	f240 5154 	movw	r1, #1364	; 0x554
  40373a:	428a      	cmp	r2, r1
  40373c:	d805      	bhi.n	40374a <_malloc_r+0x546>
  40373e:	0c9a      	lsrs	r2, r3, #18
  403740:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403744:	00c9      	lsls	r1, r1, #3
  403746:	327c      	adds	r2, #124	; 0x7c
  403748:	e716      	b.n	403578 <_malloc_r+0x374>
  40374a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40374e:	227e      	movs	r2, #126	; 0x7e
  403750:	e712      	b.n	403578 <_malloc_r+0x374>
  403752:	687b      	ldr	r3, [r7, #4]
  403754:	e780      	b.n	403658 <_malloc_r+0x454>
  403756:	08f0      	lsrs	r0, r6, #3
  403758:	f106 0308 	add.w	r3, r6, #8
  40375c:	e600      	b.n	403360 <_malloc_r+0x15c>
  40375e:	bf00      	nop
  403760:	20400b8c 	.word	0x20400b8c

00403764 <memcpy>:
  403764:	4684      	mov	ip, r0
  403766:	ea41 0300 	orr.w	r3, r1, r0
  40376a:	f013 0303 	ands.w	r3, r3, #3
  40376e:	d16d      	bne.n	40384c <memcpy+0xe8>
  403770:	3a40      	subs	r2, #64	; 0x40
  403772:	d341      	bcc.n	4037f8 <memcpy+0x94>
  403774:	f851 3b04 	ldr.w	r3, [r1], #4
  403778:	f840 3b04 	str.w	r3, [r0], #4
  40377c:	f851 3b04 	ldr.w	r3, [r1], #4
  403780:	f840 3b04 	str.w	r3, [r0], #4
  403784:	f851 3b04 	ldr.w	r3, [r1], #4
  403788:	f840 3b04 	str.w	r3, [r0], #4
  40378c:	f851 3b04 	ldr.w	r3, [r1], #4
  403790:	f840 3b04 	str.w	r3, [r0], #4
  403794:	f851 3b04 	ldr.w	r3, [r1], #4
  403798:	f840 3b04 	str.w	r3, [r0], #4
  40379c:	f851 3b04 	ldr.w	r3, [r1], #4
  4037a0:	f840 3b04 	str.w	r3, [r0], #4
  4037a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4037a8:	f840 3b04 	str.w	r3, [r0], #4
  4037ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4037b0:	f840 3b04 	str.w	r3, [r0], #4
  4037b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4037b8:	f840 3b04 	str.w	r3, [r0], #4
  4037bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4037c0:	f840 3b04 	str.w	r3, [r0], #4
  4037c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4037c8:	f840 3b04 	str.w	r3, [r0], #4
  4037cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4037d0:	f840 3b04 	str.w	r3, [r0], #4
  4037d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4037d8:	f840 3b04 	str.w	r3, [r0], #4
  4037dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4037e0:	f840 3b04 	str.w	r3, [r0], #4
  4037e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4037e8:	f840 3b04 	str.w	r3, [r0], #4
  4037ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4037f0:	f840 3b04 	str.w	r3, [r0], #4
  4037f4:	3a40      	subs	r2, #64	; 0x40
  4037f6:	d2bd      	bcs.n	403774 <memcpy+0x10>
  4037f8:	3230      	adds	r2, #48	; 0x30
  4037fa:	d311      	bcc.n	403820 <memcpy+0xbc>
  4037fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403800:	f840 3b04 	str.w	r3, [r0], #4
  403804:	f851 3b04 	ldr.w	r3, [r1], #4
  403808:	f840 3b04 	str.w	r3, [r0], #4
  40380c:	f851 3b04 	ldr.w	r3, [r1], #4
  403810:	f840 3b04 	str.w	r3, [r0], #4
  403814:	f851 3b04 	ldr.w	r3, [r1], #4
  403818:	f840 3b04 	str.w	r3, [r0], #4
  40381c:	3a10      	subs	r2, #16
  40381e:	d2ed      	bcs.n	4037fc <memcpy+0x98>
  403820:	320c      	adds	r2, #12
  403822:	d305      	bcc.n	403830 <memcpy+0xcc>
  403824:	f851 3b04 	ldr.w	r3, [r1], #4
  403828:	f840 3b04 	str.w	r3, [r0], #4
  40382c:	3a04      	subs	r2, #4
  40382e:	d2f9      	bcs.n	403824 <memcpy+0xc0>
  403830:	3204      	adds	r2, #4
  403832:	d008      	beq.n	403846 <memcpy+0xe2>
  403834:	07d2      	lsls	r2, r2, #31
  403836:	bf1c      	itt	ne
  403838:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40383c:	f800 3b01 	strbne.w	r3, [r0], #1
  403840:	d301      	bcc.n	403846 <memcpy+0xe2>
  403842:	880b      	ldrh	r3, [r1, #0]
  403844:	8003      	strh	r3, [r0, #0]
  403846:	4660      	mov	r0, ip
  403848:	4770      	bx	lr
  40384a:	bf00      	nop
  40384c:	2a08      	cmp	r2, #8
  40384e:	d313      	bcc.n	403878 <memcpy+0x114>
  403850:	078b      	lsls	r3, r1, #30
  403852:	d08d      	beq.n	403770 <memcpy+0xc>
  403854:	f010 0303 	ands.w	r3, r0, #3
  403858:	d08a      	beq.n	403770 <memcpy+0xc>
  40385a:	f1c3 0304 	rsb	r3, r3, #4
  40385e:	1ad2      	subs	r2, r2, r3
  403860:	07db      	lsls	r3, r3, #31
  403862:	bf1c      	itt	ne
  403864:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403868:	f800 3b01 	strbne.w	r3, [r0], #1
  40386c:	d380      	bcc.n	403770 <memcpy+0xc>
  40386e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403872:	f820 3b02 	strh.w	r3, [r0], #2
  403876:	e77b      	b.n	403770 <memcpy+0xc>
  403878:	3a04      	subs	r2, #4
  40387a:	d3d9      	bcc.n	403830 <memcpy+0xcc>
  40387c:	3a01      	subs	r2, #1
  40387e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403882:	f800 3b01 	strb.w	r3, [r0], #1
  403886:	d2f9      	bcs.n	40387c <memcpy+0x118>
  403888:	780b      	ldrb	r3, [r1, #0]
  40388a:	7003      	strb	r3, [r0, #0]
  40388c:	784b      	ldrb	r3, [r1, #1]
  40388e:	7043      	strb	r3, [r0, #1]
  403890:	788b      	ldrb	r3, [r1, #2]
  403892:	7083      	strb	r3, [r0, #2]
  403894:	4660      	mov	r0, ip
  403896:	4770      	bx	lr

00403898 <memset>:
  403898:	b470      	push	{r4, r5, r6}
  40389a:	0786      	lsls	r6, r0, #30
  40389c:	d046      	beq.n	40392c <memset+0x94>
  40389e:	1e54      	subs	r4, r2, #1
  4038a0:	2a00      	cmp	r2, #0
  4038a2:	d041      	beq.n	403928 <memset+0x90>
  4038a4:	b2ca      	uxtb	r2, r1
  4038a6:	4603      	mov	r3, r0
  4038a8:	e002      	b.n	4038b0 <memset+0x18>
  4038aa:	f114 34ff 	adds.w	r4, r4, #4294967295
  4038ae:	d33b      	bcc.n	403928 <memset+0x90>
  4038b0:	f803 2b01 	strb.w	r2, [r3], #1
  4038b4:	079d      	lsls	r5, r3, #30
  4038b6:	d1f8      	bne.n	4038aa <memset+0x12>
  4038b8:	2c03      	cmp	r4, #3
  4038ba:	d92e      	bls.n	40391a <memset+0x82>
  4038bc:	b2cd      	uxtb	r5, r1
  4038be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4038c2:	2c0f      	cmp	r4, #15
  4038c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4038c8:	d919      	bls.n	4038fe <memset+0x66>
  4038ca:	f103 0210 	add.w	r2, r3, #16
  4038ce:	4626      	mov	r6, r4
  4038d0:	3e10      	subs	r6, #16
  4038d2:	2e0f      	cmp	r6, #15
  4038d4:	f842 5c10 	str.w	r5, [r2, #-16]
  4038d8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4038dc:	f842 5c08 	str.w	r5, [r2, #-8]
  4038e0:	f842 5c04 	str.w	r5, [r2, #-4]
  4038e4:	f102 0210 	add.w	r2, r2, #16
  4038e8:	d8f2      	bhi.n	4038d0 <memset+0x38>
  4038ea:	f1a4 0210 	sub.w	r2, r4, #16
  4038ee:	f022 020f 	bic.w	r2, r2, #15
  4038f2:	f004 040f 	and.w	r4, r4, #15
  4038f6:	3210      	adds	r2, #16
  4038f8:	2c03      	cmp	r4, #3
  4038fa:	4413      	add	r3, r2
  4038fc:	d90d      	bls.n	40391a <memset+0x82>
  4038fe:	461e      	mov	r6, r3
  403900:	4622      	mov	r2, r4
  403902:	3a04      	subs	r2, #4
  403904:	2a03      	cmp	r2, #3
  403906:	f846 5b04 	str.w	r5, [r6], #4
  40390a:	d8fa      	bhi.n	403902 <memset+0x6a>
  40390c:	1f22      	subs	r2, r4, #4
  40390e:	f022 0203 	bic.w	r2, r2, #3
  403912:	3204      	adds	r2, #4
  403914:	4413      	add	r3, r2
  403916:	f004 0403 	and.w	r4, r4, #3
  40391a:	b12c      	cbz	r4, 403928 <memset+0x90>
  40391c:	b2c9      	uxtb	r1, r1
  40391e:	441c      	add	r4, r3
  403920:	f803 1b01 	strb.w	r1, [r3], #1
  403924:	429c      	cmp	r4, r3
  403926:	d1fb      	bne.n	403920 <memset+0x88>
  403928:	bc70      	pop	{r4, r5, r6}
  40392a:	4770      	bx	lr
  40392c:	4614      	mov	r4, r2
  40392e:	4603      	mov	r3, r0
  403930:	e7c2      	b.n	4038b8 <memset+0x20>
  403932:	bf00      	nop

00403934 <__malloc_lock>:
  403934:	4801      	ldr	r0, [pc, #4]	; (40393c <__malloc_lock+0x8>)
  403936:	f003 b925 	b.w	406b84 <__retarget_lock_acquire_recursive>
  40393a:	bf00      	nop
  40393c:	20400cb0 	.word	0x20400cb0

00403940 <__malloc_unlock>:
  403940:	4801      	ldr	r0, [pc, #4]	; (403948 <__malloc_unlock+0x8>)
  403942:	f003 b921 	b.w	406b88 <__retarget_lock_release_recursive>
  403946:	bf00      	nop
  403948:	20400cb0 	.word	0x20400cb0

0040394c <printf>:
  40394c:	b40f      	push	{r0, r1, r2, r3}
  40394e:	b500      	push	{lr}
  403950:	4907      	ldr	r1, [pc, #28]	; (403970 <printf+0x24>)
  403952:	b083      	sub	sp, #12
  403954:	ab04      	add	r3, sp, #16
  403956:	6808      	ldr	r0, [r1, #0]
  403958:	f853 2b04 	ldr.w	r2, [r3], #4
  40395c:	6881      	ldr	r1, [r0, #8]
  40395e:	9301      	str	r3, [sp, #4]
  403960:	f000 f9bc 	bl	403cdc <_vfprintf_r>
  403964:	b003      	add	sp, #12
  403966:	f85d eb04 	ldr.w	lr, [sp], #4
  40396a:	b004      	add	sp, #16
  40396c:	4770      	bx	lr
  40396e:	bf00      	nop
  403970:	2040000c 	.word	0x2040000c

00403974 <_puts_r>:
  403974:	b5f0      	push	{r4, r5, r6, r7, lr}
  403976:	4605      	mov	r5, r0
  403978:	b089      	sub	sp, #36	; 0x24
  40397a:	4608      	mov	r0, r1
  40397c:	460c      	mov	r4, r1
  40397e:	f000 f93f 	bl	403c00 <strlen>
  403982:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403984:	4f21      	ldr	r7, [pc, #132]	; (403a0c <_puts_r+0x98>)
  403986:	9404      	str	r4, [sp, #16]
  403988:	2601      	movs	r6, #1
  40398a:	1c44      	adds	r4, r0, #1
  40398c:	a904      	add	r1, sp, #16
  40398e:	2202      	movs	r2, #2
  403990:	9403      	str	r4, [sp, #12]
  403992:	9005      	str	r0, [sp, #20]
  403994:	68ac      	ldr	r4, [r5, #8]
  403996:	9706      	str	r7, [sp, #24]
  403998:	9607      	str	r6, [sp, #28]
  40399a:	9101      	str	r1, [sp, #4]
  40399c:	9202      	str	r2, [sp, #8]
  40399e:	b353      	cbz	r3, 4039f6 <_puts_r+0x82>
  4039a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4039a2:	f013 0f01 	tst.w	r3, #1
  4039a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039aa:	b29a      	uxth	r2, r3
  4039ac:	d101      	bne.n	4039b2 <_puts_r+0x3e>
  4039ae:	0590      	lsls	r0, r2, #22
  4039b0:	d525      	bpl.n	4039fe <_puts_r+0x8a>
  4039b2:	0491      	lsls	r1, r2, #18
  4039b4:	d406      	bmi.n	4039c4 <_puts_r+0x50>
  4039b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4039b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4039bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4039c0:	81a3      	strh	r3, [r4, #12]
  4039c2:	6662      	str	r2, [r4, #100]	; 0x64
  4039c4:	4628      	mov	r0, r5
  4039c6:	aa01      	add	r2, sp, #4
  4039c8:	4621      	mov	r1, r4
  4039ca:	f002 ff27 	bl	40681c <__sfvwrite_r>
  4039ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4039d0:	2800      	cmp	r0, #0
  4039d2:	bf0c      	ite	eq
  4039d4:	250a      	moveq	r5, #10
  4039d6:	f04f 35ff 	movne.w	r5, #4294967295
  4039da:	07da      	lsls	r2, r3, #31
  4039dc:	d402      	bmi.n	4039e4 <_puts_r+0x70>
  4039de:	89a3      	ldrh	r3, [r4, #12]
  4039e0:	059b      	lsls	r3, r3, #22
  4039e2:	d502      	bpl.n	4039ea <_puts_r+0x76>
  4039e4:	4628      	mov	r0, r5
  4039e6:	b009      	add	sp, #36	; 0x24
  4039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4039ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4039ec:	f003 f8cc 	bl	406b88 <__retarget_lock_release_recursive>
  4039f0:	4628      	mov	r0, r5
  4039f2:	b009      	add	sp, #36	; 0x24
  4039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4039f6:	4628      	mov	r0, r5
  4039f8:	f002 fd88 	bl	40650c <__sinit>
  4039fc:	e7d0      	b.n	4039a0 <_puts_r+0x2c>
  4039fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a00:	f003 f8c0 	bl	406b84 <__retarget_lock_acquire_recursive>
  403a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a08:	b29a      	uxth	r2, r3
  403a0a:	e7d2      	b.n	4039b2 <_puts_r+0x3e>
  403a0c:	00408710 	.word	0x00408710

00403a10 <puts>:
  403a10:	4b02      	ldr	r3, [pc, #8]	; (403a1c <puts+0xc>)
  403a12:	4601      	mov	r1, r0
  403a14:	6818      	ldr	r0, [r3, #0]
  403a16:	f7ff bfad 	b.w	403974 <_puts_r>
  403a1a:	bf00      	nop
  403a1c:	2040000c 	.word	0x2040000c

00403a20 <_sbrk_r>:
  403a20:	b538      	push	{r3, r4, r5, lr}
  403a22:	4c07      	ldr	r4, [pc, #28]	; (403a40 <_sbrk_r+0x20>)
  403a24:	2300      	movs	r3, #0
  403a26:	4605      	mov	r5, r0
  403a28:	4608      	mov	r0, r1
  403a2a:	6023      	str	r3, [r4, #0]
  403a2c:	f7fd f924 	bl	400c78 <_sbrk>
  403a30:	1c43      	adds	r3, r0, #1
  403a32:	d000      	beq.n	403a36 <_sbrk_r+0x16>
  403a34:	bd38      	pop	{r3, r4, r5, pc}
  403a36:	6823      	ldr	r3, [r4, #0]
  403a38:	2b00      	cmp	r3, #0
  403a3a:	d0fb      	beq.n	403a34 <_sbrk_r+0x14>
  403a3c:	602b      	str	r3, [r5, #0]
  403a3e:	bd38      	pop	{r3, r4, r5, pc}
  403a40:	20400cc4 	.word	0x20400cc4

00403a44 <setbuf>:
  403a44:	2900      	cmp	r1, #0
  403a46:	bf0c      	ite	eq
  403a48:	2202      	moveq	r2, #2
  403a4a:	2200      	movne	r2, #0
  403a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403a50:	f000 b800 	b.w	403a54 <setvbuf>

00403a54 <setvbuf>:
  403a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403a58:	4c61      	ldr	r4, [pc, #388]	; (403be0 <setvbuf+0x18c>)
  403a5a:	6825      	ldr	r5, [r4, #0]
  403a5c:	b083      	sub	sp, #12
  403a5e:	4604      	mov	r4, r0
  403a60:	460f      	mov	r7, r1
  403a62:	4690      	mov	r8, r2
  403a64:	461e      	mov	r6, r3
  403a66:	b115      	cbz	r5, 403a6e <setvbuf+0x1a>
  403a68:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403a6a:	2b00      	cmp	r3, #0
  403a6c:	d064      	beq.n	403b38 <setvbuf+0xe4>
  403a6e:	f1b8 0f02 	cmp.w	r8, #2
  403a72:	d006      	beq.n	403a82 <setvbuf+0x2e>
  403a74:	f1b8 0f01 	cmp.w	r8, #1
  403a78:	f200 809f 	bhi.w	403bba <setvbuf+0x166>
  403a7c:	2e00      	cmp	r6, #0
  403a7e:	f2c0 809c 	blt.w	403bba <setvbuf+0x166>
  403a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a84:	07d8      	lsls	r0, r3, #31
  403a86:	d534      	bpl.n	403af2 <setvbuf+0x9e>
  403a88:	4621      	mov	r1, r4
  403a8a:	4628      	mov	r0, r5
  403a8c:	f002 fce6 	bl	40645c <_fflush_r>
  403a90:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a92:	b141      	cbz	r1, 403aa6 <setvbuf+0x52>
  403a94:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a98:	4299      	cmp	r1, r3
  403a9a:	d002      	beq.n	403aa2 <setvbuf+0x4e>
  403a9c:	4628      	mov	r0, r5
  403a9e:	f002 fdd7 	bl	406650 <_free_r>
  403aa2:	2300      	movs	r3, #0
  403aa4:	6323      	str	r3, [r4, #48]	; 0x30
  403aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aaa:	2200      	movs	r2, #0
  403aac:	61a2      	str	r2, [r4, #24]
  403aae:	6062      	str	r2, [r4, #4]
  403ab0:	061a      	lsls	r2, r3, #24
  403ab2:	d43a      	bmi.n	403b2a <setvbuf+0xd6>
  403ab4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403ab8:	f023 0303 	bic.w	r3, r3, #3
  403abc:	f1b8 0f02 	cmp.w	r8, #2
  403ac0:	81a3      	strh	r3, [r4, #12]
  403ac2:	d01d      	beq.n	403b00 <setvbuf+0xac>
  403ac4:	ab01      	add	r3, sp, #4
  403ac6:	466a      	mov	r2, sp
  403ac8:	4621      	mov	r1, r4
  403aca:	4628      	mov	r0, r5
  403acc:	f003 f85e 	bl	406b8c <__swhatbuf_r>
  403ad0:	89a3      	ldrh	r3, [r4, #12]
  403ad2:	4318      	orrs	r0, r3
  403ad4:	81a0      	strh	r0, [r4, #12]
  403ad6:	2e00      	cmp	r6, #0
  403ad8:	d132      	bne.n	403b40 <setvbuf+0xec>
  403ada:	9e00      	ldr	r6, [sp, #0]
  403adc:	4630      	mov	r0, r6
  403ade:	f7ff fb81 	bl	4031e4 <malloc>
  403ae2:	4607      	mov	r7, r0
  403ae4:	2800      	cmp	r0, #0
  403ae6:	d06b      	beq.n	403bc0 <setvbuf+0x16c>
  403ae8:	89a3      	ldrh	r3, [r4, #12]
  403aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403aee:	81a3      	strh	r3, [r4, #12]
  403af0:	e028      	b.n	403b44 <setvbuf+0xf0>
  403af2:	89a3      	ldrh	r3, [r4, #12]
  403af4:	0599      	lsls	r1, r3, #22
  403af6:	d4c7      	bmi.n	403a88 <setvbuf+0x34>
  403af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403afa:	f003 f843 	bl	406b84 <__retarget_lock_acquire_recursive>
  403afe:	e7c3      	b.n	403a88 <setvbuf+0x34>
  403b00:	2500      	movs	r5, #0
  403b02:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b04:	2600      	movs	r6, #0
  403b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403b0a:	f043 0302 	orr.w	r3, r3, #2
  403b0e:	2001      	movs	r0, #1
  403b10:	60a6      	str	r6, [r4, #8]
  403b12:	07ce      	lsls	r6, r1, #31
  403b14:	81a3      	strh	r3, [r4, #12]
  403b16:	6022      	str	r2, [r4, #0]
  403b18:	6122      	str	r2, [r4, #16]
  403b1a:	6160      	str	r0, [r4, #20]
  403b1c:	d401      	bmi.n	403b22 <setvbuf+0xce>
  403b1e:	0598      	lsls	r0, r3, #22
  403b20:	d53e      	bpl.n	403ba0 <setvbuf+0x14c>
  403b22:	4628      	mov	r0, r5
  403b24:	b003      	add	sp, #12
  403b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b2a:	6921      	ldr	r1, [r4, #16]
  403b2c:	4628      	mov	r0, r5
  403b2e:	f002 fd8f 	bl	406650 <_free_r>
  403b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b36:	e7bd      	b.n	403ab4 <setvbuf+0x60>
  403b38:	4628      	mov	r0, r5
  403b3a:	f002 fce7 	bl	40650c <__sinit>
  403b3e:	e796      	b.n	403a6e <setvbuf+0x1a>
  403b40:	2f00      	cmp	r7, #0
  403b42:	d0cb      	beq.n	403adc <setvbuf+0x88>
  403b44:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403b46:	2b00      	cmp	r3, #0
  403b48:	d033      	beq.n	403bb2 <setvbuf+0x15e>
  403b4a:	9b00      	ldr	r3, [sp, #0]
  403b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b50:	6027      	str	r7, [r4, #0]
  403b52:	429e      	cmp	r6, r3
  403b54:	bf1c      	itt	ne
  403b56:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403b5a:	81a2      	strhne	r2, [r4, #12]
  403b5c:	f1b8 0f01 	cmp.w	r8, #1
  403b60:	bf04      	itt	eq
  403b62:	f042 0201 	orreq.w	r2, r2, #1
  403b66:	81a2      	strheq	r2, [r4, #12]
  403b68:	b292      	uxth	r2, r2
  403b6a:	f012 0308 	ands.w	r3, r2, #8
  403b6e:	6127      	str	r7, [r4, #16]
  403b70:	6166      	str	r6, [r4, #20]
  403b72:	d00e      	beq.n	403b92 <setvbuf+0x13e>
  403b74:	07d1      	lsls	r1, r2, #31
  403b76:	d51a      	bpl.n	403bae <setvbuf+0x15a>
  403b78:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403b7a:	4276      	negs	r6, r6
  403b7c:	2300      	movs	r3, #0
  403b7e:	f015 0501 	ands.w	r5, r5, #1
  403b82:	61a6      	str	r6, [r4, #24]
  403b84:	60a3      	str	r3, [r4, #8]
  403b86:	d009      	beq.n	403b9c <setvbuf+0x148>
  403b88:	2500      	movs	r5, #0
  403b8a:	4628      	mov	r0, r5
  403b8c:	b003      	add	sp, #12
  403b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b92:	60a3      	str	r3, [r4, #8]
  403b94:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403b96:	f015 0501 	ands.w	r5, r5, #1
  403b9a:	d1f5      	bne.n	403b88 <setvbuf+0x134>
  403b9c:	0593      	lsls	r3, r2, #22
  403b9e:	d4c0      	bmi.n	403b22 <setvbuf+0xce>
  403ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ba2:	f002 fff1 	bl	406b88 <__retarget_lock_release_recursive>
  403ba6:	4628      	mov	r0, r5
  403ba8:	b003      	add	sp, #12
  403baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403bae:	60a6      	str	r6, [r4, #8]
  403bb0:	e7f0      	b.n	403b94 <setvbuf+0x140>
  403bb2:	4628      	mov	r0, r5
  403bb4:	f002 fcaa 	bl	40650c <__sinit>
  403bb8:	e7c7      	b.n	403b4a <setvbuf+0xf6>
  403bba:	f04f 35ff 	mov.w	r5, #4294967295
  403bbe:	e7b0      	b.n	403b22 <setvbuf+0xce>
  403bc0:	f8dd 9000 	ldr.w	r9, [sp]
  403bc4:	45b1      	cmp	r9, r6
  403bc6:	d004      	beq.n	403bd2 <setvbuf+0x17e>
  403bc8:	4648      	mov	r0, r9
  403bca:	f7ff fb0b 	bl	4031e4 <malloc>
  403bce:	4607      	mov	r7, r0
  403bd0:	b920      	cbnz	r0, 403bdc <setvbuf+0x188>
  403bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bd6:	f04f 35ff 	mov.w	r5, #4294967295
  403bda:	e792      	b.n	403b02 <setvbuf+0xae>
  403bdc:	464e      	mov	r6, r9
  403bde:	e783      	b.n	403ae8 <setvbuf+0x94>
  403be0:	2040000c 	.word	0x2040000c
	...

00403c00 <strlen>:
  403c00:	f890 f000 	pld	[r0]
  403c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403c08:	f020 0107 	bic.w	r1, r0, #7
  403c0c:	f06f 0c00 	mvn.w	ip, #0
  403c10:	f010 0407 	ands.w	r4, r0, #7
  403c14:	f891 f020 	pld	[r1, #32]
  403c18:	f040 8049 	bne.w	403cae <strlen+0xae>
  403c1c:	f04f 0400 	mov.w	r4, #0
  403c20:	f06f 0007 	mvn.w	r0, #7
  403c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  403c28:	f891 f040 	pld	[r1, #64]	; 0x40
  403c2c:	f100 0008 	add.w	r0, r0, #8
  403c30:	fa82 f24c 	uadd8	r2, r2, ip
  403c34:	faa4 f28c 	sel	r2, r4, ip
  403c38:	fa83 f34c 	uadd8	r3, r3, ip
  403c3c:	faa2 f38c 	sel	r3, r2, ip
  403c40:	bb4b      	cbnz	r3, 403c96 <strlen+0x96>
  403c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403c46:	fa82 f24c 	uadd8	r2, r2, ip
  403c4a:	f100 0008 	add.w	r0, r0, #8
  403c4e:	faa4 f28c 	sel	r2, r4, ip
  403c52:	fa83 f34c 	uadd8	r3, r3, ip
  403c56:	faa2 f38c 	sel	r3, r2, ip
  403c5a:	b9e3      	cbnz	r3, 403c96 <strlen+0x96>
  403c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403c60:	fa82 f24c 	uadd8	r2, r2, ip
  403c64:	f100 0008 	add.w	r0, r0, #8
  403c68:	faa4 f28c 	sel	r2, r4, ip
  403c6c:	fa83 f34c 	uadd8	r3, r3, ip
  403c70:	faa2 f38c 	sel	r3, r2, ip
  403c74:	b97b      	cbnz	r3, 403c96 <strlen+0x96>
  403c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403c7a:	f101 0120 	add.w	r1, r1, #32
  403c7e:	fa82 f24c 	uadd8	r2, r2, ip
  403c82:	f100 0008 	add.w	r0, r0, #8
  403c86:	faa4 f28c 	sel	r2, r4, ip
  403c8a:	fa83 f34c 	uadd8	r3, r3, ip
  403c8e:	faa2 f38c 	sel	r3, r2, ip
  403c92:	2b00      	cmp	r3, #0
  403c94:	d0c6      	beq.n	403c24 <strlen+0x24>
  403c96:	2a00      	cmp	r2, #0
  403c98:	bf04      	itt	eq
  403c9a:	3004      	addeq	r0, #4
  403c9c:	461a      	moveq	r2, r3
  403c9e:	ba12      	rev	r2, r2
  403ca0:	fab2 f282 	clz	r2, r2
  403ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403cac:	4770      	bx	lr
  403cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  403cb2:	f004 0503 	and.w	r5, r4, #3
  403cb6:	f1c4 0000 	rsb	r0, r4, #0
  403cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403cbe:	f014 0f04 	tst.w	r4, #4
  403cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  403cc6:	fa0c f505 	lsl.w	r5, ip, r5
  403cca:	ea62 0205 	orn	r2, r2, r5
  403cce:	bf1c      	itt	ne
  403cd0:	ea63 0305 	ornne	r3, r3, r5
  403cd4:	4662      	movne	r2, ip
  403cd6:	f04f 0400 	mov.w	r4, #0
  403cda:	e7a9      	b.n	403c30 <strlen+0x30>

00403cdc <_vfprintf_r>:
  403cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ce0:	b0c1      	sub	sp, #260	; 0x104
  403ce2:	461d      	mov	r5, r3
  403ce4:	468a      	mov	sl, r1
  403ce6:	4691      	mov	r9, r2
  403ce8:	4604      	mov	r4, r0
  403cea:	9008      	str	r0, [sp, #32]
  403cec:	f002 ff38 	bl	406b60 <_localeconv_r>
  403cf0:	6803      	ldr	r3, [r0, #0]
  403cf2:	9315      	str	r3, [sp, #84]	; 0x54
  403cf4:	4618      	mov	r0, r3
  403cf6:	f7ff ff83 	bl	403c00 <strlen>
  403cfa:	950e      	str	r5, [sp, #56]	; 0x38
  403cfc:	9014      	str	r0, [sp, #80]	; 0x50
  403cfe:	b11c      	cbz	r4, 403d08 <_vfprintf_r+0x2c>
  403d00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403d02:	2b00      	cmp	r3, #0
  403d04:	f000 825f 	beq.w	4041c6 <_vfprintf_r+0x4ea>
  403d08:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  403d0c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  403d10:	f013 0f01 	tst.w	r3, #1
  403d14:	b293      	uxth	r3, r2
  403d16:	d102      	bne.n	403d1e <_vfprintf_r+0x42>
  403d18:	0599      	lsls	r1, r3, #22
  403d1a:	f140 8275 	bpl.w	404208 <_vfprintf_r+0x52c>
  403d1e:	049f      	lsls	r7, r3, #18
  403d20:	d40a      	bmi.n	403d38 <_vfprintf_r+0x5c>
  403d22:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  403d26:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  403d2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403d2e:	f8aa 300c 	strh.w	r3, [sl, #12]
  403d32:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  403d36:	b29b      	uxth	r3, r3
  403d38:	071e      	lsls	r6, r3, #28
  403d3a:	f140 8223 	bpl.w	404184 <_vfprintf_r+0x4a8>
  403d3e:	f8da 2010 	ldr.w	r2, [sl, #16]
  403d42:	2a00      	cmp	r2, #0
  403d44:	f000 821e 	beq.w	404184 <_vfprintf_r+0x4a8>
  403d48:	f003 021a 	and.w	r2, r3, #26
  403d4c:	2a0a      	cmp	r2, #10
  403d4e:	f000 823e 	beq.w	4041ce <_vfprintf_r+0x4f2>
  403d52:	2300      	movs	r3, #0
  403d54:	4618      	mov	r0, r3
  403d56:	9311      	str	r3, [sp, #68]	; 0x44
  403d58:	9313      	str	r3, [sp, #76]	; 0x4c
  403d5a:	9312      	str	r3, [sp, #72]	; 0x48
  403d5c:	9325      	str	r3, [sp, #148]	; 0x94
  403d5e:	9324      	str	r3, [sp, #144]	; 0x90
  403d60:	9318      	str	r3, [sp, #96]	; 0x60
  403d62:	9319      	str	r3, [sp, #100]	; 0x64
  403d64:	930b      	str	r3, [sp, #44]	; 0x2c
  403d66:	ab30      	add	r3, sp, #192	; 0xc0
  403d68:	9323      	str	r3, [sp, #140]	; 0x8c
  403d6a:	4698      	mov	r8, r3
  403d6c:	9016      	str	r0, [sp, #88]	; 0x58
  403d6e:	9017      	str	r0, [sp, #92]	; 0x5c
  403d70:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403d74:	f899 3000 	ldrb.w	r3, [r9]
  403d78:	464c      	mov	r4, r9
  403d7a:	b1eb      	cbz	r3, 403db8 <_vfprintf_r+0xdc>
  403d7c:	2b25      	cmp	r3, #37	; 0x25
  403d7e:	d102      	bne.n	403d86 <_vfprintf_r+0xaa>
  403d80:	e01a      	b.n	403db8 <_vfprintf_r+0xdc>
  403d82:	2b25      	cmp	r3, #37	; 0x25
  403d84:	d003      	beq.n	403d8e <_vfprintf_r+0xb2>
  403d86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d1f9      	bne.n	403d82 <_vfprintf_r+0xa6>
  403d8e:	eba4 0509 	sub.w	r5, r4, r9
  403d92:	b18d      	cbz	r5, 403db8 <_vfprintf_r+0xdc>
  403d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d96:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d98:	f8c8 9000 	str.w	r9, [r8]
  403d9c:	3301      	adds	r3, #1
  403d9e:	442a      	add	r2, r5
  403da0:	2b07      	cmp	r3, #7
  403da2:	f8c8 5004 	str.w	r5, [r8, #4]
  403da6:	9225      	str	r2, [sp, #148]	; 0x94
  403da8:	9324      	str	r3, [sp, #144]	; 0x90
  403daa:	f300 8201 	bgt.w	4041b0 <_vfprintf_r+0x4d4>
  403dae:	f108 0808 	add.w	r8, r8, #8
  403db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403db4:	442b      	add	r3, r5
  403db6:	930b      	str	r3, [sp, #44]	; 0x2c
  403db8:	7823      	ldrb	r3, [r4, #0]
  403dba:	2b00      	cmp	r3, #0
  403dbc:	f000 83f0 	beq.w	4045a0 <_vfprintf_r+0x8c4>
  403dc0:	2300      	movs	r3, #0
  403dc2:	461a      	mov	r2, r3
  403dc4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403dc8:	4619      	mov	r1, r3
  403dca:	930c      	str	r3, [sp, #48]	; 0x30
  403dcc:	469b      	mov	fp, r3
  403dce:	7866      	ldrb	r6, [r4, #1]
  403dd0:	f04f 33ff 	mov.w	r3, #4294967295
  403dd4:	f104 0901 	add.w	r9, r4, #1
  403dd8:	9309      	str	r3, [sp, #36]	; 0x24
  403dda:	f109 0901 	add.w	r9, r9, #1
  403dde:	f1a6 0320 	sub.w	r3, r6, #32
  403de2:	2b58      	cmp	r3, #88	; 0x58
  403de4:	f200 83bf 	bhi.w	404566 <_vfprintf_r+0x88a>
  403de8:	e8df f013 	tbh	[pc, r3, lsl #1]
  403dec:	03bd02e0 	.word	0x03bd02e0
  403df0:	034f03bd 	.word	0x034f03bd
  403df4:	03bd03bd 	.word	0x03bd03bd
  403df8:	03bd03bd 	.word	0x03bd03bd
  403dfc:	03bd03bd 	.word	0x03bd03bd
  403e00:	03080354 	.word	0x03080354
  403e04:	021a03bd 	.word	0x021a03bd
  403e08:	03bd02e8 	.word	0x03bd02e8
  403e0c:	033a0303 	.word	0x033a0303
  403e10:	033a033a 	.word	0x033a033a
  403e14:	033a033a 	.word	0x033a033a
  403e18:	033a033a 	.word	0x033a033a
  403e1c:	033a033a 	.word	0x033a033a
  403e20:	03bd03bd 	.word	0x03bd03bd
  403e24:	03bd03bd 	.word	0x03bd03bd
  403e28:	03bd03bd 	.word	0x03bd03bd
  403e2c:	03bd03bd 	.word	0x03bd03bd
  403e30:	03bd03bd 	.word	0x03bd03bd
  403e34:	03620349 	.word	0x03620349
  403e38:	036203bd 	.word	0x036203bd
  403e3c:	03bd03bd 	.word	0x03bd03bd
  403e40:	03bd03bd 	.word	0x03bd03bd
  403e44:	03bd03a2 	.word	0x03bd03a2
  403e48:	006f03bd 	.word	0x006f03bd
  403e4c:	03bd03bd 	.word	0x03bd03bd
  403e50:	03bd03bd 	.word	0x03bd03bd
  403e54:	005903bd 	.word	0x005903bd
  403e58:	03bd03bd 	.word	0x03bd03bd
  403e5c:	03bd031e 	.word	0x03bd031e
  403e60:	03bd03bd 	.word	0x03bd03bd
  403e64:	03bd03bd 	.word	0x03bd03bd
  403e68:	03bd03bd 	.word	0x03bd03bd
  403e6c:	03bd03bd 	.word	0x03bd03bd
  403e70:	032403bd 	.word	0x032403bd
  403e74:	03620273 	.word	0x03620273
  403e78:	03620362 	.word	0x03620362
  403e7c:	027302b7 	.word	0x027302b7
  403e80:	03bd03bd 	.word	0x03bd03bd
  403e84:	03bd02bc 	.word	0x03bd02bc
  403e88:	007102c9 	.word	0x007102c9
  403e8c:	0247030d 	.word	0x0247030d
  403e90:	025203bd 	.word	0x025203bd
  403e94:	005b03bd 	.word	0x005b03bd
  403e98:	03bd03bd 	.word	0x03bd03bd
  403e9c:	021f      	.short	0x021f
  403e9e:	f04b 0b10 	orr.w	fp, fp, #16
  403ea2:	f01b 0f20 	tst.w	fp, #32
  403ea6:	f040 8353 	bne.w	404550 <_vfprintf_r+0x874>
  403eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403eac:	f01b 0f10 	tst.w	fp, #16
  403eb0:	4613      	mov	r3, r2
  403eb2:	f040 85b4 	bne.w	404a1e <_vfprintf_r+0xd42>
  403eb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403eba:	f000 85b0 	beq.w	404a1e <_vfprintf_r+0xd42>
  403ebe:	8814      	ldrh	r4, [r2, #0]
  403ec0:	3204      	adds	r2, #4
  403ec2:	2500      	movs	r5, #0
  403ec4:	2301      	movs	r3, #1
  403ec6:	920e      	str	r2, [sp, #56]	; 0x38
  403ec8:	e014      	b.n	403ef4 <_vfprintf_r+0x218>
  403eca:	f04b 0b10 	orr.w	fp, fp, #16
  403ece:	f01b 0320 	ands.w	r3, fp, #32
  403ed2:	f040 8332 	bne.w	40453a <_vfprintf_r+0x85e>
  403ed6:	f01b 0210 	ands.w	r2, fp, #16
  403eda:	f040 8589 	bne.w	4049f0 <_vfprintf_r+0xd14>
  403ede:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403ee2:	f000 8585 	beq.w	4049f0 <_vfprintf_r+0xd14>
  403ee6:	990e      	ldr	r1, [sp, #56]	; 0x38
  403ee8:	4613      	mov	r3, r2
  403eea:	460a      	mov	r2, r1
  403eec:	3204      	adds	r2, #4
  403eee:	880c      	ldrh	r4, [r1, #0]
  403ef0:	920e      	str	r2, [sp, #56]	; 0x38
  403ef2:	2500      	movs	r5, #0
  403ef4:	f04f 0a00 	mov.w	sl, #0
  403ef8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403efc:	9909      	ldr	r1, [sp, #36]	; 0x24
  403efe:	1c4a      	adds	r2, r1, #1
  403f00:	f000 820b 	beq.w	40431a <_vfprintf_r+0x63e>
  403f04:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403f08:	9206      	str	r2, [sp, #24]
  403f0a:	ea54 0205 	orrs.w	r2, r4, r5
  403f0e:	f040 820a 	bne.w	404326 <_vfprintf_r+0x64a>
  403f12:	2900      	cmp	r1, #0
  403f14:	f040 846f 	bne.w	4047f6 <_vfprintf_r+0xb1a>
  403f18:	2b00      	cmp	r3, #0
  403f1a:	f040 852d 	bne.w	404978 <_vfprintf_r+0xc9c>
  403f1e:	f01b 0301 	ands.w	r3, fp, #1
  403f22:	930d      	str	r3, [sp, #52]	; 0x34
  403f24:	f000 8668 	beq.w	404bf8 <_vfprintf_r+0xf1c>
  403f28:	af40      	add	r7, sp, #256	; 0x100
  403f2a:	2330      	movs	r3, #48	; 0x30
  403f2c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403f34:	4293      	cmp	r3, r2
  403f36:	bfb8      	it	lt
  403f38:	4613      	movlt	r3, r2
  403f3a:	9307      	str	r3, [sp, #28]
  403f3c:	2300      	movs	r3, #0
  403f3e:	9310      	str	r3, [sp, #64]	; 0x40
  403f40:	f1ba 0f00 	cmp.w	sl, #0
  403f44:	d002      	beq.n	403f4c <_vfprintf_r+0x270>
  403f46:	9b07      	ldr	r3, [sp, #28]
  403f48:	3301      	adds	r3, #1
  403f4a:	9307      	str	r3, [sp, #28]
  403f4c:	9b06      	ldr	r3, [sp, #24]
  403f4e:	f013 0302 	ands.w	r3, r3, #2
  403f52:	930f      	str	r3, [sp, #60]	; 0x3c
  403f54:	d002      	beq.n	403f5c <_vfprintf_r+0x280>
  403f56:	9b07      	ldr	r3, [sp, #28]
  403f58:	3302      	adds	r3, #2
  403f5a:	9307      	str	r3, [sp, #28]
  403f5c:	9b06      	ldr	r3, [sp, #24]
  403f5e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403f62:	f040 831b 	bne.w	40459c <_vfprintf_r+0x8c0>
  403f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f68:	9a07      	ldr	r2, [sp, #28]
  403f6a:	eba3 0b02 	sub.w	fp, r3, r2
  403f6e:	f1bb 0f00 	cmp.w	fp, #0
  403f72:	f340 8313 	ble.w	40459c <_vfprintf_r+0x8c0>
  403f76:	f1bb 0f10 	cmp.w	fp, #16
  403f7a:	9925      	ldr	r1, [sp, #148]	; 0x94
  403f7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403f7e:	dd28      	ble.n	403fd2 <_vfprintf_r+0x2f6>
  403f80:	4643      	mov	r3, r8
  403f82:	2410      	movs	r4, #16
  403f84:	46a8      	mov	r8, r5
  403f86:	f8dd a020 	ldr.w	sl, [sp, #32]
  403f8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403f8c:	e006      	b.n	403f9c <_vfprintf_r+0x2c0>
  403f8e:	f1ab 0b10 	sub.w	fp, fp, #16
  403f92:	f1bb 0f10 	cmp.w	fp, #16
  403f96:	f103 0308 	add.w	r3, r3, #8
  403f9a:	dd18      	ble.n	403fce <_vfprintf_r+0x2f2>
  403f9c:	3201      	adds	r2, #1
  403f9e:	48b9      	ldr	r0, [pc, #740]	; (404284 <_vfprintf_r+0x5a8>)
  403fa0:	9224      	str	r2, [sp, #144]	; 0x90
  403fa2:	3110      	adds	r1, #16
  403fa4:	2a07      	cmp	r2, #7
  403fa6:	9125      	str	r1, [sp, #148]	; 0x94
  403fa8:	e883 0011 	stmia.w	r3, {r0, r4}
  403fac:	ddef      	ble.n	403f8e <_vfprintf_r+0x2b2>
  403fae:	aa23      	add	r2, sp, #140	; 0x8c
  403fb0:	4629      	mov	r1, r5
  403fb2:	4650      	mov	r0, sl
  403fb4:	f003 fc3c 	bl	407830 <__sprint_r>
  403fb8:	2800      	cmp	r0, #0
  403fba:	f040 836a 	bne.w	404692 <_vfprintf_r+0x9b6>
  403fbe:	f1ab 0b10 	sub.w	fp, fp, #16
  403fc2:	f1bb 0f10 	cmp.w	fp, #16
  403fc6:	9925      	ldr	r1, [sp, #148]	; 0x94
  403fc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403fca:	ab30      	add	r3, sp, #192	; 0xc0
  403fcc:	dce6      	bgt.n	403f9c <_vfprintf_r+0x2c0>
  403fce:	4645      	mov	r5, r8
  403fd0:	4698      	mov	r8, r3
  403fd2:	3201      	adds	r2, #1
  403fd4:	4bab      	ldr	r3, [pc, #684]	; (404284 <_vfprintf_r+0x5a8>)
  403fd6:	9224      	str	r2, [sp, #144]	; 0x90
  403fd8:	eb0b 0401 	add.w	r4, fp, r1
  403fdc:	2a07      	cmp	r2, #7
  403fde:	9425      	str	r4, [sp, #148]	; 0x94
  403fe0:	e888 0808 	stmia.w	r8, {r3, fp}
  403fe4:	f300 84cd 	bgt.w	404982 <_vfprintf_r+0xca6>
  403fe8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403fec:	f108 0808 	add.w	r8, r8, #8
  403ff0:	f1ba 0f00 	cmp.w	sl, #0
  403ff4:	d00e      	beq.n	404014 <_vfprintf_r+0x338>
  403ff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ff8:	3301      	adds	r3, #1
  403ffa:	3401      	adds	r4, #1
  403ffc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404000:	2201      	movs	r2, #1
  404002:	2b07      	cmp	r3, #7
  404004:	9425      	str	r4, [sp, #148]	; 0x94
  404006:	9324      	str	r3, [sp, #144]	; 0x90
  404008:	e888 0006 	stmia.w	r8, {r1, r2}
  40400c:	f300 840a 	bgt.w	404824 <_vfprintf_r+0xb48>
  404010:	f108 0808 	add.w	r8, r8, #8
  404014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404016:	b16b      	cbz	r3, 404034 <_vfprintf_r+0x358>
  404018:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40401a:	3301      	adds	r3, #1
  40401c:	3402      	adds	r4, #2
  40401e:	a91c      	add	r1, sp, #112	; 0x70
  404020:	2202      	movs	r2, #2
  404022:	2b07      	cmp	r3, #7
  404024:	9425      	str	r4, [sp, #148]	; 0x94
  404026:	9324      	str	r3, [sp, #144]	; 0x90
  404028:	e888 0006 	stmia.w	r8, {r1, r2}
  40402c:	f300 8406 	bgt.w	40483c <_vfprintf_r+0xb60>
  404030:	f108 0808 	add.w	r8, r8, #8
  404034:	2d80      	cmp	r5, #128	; 0x80
  404036:	f000 832e 	beq.w	404696 <_vfprintf_r+0x9ba>
  40403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40403c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40403e:	eba3 0a02 	sub.w	sl, r3, r2
  404042:	f1ba 0f00 	cmp.w	sl, #0
  404046:	dd3b      	ble.n	4040c0 <_vfprintf_r+0x3e4>
  404048:	f1ba 0f10 	cmp.w	sl, #16
  40404c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40404e:	4d8e      	ldr	r5, [pc, #568]	; (404288 <_vfprintf_r+0x5ac>)
  404050:	dd2b      	ble.n	4040aa <_vfprintf_r+0x3ce>
  404052:	4642      	mov	r2, r8
  404054:	4621      	mov	r1, r4
  404056:	46b0      	mov	r8, r6
  404058:	f04f 0b10 	mov.w	fp, #16
  40405c:	462e      	mov	r6, r5
  40405e:	9c08      	ldr	r4, [sp, #32]
  404060:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404062:	e006      	b.n	404072 <_vfprintf_r+0x396>
  404064:	f1aa 0a10 	sub.w	sl, sl, #16
  404068:	f1ba 0f10 	cmp.w	sl, #16
  40406c:	f102 0208 	add.w	r2, r2, #8
  404070:	dd17      	ble.n	4040a2 <_vfprintf_r+0x3c6>
  404072:	3301      	adds	r3, #1
  404074:	3110      	adds	r1, #16
  404076:	2b07      	cmp	r3, #7
  404078:	9125      	str	r1, [sp, #148]	; 0x94
  40407a:	9324      	str	r3, [sp, #144]	; 0x90
  40407c:	e882 0840 	stmia.w	r2, {r6, fp}
  404080:	ddf0      	ble.n	404064 <_vfprintf_r+0x388>
  404082:	aa23      	add	r2, sp, #140	; 0x8c
  404084:	4629      	mov	r1, r5
  404086:	4620      	mov	r0, r4
  404088:	f003 fbd2 	bl	407830 <__sprint_r>
  40408c:	2800      	cmp	r0, #0
  40408e:	f040 8300 	bne.w	404692 <_vfprintf_r+0x9b6>
  404092:	f1aa 0a10 	sub.w	sl, sl, #16
  404096:	f1ba 0f10 	cmp.w	sl, #16
  40409a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40409c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40409e:	aa30      	add	r2, sp, #192	; 0xc0
  4040a0:	dce7      	bgt.n	404072 <_vfprintf_r+0x396>
  4040a2:	4635      	mov	r5, r6
  4040a4:	460c      	mov	r4, r1
  4040a6:	4646      	mov	r6, r8
  4040a8:	4690      	mov	r8, r2
  4040aa:	3301      	adds	r3, #1
  4040ac:	4454      	add	r4, sl
  4040ae:	2b07      	cmp	r3, #7
  4040b0:	9425      	str	r4, [sp, #148]	; 0x94
  4040b2:	9324      	str	r3, [sp, #144]	; 0x90
  4040b4:	e888 0420 	stmia.w	r8, {r5, sl}
  4040b8:	f300 83a9 	bgt.w	40480e <_vfprintf_r+0xb32>
  4040bc:	f108 0808 	add.w	r8, r8, #8
  4040c0:	9b06      	ldr	r3, [sp, #24]
  4040c2:	05db      	lsls	r3, r3, #23
  4040c4:	f100 8285 	bmi.w	4045d2 <_vfprintf_r+0x8f6>
  4040c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040ca:	990d      	ldr	r1, [sp, #52]	; 0x34
  4040cc:	f8c8 7000 	str.w	r7, [r8]
  4040d0:	3301      	adds	r3, #1
  4040d2:	440c      	add	r4, r1
  4040d4:	2b07      	cmp	r3, #7
  4040d6:	9425      	str	r4, [sp, #148]	; 0x94
  4040d8:	f8c8 1004 	str.w	r1, [r8, #4]
  4040dc:	9324      	str	r3, [sp, #144]	; 0x90
  4040de:	f300 8375 	bgt.w	4047cc <_vfprintf_r+0xaf0>
  4040e2:	f108 0808 	add.w	r8, r8, #8
  4040e6:	9b06      	ldr	r3, [sp, #24]
  4040e8:	0759      	lsls	r1, r3, #29
  4040ea:	d53b      	bpl.n	404164 <_vfprintf_r+0x488>
  4040ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4040ee:	9a07      	ldr	r2, [sp, #28]
  4040f0:	1a9d      	subs	r5, r3, r2
  4040f2:	2d00      	cmp	r5, #0
  4040f4:	dd36      	ble.n	404164 <_vfprintf_r+0x488>
  4040f6:	2d10      	cmp	r5, #16
  4040f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040fa:	dd21      	ble.n	404140 <_vfprintf_r+0x464>
  4040fc:	2610      	movs	r6, #16
  4040fe:	9f08      	ldr	r7, [sp, #32]
  404100:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404104:	e004      	b.n	404110 <_vfprintf_r+0x434>
  404106:	3d10      	subs	r5, #16
  404108:	2d10      	cmp	r5, #16
  40410a:	f108 0808 	add.w	r8, r8, #8
  40410e:	dd17      	ble.n	404140 <_vfprintf_r+0x464>
  404110:	3301      	adds	r3, #1
  404112:	4a5c      	ldr	r2, [pc, #368]	; (404284 <_vfprintf_r+0x5a8>)
  404114:	9324      	str	r3, [sp, #144]	; 0x90
  404116:	3410      	adds	r4, #16
  404118:	2b07      	cmp	r3, #7
  40411a:	9425      	str	r4, [sp, #148]	; 0x94
  40411c:	e888 0044 	stmia.w	r8, {r2, r6}
  404120:	ddf1      	ble.n	404106 <_vfprintf_r+0x42a>
  404122:	aa23      	add	r2, sp, #140	; 0x8c
  404124:	4651      	mov	r1, sl
  404126:	4638      	mov	r0, r7
  404128:	f003 fb82 	bl	407830 <__sprint_r>
  40412c:	2800      	cmp	r0, #0
  40412e:	f040 823f 	bne.w	4045b0 <_vfprintf_r+0x8d4>
  404132:	3d10      	subs	r5, #16
  404134:	2d10      	cmp	r5, #16
  404136:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40413a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40413e:	dce7      	bgt.n	404110 <_vfprintf_r+0x434>
  404140:	3301      	adds	r3, #1
  404142:	4a50      	ldr	r2, [pc, #320]	; (404284 <_vfprintf_r+0x5a8>)
  404144:	9324      	str	r3, [sp, #144]	; 0x90
  404146:	442c      	add	r4, r5
  404148:	2b07      	cmp	r3, #7
  40414a:	9425      	str	r4, [sp, #148]	; 0x94
  40414c:	e888 0024 	stmia.w	r8, {r2, r5}
  404150:	dd08      	ble.n	404164 <_vfprintf_r+0x488>
  404152:	aa23      	add	r2, sp, #140	; 0x8c
  404154:	990a      	ldr	r1, [sp, #40]	; 0x28
  404156:	9808      	ldr	r0, [sp, #32]
  404158:	f003 fb6a 	bl	407830 <__sprint_r>
  40415c:	2800      	cmp	r0, #0
  40415e:	f040 8347 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404162:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404168:	9907      	ldr	r1, [sp, #28]
  40416a:	428a      	cmp	r2, r1
  40416c:	bfac      	ite	ge
  40416e:	189b      	addge	r3, r3, r2
  404170:	185b      	addlt	r3, r3, r1
  404172:	930b      	str	r3, [sp, #44]	; 0x2c
  404174:	2c00      	cmp	r4, #0
  404176:	f040 8333 	bne.w	4047e0 <_vfprintf_r+0xb04>
  40417a:	2300      	movs	r3, #0
  40417c:	9324      	str	r3, [sp, #144]	; 0x90
  40417e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404182:	e5f7      	b.n	403d74 <_vfprintf_r+0x98>
  404184:	4651      	mov	r1, sl
  404186:	9808      	ldr	r0, [sp, #32]
  404188:	f001 f896 	bl	4052b8 <__swsetup_r>
  40418c:	2800      	cmp	r0, #0
  40418e:	d038      	beq.n	404202 <_vfprintf_r+0x526>
  404190:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404194:	07dd      	lsls	r5, r3, #31
  404196:	d404      	bmi.n	4041a2 <_vfprintf_r+0x4c6>
  404198:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40419c:	059c      	lsls	r4, r3, #22
  40419e:	f140 85ca 	bpl.w	404d36 <_vfprintf_r+0x105a>
  4041a2:	f04f 33ff 	mov.w	r3, #4294967295
  4041a6:	930b      	str	r3, [sp, #44]	; 0x2c
  4041a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4041aa:	b041      	add	sp, #260	; 0x104
  4041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041b0:	aa23      	add	r2, sp, #140	; 0x8c
  4041b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4041b4:	9808      	ldr	r0, [sp, #32]
  4041b6:	f003 fb3b 	bl	407830 <__sprint_r>
  4041ba:	2800      	cmp	r0, #0
  4041bc:	f040 8318 	bne.w	4047f0 <_vfprintf_r+0xb14>
  4041c0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4041c4:	e5f5      	b.n	403db2 <_vfprintf_r+0xd6>
  4041c6:	9808      	ldr	r0, [sp, #32]
  4041c8:	f002 f9a0 	bl	40650c <__sinit>
  4041cc:	e59c      	b.n	403d08 <_vfprintf_r+0x2c>
  4041ce:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  4041d2:	2a00      	cmp	r2, #0
  4041d4:	f6ff adbd 	blt.w	403d52 <_vfprintf_r+0x76>
  4041d8:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  4041dc:	07d0      	lsls	r0, r2, #31
  4041de:	d405      	bmi.n	4041ec <_vfprintf_r+0x510>
  4041e0:	0599      	lsls	r1, r3, #22
  4041e2:	d403      	bmi.n	4041ec <_vfprintf_r+0x510>
  4041e4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4041e8:	f002 fcce 	bl	406b88 <__retarget_lock_release_recursive>
  4041ec:	462b      	mov	r3, r5
  4041ee:	464a      	mov	r2, r9
  4041f0:	4651      	mov	r1, sl
  4041f2:	9808      	ldr	r0, [sp, #32]
  4041f4:	f001 f81e 	bl	405234 <__sbprintf>
  4041f8:	900b      	str	r0, [sp, #44]	; 0x2c
  4041fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4041fc:	b041      	add	sp, #260	; 0x104
  4041fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404202:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404206:	e59f      	b.n	403d48 <_vfprintf_r+0x6c>
  404208:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40420c:	f002 fcba 	bl	406b84 <__retarget_lock_acquire_recursive>
  404210:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404214:	b293      	uxth	r3, r2
  404216:	e582      	b.n	403d1e <_vfprintf_r+0x42>
  404218:	980c      	ldr	r0, [sp, #48]	; 0x30
  40421a:	930e      	str	r3, [sp, #56]	; 0x38
  40421c:	4240      	negs	r0, r0
  40421e:	900c      	str	r0, [sp, #48]	; 0x30
  404220:	f04b 0b04 	orr.w	fp, fp, #4
  404224:	f899 6000 	ldrb.w	r6, [r9]
  404228:	e5d7      	b.n	403dda <_vfprintf_r+0xfe>
  40422a:	2a00      	cmp	r2, #0
  40422c:	f040 87df 	bne.w	4051ee <_vfprintf_r+0x1512>
  404230:	4b16      	ldr	r3, [pc, #88]	; (40428c <_vfprintf_r+0x5b0>)
  404232:	9318      	str	r3, [sp, #96]	; 0x60
  404234:	f01b 0f20 	tst.w	fp, #32
  404238:	f040 84b9 	bne.w	404bae <_vfprintf_r+0xed2>
  40423c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40423e:	f01b 0f10 	tst.w	fp, #16
  404242:	4613      	mov	r3, r2
  404244:	f040 83dc 	bne.w	404a00 <_vfprintf_r+0xd24>
  404248:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40424c:	f000 83d8 	beq.w	404a00 <_vfprintf_r+0xd24>
  404250:	3304      	adds	r3, #4
  404252:	8814      	ldrh	r4, [r2, #0]
  404254:	930e      	str	r3, [sp, #56]	; 0x38
  404256:	2500      	movs	r5, #0
  404258:	f01b 0f01 	tst.w	fp, #1
  40425c:	f000 8322 	beq.w	4048a4 <_vfprintf_r+0xbc8>
  404260:	ea54 0305 	orrs.w	r3, r4, r5
  404264:	f000 831e 	beq.w	4048a4 <_vfprintf_r+0xbc8>
  404268:	2330      	movs	r3, #48	; 0x30
  40426a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40426e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404272:	f04b 0b02 	orr.w	fp, fp, #2
  404276:	2302      	movs	r3, #2
  404278:	e63c      	b.n	403ef4 <_vfprintf_r+0x218>
  40427a:	f04b 0b20 	orr.w	fp, fp, #32
  40427e:	f899 6000 	ldrb.w	r6, [r9]
  404282:	e5aa      	b.n	403dda <_vfprintf_r+0xfe>
  404284:	004087a4 	.word	0x004087a4
  404288:	004087b4 	.word	0x004087b4
  40428c:	00408784 	.word	0x00408784
  404290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404292:	6817      	ldr	r7, [r2, #0]
  404294:	2400      	movs	r4, #0
  404296:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40429a:	1d15      	adds	r5, r2, #4
  40429c:	2f00      	cmp	r7, #0
  40429e:	f000 864e 	beq.w	404f3e <_vfprintf_r+0x1262>
  4042a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4042a4:	1c53      	adds	r3, r2, #1
  4042a6:	f000 85cc 	beq.w	404e42 <_vfprintf_r+0x1166>
  4042aa:	4621      	mov	r1, r4
  4042ac:	4638      	mov	r0, r7
  4042ae:	f002 fce7 	bl	406c80 <memchr>
  4042b2:	2800      	cmp	r0, #0
  4042b4:	f000 8697 	beq.w	404fe6 <_vfprintf_r+0x130a>
  4042b8:	1bc3      	subs	r3, r0, r7
  4042ba:	930d      	str	r3, [sp, #52]	; 0x34
  4042bc:	9409      	str	r4, [sp, #36]	; 0x24
  4042be:	950e      	str	r5, [sp, #56]	; 0x38
  4042c0:	f8cd b018 	str.w	fp, [sp, #24]
  4042c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4042c8:	9307      	str	r3, [sp, #28]
  4042ca:	9410      	str	r4, [sp, #64]	; 0x40
  4042cc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4042d0:	e636      	b.n	403f40 <_vfprintf_r+0x264>
  4042d2:	2a00      	cmp	r2, #0
  4042d4:	f040 8796 	bne.w	405204 <_vfprintf_r+0x1528>
  4042d8:	f01b 0f20 	tst.w	fp, #32
  4042dc:	f040 845a 	bne.w	404b94 <_vfprintf_r+0xeb8>
  4042e0:	f01b 0f10 	tst.w	fp, #16
  4042e4:	f040 83a2 	bne.w	404a2c <_vfprintf_r+0xd50>
  4042e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4042ec:	f000 839e 	beq.w	404a2c <_vfprintf_r+0xd50>
  4042f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4042f2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4042f6:	3104      	adds	r1, #4
  4042f8:	17e5      	asrs	r5, r4, #31
  4042fa:	4622      	mov	r2, r4
  4042fc:	462b      	mov	r3, r5
  4042fe:	910e      	str	r1, [sp, #56]	; 0x38
  404300:	2a00      	cmp	r2, #0
  404302:	f173 0300 	sbcs.w	r3, r3, #0
  404306:	f2c0 8487 	blt.w	404c18 <_vfprintf_r+0xf3c>
  40430a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40430c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404310:	1c4a      	adds	r2, r1, #1
  404312:	f04f 0301 	mov.w	r3, #1
  404316:	f47f adf5 	bne.w	403f04 <_vfprintf_r+0x228>
  40431a:	ea54 0205 	orrs.w	r2, r4, r5
  40431e:	f000 826c 	beq.w	4047fa <_vfprintf_r+0xb1e>
  404322:	f8cd b018 	str.w	fp, [sp, #24]
  404326:	2b01      	cmp	r3, #1
  404328:	f000 8308 	beq.w	40493c <_vfprintf_r+0xc60>
  40432c:	2b02      	cmp	r3, #2
  40432e:	f040 8295 	bne.w	40485c <_vfprintf_r+0xb80>
  404332:	9818      	ldr	r0, [sp, #96]	; 0x60
  404334:	af30      	add	r7, sp, #192	; 0xc0
  404336:	0923      	lsrs	r3, r4, #4
  404338:	f004 010f 	and.w	r1, r4, #15
  40433c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404340:	092a      	lsrs	r2, r5, #4
  404342:	461c      	mov	r4, r3
  404344:	4615      	mov	r5, r2
  404346:	5c43      	ldrb	r3, [r0, r1]
  404348:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40434c:	ea54 0305 	orrs.w	r3, r4, r5
  404350:	d1f1      	bne.n	404336 <_vfprintf_r+0x65a>
  404352:	ab30      	add	r3, sp, #192	; 0xc0
  404354:	1bdb      	subs	r3, r3, r7
  404356:	930d      	str	r3, [sp, #52]	; 0x34
  404358:	e5ea      	b.n	403f30 <_vfprintf_r+0x254>
  40435a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40435e:	f899 6000 	ldrb.w	r6, [r9]
  404362:	e53a      	b.n	403dda <_vfprintf_r+0xfe>
  404364:	f899 6000 	ldrb.w	r6, [r9]
  404368:	2e6c      	cmp	r6, #108	; 0x6c
  40436a:	bf03      	ittte	eq
  40436c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  404370:	f04b 0b20 	orreq.w	fp, fp, #32
  404374:	f109 0901 	addeq.w	r9, r9, #1
  404378:	f04b 0b10 	orrne.w	fp, fp, #16
  40437c:	e52d      	b.n	403dda <_vfprintf_r+0xfe>
  40437e:	2a00      	cmp	r2, #0
  404380:	f040 874c 	bne.w	40521c <_vfprintf_r+0x1540>
  404384:	f01b 0f20 	tst.w	fp, #32
  404388:	f040 853f 	bne.w	404e0a <_vfprintf_r+0x112e>
  40438c:	f01b 0f10 	tst.w	fp, #16
  404390:	f040 80fc 	bne.w	40458c <_vfprintf_r+0x8b0>
  404394:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404398:	f000 80f8 	beq.w	40458c <_vfprintf_r+0x8b0>
  40439c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40439e:	6813      	ldr	r3, [r2, #0]
  4043a0:	3204      	adds	r2, #4
  4043a2:	920e      	str	r2, [sp, #56]	; 0x38
  4043a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4043a8:	801a      	strh	r2, [r3, #0]
  4043aa:	e4e3      	b.n	403d74 <_vfprintf_r+0x98>
  4043ac:	f899 6000 	ldrb.w	r6, [r9]
  4043b0:	2900      	cmp	r1, #0
  4043b2:	f47f ad12 	bne.w	403dda <_vfprintf_r+0xfe>
  4043b6:	2201      	movs	r2, #1
  4043b8:	2120      	movs	r1, #32
  4043ba:	e50e      	b.n	403dda <_vfprintf_r+0xfe>
  4043bc:	f899 6000 	ldrb.w	r6, [r9]
  4043c0:	2e2a      	cmp	r6, #42	; 0x2a
  4043c2:	f109 0001 	add.w	r0, r9, #1
  4043c6:	f000 86f1 	beq.w	4051ac <_vfprintf_r+0x14d0>
  4043ca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4043ce:	2b09      	cmp	r3, #9
  4043d0:	4681      	mov	r9, r0
  4043d2:	bf98      	it	ls
  4043d4:	2000      	movls	r0, #0
  4043d6:	f200 863d 	bhi.w	405054 <_vfprintf_r+0x1378>
  4043da:	f819 6b01 	ldrb.w	r6, [r9], #1
  4043de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4043e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4043e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4043ea:	2b09      	cmp	r3, #9
  4043ec:	d9f5      	bls.n	4043da <_vfprintf_r+0x6fe>
  4043ee:	9009      	str	r0, [sp, #36]	; 0x24
  4043f0:	e4f5      	b.n	403dde <_vfprintf_r+0x102>
  4043f2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4043f6:	f899 6000 	ldrb.w	r6, [r9]
  4043fa:	e4ee      	b.n	403dda <_vfprintf_r+0xfe>
  4043fc:	f899 6000 	ldrb.w	r6, [r9]
  404400:	2201      	movs	r2, #1
  404402:	212b      	movs	r1, #43	; 0x2b
  404404:	e4e9      	b.n	403dda <_vfprintf_r+0xfe>
  404406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404408:	4bae      	ldr	r3, [pc, #696]	; (4046c4 <_vfprintf_r+0x9e8>)
  40440a:	6814      	ldr	r4, [r2, #0]
  40440c:	9318      	str	r3, [sp, #96]	; 0x60
  40440e:	2678      	movs	r6, #120	; 0x78
  404410:	2330      	movs	r3, #48	; 0x30
  404412:	3204      	adds	r2, #4
  404414:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404418:	f04b 0b02 	orr.w	fp, fp, #2
  40441c:	920e      	str	r2, [sp, #56]	; 0x38
  40441e:	2500      	movs	r5, #0
  404420:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404424:	2302      	movs	r3, #2
  404426:	e565      	b.n	403ef4 <_vfprintf_r+0x218>
  404428:	2a00      	cmp	r2, #0
  40442a:	f040 86e4 	bne.w	4051f6 <_vfprintf_r+0x151a>
  40442e:	4ba6      	ldr	r3, [pc, #664]	; (4046c8 <_vfprintf_r+0x9ec>)
  404430:	9318      	str	r3, [sp, #96]	; 0x60
  404432:	e6ff      	b.n	404234 <_vfprintf_r+0x558>
  404434:	990e      	ldr	r1, [sp, #56]	; 0x38
  404436:	f8cd b018 	str.w	fp, [sp, #24]
  40443a:	680a      	ldr	r2, [r1, #0]
  40443c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404440:	2300      	movs	r3, #0
  404442:	460a      	mov	r2, r1
  404444:	469a      	mov	sl, r3
  404446:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40444a:	3204      	adds	r2, #4
  40444c:	2301      	movs	r3, #1
  40444e:	9307      	str	r3, [sp, #28]
  404450:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  404454:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  404458:	920e      	str	r2, [sp, #56]	; 0x38
  40445a:	930d      	str	r3, [sp, #52]	; 0x34
  40445c:	af26      	add	r7, sp, #152	; 0x98
  40445e:	e575      	b.n	403f4c <_vfprintf_r+0x270>
  404460:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404464:	2000      	movs	r0, #0
  404466:	f819 6b01 	ldrb.w	r6, [r9], #1
  40446a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40446e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  404472:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404476:	2b09      	cmp	r3, #9
  404478:	d9f5      	bls.n	404466 <_vfprintf_r+0x78a>
  40447a:	900c      	str	r0, [sp, #48]	; 0x30
  40447c:	e4af      	b.n	403dde <_vfprintf_r+0x102>
  40447e:	2a00      	cmp	r2, #0
  404480:	f040 86c8 	bne.w	405214 <_vfprintf_r+0x1538>
  404484:	f04b 0b10 	orr.w	fp, fp, #16
  404488:	e726      	b.n	4042d8 <_vfprintf_r+0x5fc>
  40448a:	f04b 0b01 	orr.w	fp, fp, #1
  40448e:	f899 6000 	ldrb.w	r6, [r9]
  404492:	e4a2      	b.n	403dda <_vfprintf_r+0xfe>
  404494:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404496:	6823      	ldr	r3, [r4, #0]
  404498:	930c      	str	r3, [sp, #48]	; 0x30
  40449a:	4618      	mov	r0, r3
  40449c:	2800      	cmp	r0, #0
  40449e:	4623      	mov	r3, r4
  4044a0:	f103 0304 	add.w	r3, r3, #4
  4044a4:	f6ff aeb8 	blt.w	404218 <_vfprintf_r+0x53c>
  4044a8:	930e      	str	r3, [sp, #56]	; 0x38
  4044aa:	f899 6000 	ldrb.w	r6, [r9]
  4044ae:	e494      	b.n	403dda <_vfprintf_r+0xfe>
  4044b0:	2a00      	cmp	r2, #0
  4044b2:	f040 86b7 	bne.w	405224 <_vfprintf_r+0x1548>
  4044b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4044b8:	3507      	adds	r5, #7
  4044ba:	f025 0307 	bic.w	r3, r5, #7
  4044be:	f103 0208 	add.w	r2, r3, #8
  4044c2:	920e      	str	r2, [sp, #56]	; 0x38
  4044c4:	681a      	ldr	r2, [r3, #0]
  4044c6:	9213      	str	r2, [sp, #76]	; 0x4c
  4044c8:	685b      	ldr	r3, [r3, #4]
  4044ca:	9312      	str	r3, [sp, #72]	; 0x48
  4044cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4044ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4044d0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4044d4:	4628      	mov	r0, r5
  4044d6:	4621      	mov	r1, r4
  4044d8:	f04f 32ff 	mov.w	r2, #4294967295
  4044dc:	4b7b      	ldr	r3, [pc, #492]	; (4046cc <_vfprintf_r+0x9f0>)
  4044de:	f003 fef1 	bl	4082c4 <__aeabi_dcmpun>
  4044e2:	2800      	cmp	r0, #0
  4044e4:	f040 83a2 	bne.w	404c2c <_vfprintf_r+0xf50>
  4044e8:	4628      	mov	r0, r5
  4044ea:	4621      	mov	r1, r4
  4044ec:	f04f 32ff 	mov.w	r2, #4294967295
  4044f0:	4b76      	ldr	r3, [pc, #472]	; (4046cc <_vfprintf_r+0x9f0>)
  4044f2:	f003 fec9 	bl	408288 <__aeabi_dcmple>
  4044f6:	2800      	cmp	r0, #0
  4044f8:	f040 8398 	bne.w	404c2c <_vfprintf_r+0xf50>
  4044fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4044fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404502:	9912      	ldr	r1, [sp, #72]	; 0x48
  404504:	f003 feb6 	bl	408274 <__aeabi_dcmplt>
  404508:	2800      	cmp	r0, #0
  40450a:	f040 8435 	bne.w	404d78 <_vfprintf_r+0x109c>
  40450e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404512:	4f6f      	ldr	r7, [pc, #444]	; (4046d0 <_vfprintf_r+0x9f4>)
  404514:	4b6f      	ldr	r3, [pc, #444]	; (4046d4 <_vfprintf_r+0x9f8>)
  404516:	2203      	movs	r2, #3
  404518:	2100      	movs	r1, #0
  40451a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40451e:	9207      	str	r2, [sp, #28]
  404520:	9109      	str	r1, [sp, #36]	; 0x24
  404522:	9006      	str	r0, [sp, #24]
  404524:	2e47      	cmp	r6, #71	; 0x47
  404526:	bfd8      	it	le
  404528:	461f      	movle	r7, r3
  40452a:	920d      	str	r2, [sp, #52]	; 0x34
  40452c:	9110      	str	r1, [sp, #64]	; 0x40
  40452e:	e507      	b.n	403f40 <_vfprintf_r+0x264>
  404530:	f04b 0b08 	orr.w	fp, fp, #8
  404534:	f899 6000 	ldrb.w	r6, [r9]
  404538:	e44f      	b.n	403dda <_vfprintf_r+0xfe>
  40453a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40453c:	3507      	adds	r5, #7
  40453e:	f025 0307 	bic.w	r3, r5, #7
  404542:	f103 0208 	add.w	r2, r3, #8
  404546:	e9d3 4500 	ldrd	r4, r5, [r3]
  40454a:	920e      	str	r2, [sp, #56]	; 0x38
  40454c:	2300      	movs	r3, #0
  40454e:	e4d1      	b.n	403ef4 <_vfprintf_r+0x218>
  404550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404552:	3507      	adds	r5, #7
  404554:	f025 0307 	bic.w	r3, r5, #7
  404558:	f103 0208 	add.w	r2, r3, #8
  40455c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404560:	920e      	str	r2, [sp, #56]	; 0x38
  404562:	2301      	movs	r3, #1
  404564:	e4c6      	b.n	403ef4 <_vfprintf_r+0x218>
  404566:	2a00      	cmp	r2, #0
  404568:	f040 8650 	bne.w	40520c <_vfprintf_r+0x1530>
  40456c:	b1c6      	cbz	r6, 4045a0 <_vfprintf_r+0x8c4>
  40456e:	2300      	movs	r3, #0
  404570:	2201      	movs	r2, #1
  404572:	469a      	mov	sl, r3
  404574:	9207      	str	r2, [sp, #28]
  404576:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40457a:	f8cd b018 	str.w	fp, [sp, #24]
  40457e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404582:	9309      	str	r3, [sp, #36]	; 0x24
  404584:	9310      	str	r3, [sp, #64]	; 0x40
  404586:	920d      	str	r2, [sp, #52]	; 0x34
  404588:	af26      	add	r7, sp, #152	; 0x98
  40458a:	e4df      	b.n	403f4c <_vfprintf_r+0x270>
  40458c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40458e:	6813      	ldr	r3, [r2, #0]
  404590:	3204      	adds	r2, #4
  404592:	920e      	str	r2, [sp, #56]	; 0x38
  404594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404596:	601a      	str	r2, [r3, #0]
  404598:	f7ff bbec 	b.w	403d74 <_vfprintf_r+0x98>
  40459c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40459e:	e527      	b.n	403ff0 <_vfprintf_r+0x314>
  4045a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4045a2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4045a6:	2b00      	cmp	r3, #0
  4045a8:	f040 8594 	bne.w	4050d4 <_vfprintf_r+0x13f8>
  4045ac:	2300      	movs	r3, #0
  4045ae:	9324      	str	r3, [sp, #144]	; 0x90
  4045b0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4045b4:	f013 0f01 	tst.w	r3, #1
  4045b8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4045bc:	d102      	bne.n	4045c4 <_vfprintf_r+0x8e8>
  4045be:	059a      	lsls	r2, r3, #22
  4045c0:	f140 8249 	bpl.w	404a56 <_vfprintf_r+0xd7a>
  4045c4:	065b      	lsls	r3, r3, #25
  4045c6:	f53f adec 	bmi.w	4041a2 <_vfprintf_r+0x4c6>
  4045ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4045cc:	b041      	add	sp, #260	; 0x104
  4045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045d2:	2e65      	cmp	r6, #101	; 0x65
  4045d4:	f340 80b2 	ble.w	40473c <_vfprintf_r+0xa60>
  4045d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4045da:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4045dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4045de:	9912      	ldr	r1, [sp, #72]	; 0x48
  4045e0:	f003 fe3e 	bl	408260 <__aeabi_dcmpeq>
  4045e4:	2800      	cmp	r0, #0
  4045e6:	f000 8160 	beq.w	4048aa <_vfprintf_r+0xbce>
  4045ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045ec:	4a3a      	ldr	r2, [pc, #232]	; (4046d8 <_vfprintf_r+0x9fc>)
  4045ee:	f8c8 2000 	str.w	r2, [r8]
  4045f2:	3301      	adds	r3, #1
  4045f4:	3401      	adds	r4, #1
  4045f6:	2201      	movs	r2, #1
  4045f8:	2b07      	cmp	r3, #7
  4045fa:	9425      	str	r4, [sp, #148]	; 0x94
  4045fc:	9324      	str	r3, [sp, #144]	; 0x90
  4045fe:	f8c8 2004 	str.w	r2, [r8, #4]
  404602:	f300 83bf 	bgt.w	404d84 <_vfprintf_r+0x10a8>
  404606:	f108 0808 	add.w	r8, r8, #8
  40460a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40460c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40460e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404610:	4293      	cmp	r3, r2
  404612:	db03      	blt.n	40461c <_vfprintf_r+0x940>
  404614:	9b06      	ldr	r3, [sp, #24]
  404616:	07df      	lsls	r7, r3, #31
  404618:	f57f ad65 	bpl.w	4040e6 <_vfprintf_r+0x40a>
  40461c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40461e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404620:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404622:	f8c8 2000 	str.w	r2, [r8]
  404626:	3301      	adds	r3, #1
  404628:	440c      	add	r4, r1
  40462a:	2b07      	cmp	r3, #7
  40462c:	f8c8 1004 	str.w	r1, [r8, #4]
  404630:	9425      	str	r4, [sp, #148]	; 0x94
  404632:	9324      	str	r3, [sp, #144]	; 0x90
  404634:	f300 83f8 	bgt.w	404e28 <_vfprintf_r+0x114c>
  404638:	f108 0808 	add.w	r8, r8, #8
  40463c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40463e:	1e5e      	subs	r6, r3, #1
  404640:	2e00      	cmp	r6, #0
  404642:	f77f ad50 	ble.w	4040e6 <_vfprintf_r+0x40a>
  404646:	2e10      	cmp	r6, #16
  404648:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40464a:	4d24      	ldr	r5, [pc, #144]	; (4046dc <_vfprintf_r+0xa00>)
  40464c:	f340 81dd 	ble.w	404a0a <_vfprintf_r+0xd2e>
  404650:	2710      	movs	r7, #16
  404652:	f8dd a020 	ldr.w	sl, [sp, #32]
  404656:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40465a:	e005      	b.n	404668 <_vfprintf_r+0x98c>
  40465c:	f108 0808 	add.w	r8, r8, #8
  404660:	3e10      	subs	r6, #16
  404662:	2e10      	cmp	r6, #16
  404664:	f340 81d1 	ble.w	404a0a <_vfprintf_r+0xd2e>
  404668:	3301      	adds	r3, #1
  40466a:	3410      	adds	r4, #16
  40466c:	2b07      	cmp	r3, #7
  40466e:	9425      	str	r4, [sp, #148]	; 0x94
  404670:	9324      	str	r3, [sp, #144]	; 0x90
  404672:	e888 00a0 	stmia.w	r8, {r5, r7}
  404676:	ddf1      	ble.n	40465c <_vfprintf_r+0x980>
  404678:	aa23      	add	r2, sp, #140	; 0x8c
  40467a:	4659      	mov	r1, fp
  40467c:	4650      	mov	r0, sl
  40467e:	f003 f8d7 	bl	407830 <__sprint_r>
  404682:	2800      	cmp	r0, #0
  404684:	f040 83cd 	bne.w	404e22 <_vfprintf_r+0x1146>
  404688:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40468a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40468c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404690:	e7e6      	b.n	404660 <_vfprintf_r+0x984>
  404692:	46aa      	mov	sl, r5
  404694:	e78c      	b.n	4045b0 <_vfprintf_r+0x8d4>
  404696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404698:	9a07      	ldr	r2, [sp, #28]
  40469a:	eba3 0a02 	sub.w	sl, r3, r2
  40469e:	f1ba 0f00 	cmp.w	sl, #0
  4046a2:	f77f acca 	ble.w	40403a <_vfprintf_r+0x35e>
  4046a6:	f1ba 0f10 	cmp.w	sl, #16
  4046aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046ac:	4d0b      	ldr	r5, [pc, #44]	; (4046dc <_vfprintf_r+0xa00>)
  4046ae:	dd39      	ble.n	404724 <_vfprintf_r+0xa48>
  4046b0:	4642      	mov	r2, r8
  4046b2:	4621      	mov	r1, r4
  4046b4:	46b0      	mov	r8, r6
  4046b6:	f04f 0b10 	mov.w	fp, #16
  4046ba:	462e      	mov	r6, r5
  4046bc:	9c08      	ldr	r4, [sp, #32]
  4046be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4046c0:	e015      	b.n	4046ee <_vfprintf_r+0xa12>
  4046c2:	bf00      	nop
  4046c4:	00408784 	.word	0x00408784
  4046c8:	00408770 	.word	0x00408770
  4046cc:	7fefffff 	.word	0x7fefffff
  4046d0:	00408764 	.word	0x00408764
  4046d4:	00408760 	.word	0x00408760
  4046d8:	004087a0 	.word	0x004087a0
  4046dc:	004087b4 	.word	0x004087b4
  4046e0:	f1aa 0a10 	sub.w	sl, sl, #16
  4046e4:	f1ba 0f10 	cmp.w	sl, #16
  4046e8:	f102 0208 	add.w	r2, r2, #8
  4046ec:	dd16      	ble.n	40471c <_vfprintf_r+0xa40>
  4046ee:	3301      	adds	r3, #1
  4046f0:	3110      	adds	r1, #16
  4046f2:	2b07      	cmp	r3, #7
  4046f4:	9125      	str	r1, [sp, #148]	; 0x94
  4046f6:	9324      	str	r3, [sp, #144]	; 0x90
  4046f8:	e882 0840 	stmia.w	r2, {r6, fp}
  4046fc:	ddf0      	ble.n	4046e0 <_vfprintf_r+0xa04>
  4046fe:	aa23      	add	r2, sp, #140	; 0x8c
  404700:	4629      	mov	r1, r5
  404702:	4620      	mov	r0, r4
  404704:	f003 f894 	bl	407830 <__sprint_r>
  404708:	2800      	cmp	r0, #0
  40470a:	d1c2      	bne.n	404692 <_vfprintf_r+0x9b6>
  40470c:	f1aa 0a10 	sub.w	sl, sl, #16
  404710:	f1ba 0f10 	cmp.w	sl, #16
  404714:	9925      	ldr	r1, [sp, #148]	; 0x94
  404716:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404718:	aa30      	add	r2, sp, #192	; 0xc0
  40471a:	dce8      	bgt.n	4046ee <_vfprintf_r+0xa12>
  40471c:	4635      	mov	r5, r6
  40471e:	460c      	mov	r4, r1
  404720:	4646      	mov	r6, r8
  404722:	4690      	mov	r8, r2
  404724:	3301      	adds	r3, #1
  404726:	4454      	add	r4, sl
  404728:	2b07      	cmp	r3, #7
  40472a:	9425      	str	r4, [sp, #148]	; 0x94
  40472c:	9324      	str	r3, [sp, #144]	; 0x90
  40472e:	e888 0420 	stmia.w	r8, {r5, sl}
  404732:	f300 8264 	bgt.w	404bfe <_vfprintf_r+0xf22>
  404736:	f108 0808 	add.w	r8, r8, #8
  40473a:	e47e      	b.n	40403a <_vfprintf_r+0x35e>
  40473c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40473e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404740:	2b01      	cmp	r3, #1
  404742:	f340 81fd 	ble.w	404b40 <_vfprintf_r+0xe64>
  404746:	3601      	adds	r6, #1
  404748:	3401      	adds	r4, #1
  40474a:	2301      	movs	r3, #1
  40474c:	2e07      	cmp	r6, #7
  40474e:	9425      	str	r4, [sp, #148]	; 0x94
  404750:	9624      	str	r6, [sp, #144]	; 0x90
  404752:	f8c8 7000 	str.w	r7, [r8]
  404756:	f8c8 3004 	str.w	r3, [r8, #4]
  40475a:	f300 820e 	bgt.w	404b7a <_vfprintf_r+0xe9e>
  40475e:	f108 0808 	add.w	r8, r8, #8
  404762:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404764:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404766:	f8c8 3000 	str.w	r3, [r8]
  40476a:	3601      	adds	r6, #1
  40476c:	4414      	add	r4, r2
  40476e:	2e07      	cmp	r6, #7
  404770:	9425      	str	r4, [sp, #148]	; 0x94
  404772:	9624      	str	r6, [sp, #144]	; 0x90
  404774:	f8c8 2004 	str.w	r2, [r8, #4]
  404778:	f300 822e 	bgt.w	404bd8 <_vfprintf_r+0xefc>
  40477c:	f108 0808 	add.w	r8, r8, #8
  404780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404782:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404784:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404786:	9912      	ldr	r1, [sp, #72]	; 0x48
  404788:	f003 fd6a 	bl	408260 <__aeabi_dcmpeq>
  40478c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40478e:	2800      	cmp	r0, #0
  404790:	f040 8106 	bne.w	4049a0 <_vfprintf_r+0xcc4>
  404794:	3b01      	subs	r3, #1
  404796:	3601      	adds	r6, #1
  404798:	3701      	adds	r7, #1
  40479a:	441c      	add	r4, r3
  40479c:	2e07      	cmp	r6, #7
  40479e:	9624      	str	r6, [sp, #144]	; 0x90
  4047a0:	9425      	str	r4, [sp, #148]	; 0x94
  4047a2:	f8c8 7000 	str.w	r7, [r8]
  4047a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4047aa:	f300 81d9 	bgt.w	404b60 <_vfprintf_r+0xe84>
  4047ae:	f108 0808 	add.w	r8, r8, #8
  4047b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4047b8:	3601      	adds	r6, #1
  4047ba:	4414      	add	r4, r2
  4047bc:	ab1f      	add	r3, sp, #124	; 0x7c
  4047be:	2e07      	cmp	r6, #7
  4047c0:	9425      	str	r4, [sp, #148]	; 0x94
  4047c2:	9624      	str	r6, [sp, #144]	; 0x90
  4047c4:	f8c8 3000 	str.w	r3, [r8]
  4047c8:	f77f ac8b 	ble.w	4040e2 <_vfprintf_r+0x406>
  4047cc:	aa23      	add	r2, sp, #140	; 0x8c
  4047ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4047d0:	9808      	ldr	r0, [sp, #32]
  4047d2:	f003 f82d 	bl	407830 <__sprint_r>
  4047d6:	b958      	cbnz	r0, 4047f0 <_vfprintf_r+0xb14>
  4047d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4047da:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4047de:	e482      	b.n	4040e6 <_vfprintf_r+0x40a>
  4047e0:	aa23      	add	r2, sp, #140	; 0x8c
  4047e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4047e4:	9808      	ldr	r0, [sp, #32]
  4047e6:	f003 f823 	bl	407830 <__sprint_r>
  4047ea:	2800      	cmp	r0, #0
  4047ec:	f43f acc5 	beq.w	40417a <_vfprintf_r+0x49e>
  4047f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4047f4:	e6dc      	b.n	4045b0 <_vfprintf_r+0x8d4>
  4047f6:	f8dd b018 	ldr.w	fp, [sp, #24]
  4047fa:	2b01      	cmp	r3, #1
  4047fc:	f000 8121 	beq.w	404a42 <_vfprintf_r+0xd66>
  404800:	2b02      	cmp	r3, #2
  404802:	d127      	bne.n	404854 <_vfprintf_r+0xb78>
  404804:	f8cd b018 	str.w	fp, [sp, #24]
  404808:	2400      	movs	r4, #0
  40480a:	2500      	movs	r5, #0
  40480c:	e591      	b.n	404332 <_vfprintf_r+0x656>
  40480e:	aa23      	add	r2, sp, #140	; 0x8c
  404810:	990a      	ldr	r1, [sp, #40]	; 0x28
  404812:	9808      	ldr	r0, [sp, #32]
  404814:	f003 f80c 	bl	407830 <__sprint_r>
  404818:	2800      	cmp	r0, #0
  40481a:	d1e9      	bne.n	4047f0 <_vfprintf_r+0xb14>
  40481c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40481e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404822:	e44d      	b.n	4040c0 <_vfprintf_r+0x3e4>
  404824:	aa23      	add	r2, sp, #140	; 0x8c
  404826:	990a      	ldr	r1, [sp, #40]	; 0x28
  404828:	9808      	ldr	r0, [sp, #32]
  40482a:	f003 f801 	bl	407830 <__sprint_r>
  40482e:	2800      	cmp	r0, #0
  404830:	d1de      	bne.n	4047f0 <_vfprintf_r+0xb14>
  404832:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404834:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404838:	f7ff bbec 	b.w	404014 <_vfprintf_r+0x338>
  40483c:	aa23      	add	r2, sp, #140	; 0x8c
  40483e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404840:	9808      	ldr	r0, [sp, #32]
  404842:	f002 fff5 	bl	407830 <__sprint_r>
  404846:	2800      	cmp	r0, #0
  404848:	d1d2      	bne.n	4047f0 <_vfprintf_r+0xb14>
  40484a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40484c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404850:	f7ff bbf0 	b.w	404034 <_vfprintf_r+0x358>
  404854:	f8cd b018 	str.w	fp, [sp, #24]
  404858:	2400      	movs	r4, #0
  40485a:	2500      	movs	r5, #0
  40485c:	a930      	add	r1, sp, #192	; 0xc0
  40485e:	e000      	b.n	404862 <_vfprintf_r+0xb86>
  404860:	4639      	mov	r1, r7
  404862:	08e2      	lsrs	r2, r4, #3
  404864:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404868:	08e8      	lsrs	r0, r5, #3
  40486a:	f004 0307 	and.w	r3, r4, #7
  40486e:	4605      	mov	r5, r0
  404870:	4614      	mov	r4, r2
  404872:	3330      	adds	r3, #48	; 0x30
  404874:	ea54 0205 	orrs.w	r2, r4, r5
  404878:	f801 3c01 	strb.w	r3, [r1, #-1]
  40487c:	f101 37ff 	add.w	r7, r1, #4294967295
  404880:	d1ee      	bne.n	404860 <_vfprintf_r+0xb84>
  404882:	9a06      	ldr	r2, [sp, #24]
  404884:	07d2      	lsls	r2, r2, #31
  404886:	f57f ad64 	bpl.w	404352 <_vfprintf_r+0x676>
  40488a:	2b30      	cmp	r3, #48	; 0x30
  40488c:	f43f ad61 	beq.w	404352 <_vfprintf_r+0x676>
  404890:	2330      	movs	r3, #48	; 0x30
  404892:	3902      	subs	r1, #2
  404894:	f807 3c01 	strb.w	r3, [r7, #-1]
  404898:	ab30      	add	r3, sp, #192	; 0xc0
  40489a:	1a5b      	subs	r3, r3, r1
  40489c:	930d      	str	r3, [sp, #52]	; 0x34
  40489e:	460f      	mov	r7, r1
  4048a0:	f7ff bb46 	b.w	403f30 <_vfprintf_r+0x254>
  4048a4:	2302      	movs	r3, #2
  4048a6:	f7ff bb25 	b.w	403ef4 <_vfprintf_r+0x218>
  4048aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4048ac:	2900      	cmp	r1, #0
  4048ae:	f340 8274 	ble.w	404d9a <_vfprintf_r+0x10be>
  4048b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4048b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048b6:	4293      	cmp	r3, r2
  4048b8:	bfa8      	it	ge
  4048ba:	4613      	movge	r3, r2
  4048bc:	2b00      	cmp	r3, #0
  4048be:	461e      	mov	r6, r3
  4048c0:	dd0d      	ble.n	4048de <_vfprintf_r+0xc02>
  4048c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048c4:	f8c8 7000 	str.w	r7, [r8]
  4048c8:	3301      	adds	r3, #1
  4048ca:	4434      	add	r4, r6
  4048cc:	2b07      	cmp	r3, #7
  4048ce:	9425      	str	r4, [sp, #148]	; 0x94
  4048d0:	f8c8 6004 	str.w	r6, [r8, #4]
  4048d4:	9324      	str	r3, [sp, #144]	; 0x90
  4048d6:	f300 8324 	bgt.w	404f22 <_vfprintf_r+0x1246>
  4048da:	f108 0808 	add.w	r8, r8, #8
  4048de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4048e0:	2e00      	cmp	r6, #0
  4048e2:	bfa8      	it	ge
  4048e4:	1b9b      	subge	r3, r3, r6
  4048e6:	2b00      	cmp	r3, #0
  4048e8:	461e      	mov	r6, r3
  4048ea:	f340 80d0 	ble.w	404a8e <_vfprintf_r+0xdb2>
  4048ee:	2e10      	cmp	r6, #16
  4048f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048f2:	4dc0      	ldr	r5, [pc, #768]	; (404bf4 <_vfprintf_r+0xf18>)
  4048f4:	f340 80b7 	ble.w	404a66 <_vfprintf_r+0xd8a>
  4048f8:	4622      	mov	r2, r4
  4048fa:	f04f 0a10 	mov.w	sl, #16
  4048fe:	f8dd b020 	ldr.w	fp, [sp, #32]
  404902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404904:	e005      	b.n	404912 <_vfprintf_r+0xc36>
  404906:	f108 0808 	add.w	r8, r8, #8
  40490a:	3e10      	subs	r6, #16
  40490c:	2e10      	cmp	r6, #16
  40490e:	f340 80a9 	ble.w	404a64 <_vfprintf_r+0xd88>
  404912:	3301      	adds	r3, #1
  404914:	3210      	adds	r2, #16
  404916:	2b07      	cmp	r3, #7
  404918:	9225      	str	r2, [sp, #148]	; 0x94
  40491a:	9324      	str	r3, [sp, #144]	; 0x90
  40491c:	e888 0420 	stmia.w	r8, {r5, sl}
  404920:	ddf1      	ble.n	404906 <_vfprintf_r+0xc2a>
  404922:	aa23      	add	r2, sp, #140	; 0x8c
  404924:	4621      	mov	r1, r4
  404926:	4658      	mov	r0, fp
  404928:	f002 ff82 	bl	407830 <__sprint_r>
  40492c:	2800      	cmp	r0, #0
  40492e:	f040 8324 	bne.w	404f7a <_vfprintf_r+0x129e>
  404932:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404934:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404936:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40493a:	e7e6      	b.n	40490a <_vfprintf_r+0xc2e>
  40493c:	2d00      	cmp	r5, #0
  40493e:	bf08      	it	eq
  404940:	2c0a      	cmpeq	r4, #10
  404942:	d37c      	bcc.n	404a3e <_vfprintf_r+0xd62>
  404944:	af30      	add	r7, sp, #192	; 0xc0
  404946:	4620      	mov	r0, r4
  404948:	4629      	mov	r1, r5
  40494a:	220a      	movs	r2, #10
  40494c:	2300      	movs	r3, #0
  40494e:	f003 fcf7 	bl	408340 <__aeabi_uldivmod>
  404952:	3230      	adds	r2, #48	; 0x30
  404954:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404958:	4620      	mov	r0, r4
  40495a:	4629      	mov	r1, r5
  40495c:	2300      	movs	r3, #0
  40495e:	220a      	movs	r2, #10
  404960:	f003 fcee 	bl	408340 <__aeabi_uldivmod>
  404964:	4604      	mov	r4, r0
  404966:	460d      	mov	r5, r1
  404968:	ea54 0305 	orrs.w	r3, r4, r5
  40496c:	d1eb      	bne.n	404946 <_vfprintf_r+0xc6a>
  40496e:	ab30      	add	r3, sp, #192	; 0xc0
  404970:	1bdb      	subs	r3, r3, r7
  404972:	930d      	str	r3, [sp, #52]	; 0x34
  404974:	f7ff badc 	b.w	403f30 <_vfprintf_r+0x254>
  404978:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40497a:	930d      	str	r3, [sp, #52]	; 0x34
  40497c:	af30      	add	r7, sp, #192	; 0xc0
  40497e:	f7ff bad7 	b.w	403f30 <_vfprintf_r+0x254>
  404982:	aa23      	add	r2, sp, #140	; 0x8c
  404984:	990a      	ldr	r1, [sp, #40]	; 0x28
  404986:	9808      	ldr	r0, [sp, #32]
  404988:	f002 ff52 	bl	407830 <__sprint_r>
  40498c:	2800      	cmp	r0, #0
  40498e:	f47f af2f 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404992:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404996:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404998:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40499c:	f7ff bb28 	b.w	403ff0 <_vfprintf_r+0x314>
  4049a0:	1e5f      	subs	r7, r3, #1
  4049a2:	2f00      	cmp	r7, #0
  4049a4:	f77f af05 	ble.w	4047b2 <_vfprintf_r+0xad6>
  4049a8:	2f10      	cmp	r7, #16
  4049aa:	4d92      	ldr	r5, [pc, #584]	; (404bf4 <_vfprintf_r+0xf18>)
  4049ac:	f340 810a 	ble.w	404bc4 <_vfprintf_r+0xee8>
  4049b0:	f04f 0a10 	mov.w	sl, #16
  4049b4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4049b8:	e005      	b.n	4049c6 <_vfprintf_r+0xcea>
  4049ba:	f108 0808 	add.w	r8, r8, #8
  4049be:	3f10      	subs	r7, #16
  4049c0:	2f10      	cmp	r7, #16
  4049c2:	f340 80ff 	ble.w	404bc4 <_vfprintf_r+0xee8>
  4049c6:	3601      	adds	r6, #1
  4049c8:	3410      	adds	r4, #16
  4049ca:	2e07      	cmp	r6, #7
  4049cc:	9425      	str	r4, [sp, #148]	; 0x94
  4049ce:	9624      	str	r6, [sp, #144]	; 0x90
  4049d0:	e888 0420 	stmia.w	r8, {r5, sl}
  4049d4:	ddf1      	ble.n	4049ba <_vfprintf_r+0xcde>
  4049d6:	aa23      	add	r2, sp, #140	; 0x8c
  4049d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4049da:	4658      	mov	r0, fp
  4049dc:	f002 ff28 	bl	407830 <__sprint_r>
  4049e0:	2800      	cmp	r0, #0
  4049e2:	f47f af05 	bne.w	4047f0 <_vfprintf_r+0xb14>
  4049e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049e8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4049ea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4049ee:	e7e6      	b.n	4049be <_vfprintf_r+0xce2>
  4049f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4049f2:	460a      	mov	r2, r1
  4049f4:	3204      	adds	r2, #4
  4049f6:	680c      	ldr	r4, [r1, #0]
  4049f8:	920e      	str	r2, [sp, #56]	; 0x38
  4049fa:	2500      	movs	r5, #0
  4049fc:	f7ff ba7a 	b.w	403ef4 <_vfprintf_r+0x218>
  404a00:	681c      	ldr	r4, [r3, #0]
  404a02:	3304      	adds	r3, #4
  404a04:	930e      	str	r3, [sp, #56]	; 0x38
  404a06:	2500      	movs	r5, #0
  404a08:	e426      	b.n	404258 <_vfprintf_r+0x57c>
  404a0a:	3301      	adds	r3, #1
  404a0c:	4434      	add	r4, r6
  404a0e:	2b07      	cmp	r3, #7
  404a10:	9425      	str	r4, [sp, #148]	; 0x94
  404a12:	9324      	str	r3, [sp, #144]	; 0x90
  404a14:	e888 0060 	stmia.w	r8, {r5, r6}
  404a18:	f77f ab63 	ble.w	4040e2 <_vfprintf_r+0x406>
  404a1c:	e6d6      	b.n	4047cc <_vfprintf_r+0xaf0>
  404a1e:	3204      	adds	r2, #4
  404a20:	681c      	ldr	r4, [r3, #0]
  404a22:	920e      	str	r2, [sp, #56]	; 0x38
  404a24:	2301      	movs	r3, #1
  404a26:	2500      	movs	r5, #0
  404a28:	f7ff ba64 	b.w	403ef4 <_vfprintf_r+0x218>
  404a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a2e:	6814      	ldr	r4, [r2, #0]
  404a30:	4613      	mov	r3, r2
  404a32:	3304      	adds	r3, #4
  404a34:	17e5      	asrs	r5, r4, #31
  404a36:	930e      	str	r3, [sp, #56]	; 0x38
  404a38:	4622      	mov	r2, r4
  404a3a:	462b      	mov	r3, r5
  404a3c:	e460      	b.n	404300 <_vfprintf_r+0x624>
  404a3e:	f8dd b018 	ldr.w	fp, [sp, #24]
  404a42:	f8cd b018 	str.w	fp, [sp, #24]
  404a46:	af40      	add	r7, sp, #256	; 0x100
  404a48:	3430      	adds	r4, #48	; 0x30
  404a4a:	2301      	movs	r3, #1
  404a4c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  404a50:	930d      	str	r3, [sp, #52]	; 0x34
  404a52:	f7ff ba6d 	b.w	403f30 <_vfprintf_r+0x254>
  404a56:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404a5a:	f002 f895 	bl	406b88 <__retarget_lock_release_recursive>
  404a5e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404a62:	e5af      	b.n	4045c4 <_vfprintf_r+0x8e8>
  404a64:	4614      	mov	r4, r2
  404a66:	3301      	adds	r3, #1
  404a68:	4434      	add	r4, r6
  404a6a:	2b07      	cmp	r3, #7
  404a6c:	9425      	str	r4, [sp, #148]	; 0x94
  404a6e:	9324      	str	r3, [sp, #144]	; 0x90
  404a70:	e888 0060 	stmia.w	r8, {r5, r6}
  404a74:	f340 816d 	ble.w	404d52 <_vfprintf_r+0x1076>
  404a78:	aa23      	add	r2, sp, #140	; 0x8c
  404a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404a7c:	9808      	ldr	r0, [sp, #32]
  404a7e:	f002 fed7 	bl	407830 <__sprint_r>
  404a82:	2800      	cmp	r0, #0
  404a84:	f47f aeb4 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404a88:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a8a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404a8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a92:	4293      	cmp	r3, r2
  404a94:	f280 8158 	bge.w	404d48 <_vfprintf_r+0x106c>
  404a98:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404a9a:	9814      	ldr	r0, [sp, #80]	; 0x50
  404a9c:	9915      	ldr	r1, [sp, #84]	; 0x54
  404a9e:	f8c8 1000 	str.w	r1, [r8]
  404aa2:	3201      	adds	r2, #1
  404aa4:	4404      	add	r4, r0
  404aa6:	2a07      	cmp	r2, #7
  404aa8:	9425      	str	r4, [sp, #148]	; 0x94
  404aaa:	f8c8 0004 	str.w	r0, [r8, #4]
  404aae:	9224      	str	r2, [sp, #144]	; 0x90
  404ab0:	f300 8152 	bgt.w	404d58 <_vfprintf_r+0x107c>
  404ab4:	f108 0808 	add.w	r8, r8, #8
  404ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404aba:	9910      	ldr	r1, [sp, #64]	; 0x40
  404abc:	1ad3      	subs	r3, r2, r3
  404abe:	1a56      	subs	r6, r2, r1
  404ac0:	429e      	cmp	r6, r3
  404ac2:	bfa8      	it	ge
  404ac4:	461e      	movge	r6, r3
  404ac6:	2e00      	cmp	r6, #0
  404ac8:	dd0e      	ble.n	404ae8 <_vfprintf_r+0xe0c>
  404aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404acc:	f8c8 6004 	str.w	r6, [r8, #4]
  404ad0:	3201      	adds	r2, #1
  404ad2:	440f      	add	r7, r1
  404ad4:	4434      	add	r4, r6
  404ad6:	2a07      	cmp	r2, #7
  404ad8:	f8c8 7000 	str.w	r7, [r8]
  404adc:	9425      	str	r4, [sp, #148]	; 0x94
  404ade:	9224      	str	r2, [sp, #144]	; 0x90
  404ae0:	f300 823c 	bgt.w	404f5c <_vfprintf_r+0x1280>
  404ae4:	f108 0808 	add.w	r8, r8, #8
  404ae8:	2e00      	cmp	r6, #0
  404aea:	bfac      	ite	ge
  404aec:	1b9e      	subge	r6, r3, r6
  404aee:	461e      	movlt	r6, r3
  404af0:	2e00      	cmp	r6, #0
  404af2:	f77f aaf8 	ble.w	4040e6 <_vfprintf_r+0x40a>
  404af6:	2e10      	cmp	r6, #16
  404af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404afa:	4d3e      	ldr	r5, [pc, #248]	; (404bf4 <_vfprintf_r+0xf18>)
  404afc:	dd85      	ble.n	404a0a <_vfprintf_r+0xd2e>
  404afe:	2710      	movs	r7, #16
  404b00:	f8dd a020 	ldr.w	sl, [sp, #32]
  404b04:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404b08:	e005      	b.n	404b16 <_vfprintf_r+0xe3a>
  404b0a:	f108 0808 	add.w	r8, r8, #8
  404b0e:	3e10      	subs	r6, #16
  404b10:	2e10      	cmp	r6, #16
  404b12:	f77f af7a 	ble.w	404a0a <_vfprintf_r+0xd2e>
  404b16:	3301      	adds	r3, #1
  404b18:	3410      	adds	r4, #16
  404b1a:	2b07      	cmp	r3, #7
  404b1c:	9425      	str	r4, [sp, #148]	; 0x94
  404b1e:	9324      	str	r3, [sp, #144]	; 0x90
  404b20:	e888 00a0 	stmia.w	r8, {r5, r7}
  404b24:	ddf1      	ble.n	404b0a <_vfprintf_r+0xe2e>
  404b26:	aa23      	add	r2, sp, #140	; 0x8c
  404b28:	4659      	mov	r1, fp
  404b2a:	4650      	mov	r0, sl
  404b2c:	f002 fe80 	bl	407830 <__sprint_r>
  404b30:	2800      	cmp	r0, #0
  404b32:	f040 8176 	bne.w	404e22 <_vfprintf_r+0x1146>
  404b36:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404b3e:	e7e6      	b.n	404b0e <_vfprintf_r+0xe32>
  404b40:	9b06      	ldr	r3, [sp, #24]
  404b42:	07d8      	lsls	r0, r3, #31
  404b44:	f53f adff 	bmi.w	404746 <_vfprintf_r+0xa6a>
  404b48:	3601      	adds	r6, #1
  404b4a:	3401      	adds	r4, #1
  404b4c:	2301      	movs	r3, #1
  404b4e:	2e07      	cmp	r6, #7
  404b50:	9425      	str	r4, [sp, #148]	; 0x94
  404b52:	9624      	str	r6, [sp, #144]	; 0x90
  404b54:	f8c8 7000 	str.w	r7, [r8]
  404b58:	f8c8 3004 	str.w	r3, [r8, #4]
  404b5c:	f77f ae27 	ble.w	4047ae <_vfprintf_r+0xad2>
  404b60:	aa23      	add	r2, sp, #140	; 0x8c
  404b62:	990a      	ldr	r1, [sp, #40]	; 0x28
  404b64:	9808      	ldr	r0, [sp, #32]
  404b66:	f002 fe63 	bl	407830 <__sprint_r>
  404b6a:	2800      	cmp	r0, #0
  404b6c:	f47f ae40 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404b70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b72:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404b74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404b78:	e61b      	b.n	4047b2 <_vfprintf_r+0xad6>
  404b7a:	aa23      	add	r2, sp, #140	; 0x8c
  404b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
  404b7e:	9808      	ldr	r0, [sp, #32]
  404b80:	f002 fe56 	bl	407830 <__sprint_r>
  404b84:	2800      	cmp	r0, #0
  404b86:	f47f ae33 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404b8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b8c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404b8e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404b92:	e5e6      	b.n	404762 <_vfprintf_r+0xa86>
  404b94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404b96:	3507      	adds	r5, #7
  404b98:	f025 0507 	bic.w	r5, r5, #7
  404b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
  404ba0:	f105 0108 	add.w	r1, r5, #8
  404ba4:	910e      	str	r1, [sp, #56]	; 0x38
  404ba6:	4614      	mov	r4, r2
  404ba8:	461d      	mov	r5, r3
  404baa:	f7ff bba9 	b.w	404300 <_vfprintf_r+0x624>
  404bae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404bb0:	3507      	adds	r5, #7
  404bb2:	f025 0307 	bic.w	r3, r5, #7
  404bb6:	f103 0208 	add.w	r2, r3, #8
  404bba:	920e      	str	r2, [sp, #56]	; 0x38
  404bbc:	e9d3 4500 	ldrd	r4, r5, [r3]
  404bc0:	f7ff bb4a 	b.w	404258 <_vfprintf_r+0x57c>
  404bc4:	3601      	adds	r6, #1
  404bc6:	443c      	add	r4, r7
  404bc8:	2e07      	cmp	r6, #7
  404bca:	9425      	str	r4, [sp, #148]	; 0x94
  404bcc:	9624      	str	r6, [sp, #144]	; 0x90
  404bce:	e888 00a0 	stmia.w	r8, {r5, r7}
  404bd2:	f77f adec 	ble.w	4047ae <_vfprintf_r+0xad2>
  404bd6:	e7c3      	b.n	404b60 <_vfprintf_r+0xe84>
  404bd8:	aa23      	add	r2, sp, #140	; 0x8c
  404bda:	990a      	ldr	r1, [sp, #40]	; 0x28
  404bdc:	9808      	ldr	r0, [sp, #32]
  404bde:	f002 fe27 	bl	407830 <__sprint_r>
  404be2:	2800      	cmp	r0, #0
  404be4:	f47f ae04 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404be8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404bea:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404bec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404bf0:	e5c6      	b.n	404780 <_vfprintf_r+0xaa4>
  404bf2:	bf00      	nop
  404bf4:	004087b4 	.word	0x004087b4
  404bf8:	af30      	add	r7, sp, #192	; 0xc0
  404bfa:	f7ff b999 	b.w	403f30 <_vfprintf_r+0x254>
  404bfe:	aa23      	add	r2, sp, #140	; 0x8c
  404c00:	990a      	ldr	r1, [sp, #40]	; 0x28
  404c02:	9808      	ldr	r0, [sp, #32]
  404c04:	f002 fe14 	bl	407830 <__sprint_r>
  404c08:	2800      	cmp	r0, #0
  404c0a:	f47f adf1 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404c0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c10:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404c14:	f7ff ba11 	b.w	40403a <_vfprintf_r+0x35e>
  404c18:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404c1c:	4264      	negs	r4, r4
  404c1e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404c22:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404c26:	2301      	movs	r3, #1
  404c28:	f7ff b968 	b.w	403efc <_vfprintf_r+0x220>
  404c2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  404c2e:	4622      	mov	r2, r4
  404c30:	4620      	mov	r0, r4
  404c32:	9c12      	ldr	r4, [sp, #72]	; 0x48
  404c34:	4623      	mov	r3, r4
  404c36:	4621      	mov	r1, r4
  404c38:	f003 fb44 	bl	4082c4 <__aeabi_dcmpun>
  404c3c:	2800      	cmp	r0, #0
  404c3e:	f040 828c 	bne.w	40515a <_vfprintf_r+0x147e>
  404c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c44:	3301      	adds	r3, #1
  404c46:	f026 0320 	bic.w	r3, r6, #32
  404c4a:	930d      	str	r3, [sp, #52]	; 0x34
  404c4c:	f000 8091 	beq.w	404d72 <_vfprintf_r+0x1096>
  404c50:	2b47      	cmp	r3, #71	; 0x47
  404c52:	d104      	bne.n	404c5e <_vfprintf_r+0xf82>
  404c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c56:	2b00      	cmp	r3, #0
  404c58:	bf08      	it	eq
  404c5a:	2301      	moveq	r3, #1
  404c5c:	9309      	str	r3, [sp, #36]	; 0x24
  404c5e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404c62:	9306      	str	r3, [sp, #24]
  404c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404c66:	f1b3 0a00 	subs.w	sl, r3, #0
  404c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c6c:	9307      	str	r3, [sp, #28]
  404c6e:	bfbb      	ittet	lt
  404c70:	4653      	movlt	r3, sl
  404c72:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  404c76:	2300      	movge	r3, #0
  404c78:	232d      	movlt	r3, #45	; 0x2d
  404c7a:	2e66      	cmp	r6, #102	; 0x66
  404c7c:	930f      	str	r3, [sp, #60]	; 0x3c
  404c7e:	f000 817f 	beq.w	404f80 <_vfprintf_r+0x12a4>
  404c82:	2e46      	cmp	r6, #70	; 0x46
  404c84:	f000 81d4 	beq.w	405030 <_vfprintf_r+0x1354>
  404c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404c8a:	9a07      	ldr	r2, [sp, #28]
  404c8c:	2b45      	cmp	r3, #69	; 0x45
  404c8e:	bf0c      	ite	eq
  404c90:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  404c92:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  404c94:	a821      	add	r0, sp, #132	; 0x84
  404c96:	a91e      	add	r1, sp, #120	; 0x78
  404c98:	bf08      	it	eq
  404c9a:	1c5d      	addeq	r5, r3, #1
  404c9c:	9004      	str	r0, [sp, #16]
  404c9e:	9103      	str	r1, [sp, #12]
  404ca0:	a81d      	add	r0, sp, #116	; 0x74
  404ca2:	2102      	movs	r1, #2
  404ca4:	9002      	str	r0, [sp, #8]
  404ca6:	4653      	mov	r3, sl
  404ca8:	9501      	str	r5, [sp, #4]
  404caa:	9100      	str	r1, [sp, #0]
  404cac:	9808      	ldr	r0, [sp, #32]
  404cae:	f000 fc0b 	bl	4054c8 <_dtoa_r>
  404cb2:	2e67      	cmp	r6, #103	; 0x67
  404cb4:	4607      	mov	r7, r0
  404cb6:	f040 81af 	bne.w	405018 <_vfprintf_r+0x133c>
  404cba:	f01b 0f01 	tst.w	fp, #1
  404cbe:	f000 8213 	beq.w	4050e8 <_vfprintf_r+0x140c>
  404cc2:	197c      	adds	r4, r7, r5
  404cc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404cc6:	9807      	ldr	r0, [sp, #28]
  404cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404cca:	4651      	mov	r1, sl
  404ccc:	f003 fac8 	bl	408260 <__aeabi_dcmpeq>
  404cd0:	2800      	cmp	r0, #0
  404cd2:	f040 8132 	bne.w	404f3a <_vfprintf_r+0x125e>
  404cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404cd8:	42a3      	cmp	r3, r4
  404cda:	d206      	bcs.n	404cea <_vfprintf_r+0x100e>
  404cdc:	2130      	movs	r1, #48	; 0x30
  404cde:	1c5a      	adds	r2, r3, #1
  404ce0:	9221      	str	r2, [sp, #132]	; 0x84
  404ce2:	7019      	strb	r1, [r3, #0]
  404ce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404ce6:	429c      	cmp	r4, r3
  404ce8:	d8f9      	bhi.n	404cde <_vfprintf_r+0x1002>
  404cea:	1bdb      	subs	r3, r3, r7
  404cec:	9311      	str	r3, [sp, #68]	; 0x44
  404cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404cf0:	2b47      	cmp	r3, #71	; 0x47
  404cf2:	f000 80b9 	beq.w	404e68 <_vfprintf_r+0x118c>
  404cf6:	2e65      	cmp	r6, #101	; 0x65
  404cf8:	f340 8276 	ble.w	4051e8 <_vfprintf_r+0x150c>
  404cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404cfe:	9310      	str	r3, [sp, #64]	; 0x40
  404d00:	2e66      	cmp	r6, #102	; 0x66
  404d02:	f000 8162 	beq.w	404fca <_vfprintf_r+0x12ee>
  404d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404d0a:	4619      	mov	r1, r3
  404d0c:	4291      	cmp	r1, r2
  404d0e:	f300 814f 	bgt.w	404fb0 <_vfprintf_r+0x12d4>
  404d12:	f01b 0f01 	tst.w	fp, #1
  404d16:	f040 8209 	bne.w	40512c <_vfprintf_r+0x1450>
  404d1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404d1e:	9307      	str	r3, [sp, #28]
  404d20:	920d      	str	r2, [sp, #52]	; 0x34
  404d22:	2667      	movs	r6, #103	; 0x67
  404d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404d26:	2b00      	cmp	r3, #0
  404d28:	f040 8096 	bne.w	404e58 <_vfprintf_r+0x117c>
  404d2c:	9309      	str	r3, [sp, #36]	; 0x24
  404d2e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404d32:	f7ff b905 	b.w	403f40 <_vfprintf_r+0x264>
  404d36:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404d3a:	f001 ff25 	bl	406b88 <__retarget_lock_release_recursive>
  404d3e:	f04f 33ff 	mov.w	r3, #4294967295
  404d42:	930b      	str	r3, [sp, #44]	; 0x2c
  404d44:	f7ff ba30 	b.w	4041a8 <_vfprintf_r+0x4cc>
  404d48:	9a06      	ldr	r2, [sp, #24]
  404d4a:	07d5      	lsls	r5, r2, #31
  404d4c:	f57f aeb4 	bpl.w	404ab8 <_vfprintf_r+0xddc>
  404d50:	e6a2      	b.n	404a98 <_vfprintf_r+0xdbc>
  404d52:	f108 0808 	add.w	r8, r8, #8
  404d56:	e69a      	b.n	404a8e <_vfprintf_r+0xdb2>
  404d58:	aa23      	add	r2, sp, #140	; 0x8c
  404d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d5c:	9808      	ldr	r0, [sp, #32]
  404d5e:	f002 fd67 	bl	407830 <__sprint_r>
  404d62:	2800      	cmp	r0, #0
  404d64:	f47f ad44 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404d68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d6c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404d70:	e6a2      	b.n	404ab8 <_vfprintf_r+0xddc>
  404d72:	2306      	movs	r3, #6
  404d74:	9309      	str	r3, [sp, #36]	; 0x24
  404d76:	e772      	b.n	404c5e <_vfprintf_r+0xf82>
  404d78:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404d7c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404d80:	f7ff bbc7 	b.w	404512 <_vfprintf_r+0x836>
  404d84:	aa23      	add	r2, sp, #140	; 0x8c
  404d86:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d88:	9808      	ldr	r0, [sp, #32]
  404d8a:	f002 fd51 	bl	407830 <__sprint_r>
  404d8e:	2800      	cmp	r0, #0
  404d90:	f47f ad2e 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404d94:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404d98:	e437      	b.n	40460a <_vfprintf_r+0x92e>
  404d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d9c:	4ab4      	ldr	r2, [pc, #720]	; (405070 <_vfprintf_r+0x1394>)
  404d9e:	f8c8 2000 	str.w	r2, [r8]
  404da2:	3301      	adds	r3, #1
  404da4:	3401      	adds	r4, #1
  404da6:	2201      	movs	r2, #1
  404da8:	2b07      	cmp	r3, #7
  404daa:	9425      	str	r4, [sp, #148]	; 0x94
  404dac:	9324      	str	r3, [sp, #144]	; 0x90
  404dae:	f8c8 2004 	str.w	r2, [r8, #4]
  404db2:	f300 8124 	bgt.w	404ffe <_vfprintf_r+0x1322>
  404db6:	f108 0808 	add.w	r8, r8, #8
  404dba:	b929      	cbnz	r1, 404dc8 <_vfprintf_r+0x10ec>
  404dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dbe:	b91b      	cbnz	r3, 404dc8 <_vfprintf_r+0x10ec>
  404dc0:	9b06      	ldr	r3, [sp, #24]
  404dc2:	07de      	lsls	r6, r3, #31
  404dc4:	f57f a98f 	bpl.w	4040e6 <_vfprintf_r+0x40a>
  404dc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dca:	9814      	ldr	r0, [sp, #80]	; 0x50
  404dcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404dce:	f8c8 2000 	str.w	r2, [r8]
  404dd2:	3301      	adds	r3, #1
  404dd4:	4602      	mov	r2, r0
  404dd6:	4422      	add	r2, r4
  404dd8:	2b07      	cmp	r3, #7
  404dda:	9225      	str	r2, [sp, #148]	; 0x94
  404ddc:	f8c8 0004 	str.w	r0, [r8, #4]
  404de0:	9324      	str	r3, [sp, #144]	; 0x90
  404de2:	f300 8169 	bgt.w	4050b8 <_vfprintf_r+0x13dc>
  404de6:	f108 0808 	add.w	r8, r8, #8
  404dea:	2900      	cmp	r1, #0
  404dec:	f2c0 8136 	blt.w	40505c <_vfprintf_r+0x1380>
  404df0:	9911      	ldr	r1, [sp, #68]	; 0x44
  404df2:	f8c8 7000 	str.w	r7, [r8]
  404df6:	3301      	adds	r3, #1
  404df8:	188c      	adds	r4, r1, r2
  404dfa:	2b07      	cmp	r3, #7
  404dfc:	9425      	str	r4, [sp, #148]	; 0x94
  404dfe:	9324      	str	r3, [sp, #144]	; 0x90
  404e00:	f8c8 1004 	str.w	r1, [r8, #4]
  404e04:	f77f a96d 	ble.w	4040e2 <_vfprintf_r+0x406>
  404e08:	e4e0      	b.n	4047cc <_vfprintf_r+0xaf0>
  404e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e0e:	6813      	ldr	r3, [r2, #0]
  404e10:	17cd      	asrs	r5, r1, #31
  404e12:	4608      	mov	r0, r1
  404e14:	3204      	adds	r2, #4
  404e16:	4629      	mov	r1, r5
  404e18:	920e      	str	r2, [sp, #56]	; 0x38
  404e1a:	e9c3 0100 	strd	r0, r1, [r3]
  404e1e:	f7fe bfa9 	b.w	403d74 <_vfprintf_r+0x98>
  404e22:	46da      	mov	sl, fp
  404e24:	f7ff bbc4 	b.w	4045b0 <_vfprintf_r+0x8d4>
  404e28:	aa23      	add	r2, sp, #140	; 0x8c
  404e2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e2c:	9808      	ldr	r0, [sp, #32]
  404e2e:	f002 fcff 	bl	407830 <__sprint_r>
  404e32:	2800      	cmp	r0, #0
  404e34:	f47f acdc 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404e38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e3e:	f7ff bbfd 	b.w	40463c <_vfprintf_r+0x960>
  404e42:	4638      	mov	r0, r7
  404e44:	9409      	str	r4, [sp, #36]	; 0x24
  404e46:	f7fe fedb 	bl	403c00 <strlen>
  404e4a:	950e      	str	r5, [sp, #56]	; 0x38
  404e4c:	900d      	str	r0, [sp, #52]	; 0x34
  404e4e:	f8cd b018 	str.w	fp, [sp, #24]
  404e52:	4603      	mov	r3, r0
  404e54:	f7ff ba36 	b.w	4042c4 <_vfprintf_r+0x5e8>
  404e58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404e5c:	2300      	movs	r3, #0
  404e5e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404e62:	9309      	str	r3, [sp, #36]	; 0x24
  404e64:	f7ff b86f 	b.w	403f46 <_vfprintf_r+0x26a>
  404e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e6a:	9310      	str	r3, [sp, #64]	; 0x40
  404e6c:	461a      	mov	r2, r3
  404e6e:	3303      	adds	r3, #3
  404e70:	db04      	blt.n	404e7c <_vfprintf_r+0x11a0>
  404e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e74:	4619      	mov	r1, r3
  404e76:	4291      	cmp	r1, r2
  404e78:	f6bf af45 	bge.w	404d06 <_vfprintf_r+0x102a>
  404e7c:	3e02      	subs	r6, #2
  404e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404e80:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  404e84:	3b01      	subs	r3, #1
  404e86:	2b00      	cmp	r3, #0
  404e88:	931d      	str	r3, [sp, #116]	; 0x74
  404e8a:	bfbd      	ittte	lt
  404e8c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  404e8e:	f1c3 0301 	rsblt	r3, r3, #1
  404e92:	222d      	movlt	r2, #45	; 0x2d
  404e94:	222b      	movge	r2, #43	; 0x2b
  404e96:	2b09      	cmp	r3, #9
  404e98:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404e9c:	f340 813e 	ble.w	40511c <_vfprintf_r+0x1440>
  404ea0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  404ea4:	4620      	mov	r0, r4
  404ea6:	4d73      	ldr	r5, [pc, #460]	; (405074 <_vfprintf_r+0x1398>)
  404ea8:	e000      	b.n	404eac <_vfprintf_r+0x11d0>
  404eaa:	4610      	mov	r0, r2
  404eac:	fb85 1203 	smull	r1, r2, r5, r3
  404eb0:	17d9      	asrs	r1, r3, #31
  404eb2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404eb6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404eba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404ebe:	3230      	adds	r2, #48	; 0x30
  404ec0:	2909      	cmp	r1, #9
  404ec2:	f800 2c01 	strb.w	r2, [r0, #-1]
  404ec6:	460b      	mov	r3, r1
  404ec8:	f100 32ff 	add.w	r2, r0, #4294967295
  404ecc:	dced      	bgt.n	404eaa <_vfprintf_r+0x11ce>
  404ece:	3330      	adds	r3, #48	; 0x30
  404ed0:	3802      	subs	r0, #2
  404ed2:	b2d9      	uxtb	r1, r3
  404ed4:	4284      	cmp	r4, r0
  404ed6:	f802 1c01 	strb.w	r1, [r2, #-1]
  404eda:	f240 8190 	bls.w	4051fe <_vfprintf_r+0x1522>
  404ede:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  404ee2:	4613      	mov	r3, r2
  404ee4:	e001      	b.n	404eea <_vfprintf_r+0x120e>
  404ee6:	f813 1b01 	ldrb.w	r1, [r3], #1
  404eea:	f800 1b01 	strb.w	r1, [r0], #1
  404eee:	42a3      	cmp	r3, r4
  404ef0:	d1f9      	bne.n	404ee6 <_vfprintf_r+0x120a>
  404ef2:	3301      	adds	r3, #1
  404ef4:	1a9b      	subs	r3, r3, r2
  404ef6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  404efa:	4413      	add	r3, r2
  404efc:	aa1f      	add	r2, sp, #124	; 0x7c
  404efe:	1a9b      	subs	r3, r3, r2
  404f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f02:	9319      	str	r3, [sp, #100]	; 0x64
  404f04:	2a01      	cmp	r2, #1
  404f06:	4413      	add	r3, r2
  404f08:	930d      	str	r3, [sp, #52]	; 0x34
  404f0a:	f340 8145 	ble.w	405198 <_vfprintf_r+0x14bc>
  404f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404f12:	4413      	add	r3, r2
  404f14:	930d      	str	r3, [sp, #52]	; 0x34
  404f16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f1a:	9307      	str	r3, [sp, #28]
  404f1c:	2300      	movs	r3, #0
  404f1e:	9310      	str	r3, [sp, #64]	; 0x40
  404f20:	e700      	b.n	404d24 <_vfprintf_r+0x1048>
  404f22:	aa23      	add	r2, sp, #140	; 0x8c
  404f24:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f26:	9808      	ldr	r0, [sp, #32]
  404f28:	f002 fc82 	bl	407830 <__sprint_r>
  404f2c:	2800      	cmp	r0, #0
  404f2e:	f47f ac5f 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404f32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f38:	e4d1      	b.n	4048de <_vfprintf_r+0xc02>
  404f3a:	4623      	mov	r3, r4
  404f3c:	e6d5      	b.n	404cea <_vfprintf_r+0x100e>
  404f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f40:	9710      	str	r7, [sp, #64]	; 0x40
  404f42:	2b06      	cmp	r3, #6
  404f44:	bf28      	it	cs
  404f46:	2306      	movcs	r3, #6
  404f48:	9709      	str	r7, [sp, #36]	; 0x24
  404f4a:	46ba      	mov	sl, r7
  404f4c:	9307      	str	r3, [sp, #28]
  404f4e:	950e      	str	r5, [sp, #56]	; 0x38
  404f50:	f8cd b018 	str.w	fp, [sp, #24]
  404f54:	930d      	str	r3, [sp, #52]	; 0x34
  404f56:	4f48      	ldr	r7, [pc, #288]	; (405078 <_vfprintf_r+0x139c>)
  404f58:	f7fe bff2 	b.w	403f40 <_vfprintf_r+0x264>
  404f5c:	aa23      	add	r2, sp, #140	; 0x8c
  404f5e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f60:	9808      	ldr	r0, [sp, #32]
  404f62:	f002 fc65 	bl	407830 <__sprint_r>
  404f66:	2800      	cmp	r0, #0
  404f68:	f47f ac42 	bne.w	4047f0 <_vfprintf_r+0xb14>
  404f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f72:	1ad3      	subs	r3, r2, r3
  404f74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f78:	e5b6      	b.n	404ae8 <_vfprintf_r+0xe0c>
  404f7a:	46a2      	mov	sl, r4
  404f7c:	f7ff bb18 	b.w	4045b0 <_vfprintf_r+0x8d4>
  404f80:	a821      	add	r0, sp, #132	; 0x84
  404f82:	a91e      	add	r1, sp, #120	; 0x78
  404f84:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404f86:	9004      	str	r0, [sp, #16]
  404f88:	9103      	str	r1, [sp, #12]
  404f8a:	a81d      	add	r0, sp, #116	; 0x74
  404f8c:	2103      	movs	r1, #3
  404f8e:	9002      	str	r0, [sp, #8]
  404f90:	9a07      	ldr	r2, [sp, #28]
  404f92:	9501      	str	r5, [sp, #4]
  404f94:	4653      	mov	r3, sl
  404f96:	9100      	str	r1, [sp, #0]
  404f98:	9808      	ldr	r0, [sp, #32]
  404f9a:	f000 fa95 	bl	4054c8 <_dtoa_r>
  404f9e:	4607      	mov	r7, r0
  404fa0:	1944      	adds	r4, r0, r5
  404fa2:	783b      	ldrb	r3, [r7, #0]
  404fa4:	2b30      	cmp	r3, #48	; 0x30
  404fa6:	f000 80ca 	beq.w	40513e <_vfprintf_r+0x1462>
  404faa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404fac:	442c      	add	r4, r5
  404fae:	e689      	b.n	404cc4 <_vfprintf_r+0xfe8>
  404fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fb4:	4413      	add	r3, r2
  404fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404fb8:	930d      	str	r3, [sp, #52]	; 0x34
  404fba:	2a00      	cmp	r2, #0
  404fbc:	f340 80e4 	ble.w	405188 <_vfprintf_r+0x14ac>
  404fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404fc4:	9307      	str	r3, [sp, #28]
  404fc6:	2667      	movs	r6, #103	; 0x67
  404fc8:	e6ac      	b.n	404d24 <_vfprintf_r+0x1048>
  404fca:	2b00      	cmp	r3, #0
  404fcc:	f340 80fb 	ble.w	4051c6 <_vfprintf_r+0x14ea>
  404fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404fd2:	2a00      	cmp	r2, #0
  404fd4:	f040 80ce 	bne.w	405174 <_vfprintf_r+0x1498>
  404fd8:	f01b 0f01 	tst.w	fp, #1
  404fdc:	f040 80ca 	bne.w	405174 <_vfprintf_r+0x1498>
  404fe0:	9307      	str	r3, [sp, #28]
  404fe2:	930d      	str	r3, [sp, #52]	; 0x34
  404fe4:	e69e      	b.n	404d24 <_vfprintf_r+0x1048>
  404fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fe8:	9307      	str	r3, [sp, #28]
  404fea:	930d      	str	r3, [sp, #52]	; 0x34
  404fec:	9009      	str	r0, [sp, #36]	; 0x24
  404fee:	950e      	str	r5, [sp, #56]	; 0x38
  404ff0:	f8cd b018 	str.w	fp, [sp, #24]
  404ff4:	9010      	str	r0, [sp, #64]	; 0x40
  404ff6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404ffa:	f7fe bfa1 	b.w	403f40 <_vfprintf_r+0x264>
  404ffe:	aa23      	add	r2, sp, #140	; 0x8c
  405000:	990a      	ldr	r1, [sp, #40]	; 0x28
  405002:	9808      	ldr	r0, [sp, #32]
  405004:	f002 fc14 	bl	407830 <__sprint_r>
  405008:	2800      	cmp	r0, #0
  40500a:	f47f abf1 	bne.w	4047f0 <_vfprintf_r+0xb14>
  40500e:	991d      	ldr	r1, [sp, #116]	; 0x74
  405010:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405012:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405016:	e6d0      	b.n	404dba <_vfprintf_r+0x10de>
  405018:	2e47      	cmp	r6, #71	; 0x47
  40501a:	f47f ae52 	bne.w	404cc2 <_vfprintf_r+0xfe6>
  40501e:	f01b 0f01 	tst.w	fp, #1
  405022:	f000 80da 	beq.w	4051da <_vfprintf_r+0x14fe>
  405026:	2e46      	cmp	r6, #70	; 0x46
  405028:	eb07 0405 	add.w	r4, r7, r5
  40502c:	d0b9      	beq.n	404fa2 <_vfprintf_r+0x12c6>
  40502e:	e649      	b.n	404cc4 <_vfprintf_r+0xfe8>
  405030:	a821      	add	r0, sp, #132	; 0x84
  405032:	a91e      	add	r1, sp, #120	; 0x78
  405034:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405036:	9004      	str	r0, [sp, #16]
  405038:	9103      	str	r1, [sp, #12]
  40503a:	a81d      	add	r0, sp, #116	; 0x74
  40503c:	2103      	movs	r1, #3
  40503e:	9002      	str	r0, [sp, #8]
  405040:	9a07      	ldr	r2, [sp, #28]
  405042:	9401      	str	r4, [sp, #4]
  405044:	4653      	mov	r3, sl
  405046:	9100      	str	r1, [sp, #0]
  405048:	9808      	ldr	r0, [sp, #32]
  40504a:	f000 fa3d 	bl	4054c8 <_dtoa_r>
  40504e:	4625      	mov	r5, r4
  405050:	4607      	mov	r7, r0
  405052:	e7e8      	b.n	405026 <_vfprintf_r+0x134a>
  405054:	2300      	movs	r3, #0
  405056:	9309      	str	r3, [sp, #36]	; 0x24
  405058:	f7fe bec1 	b.w	403dde <_vfprintf_r+0x102>
  40505c:	424e      	negs	r6, r1
  40505e:	3110      	adds	r1, #16
  405060:	4d06      	ldr	r5, [pc, #24]	; (40507c <_vfprintf_r+0x13a0>)
  405062:	da43      	bge.n	4050ec <_vfprintf_r+0x1410>
  405064:	2410      	movs	r4, #16
  405066:	f8dd a020 	ldr.w	sl, [sp, #32]
  40506a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40506e:	e00c      	b.n	40508a <_vfprintf_r+0x13ae>
  405070:	004087a0 	.word	0x004087a0
  405074:	66666667 	.word	0x66666667
  405078:	00408798 	.word	0x00408798
  40507c:	004087b4 	.word	0x004087b4
  405080:	f108 0808 	add.w	r8, r8, #8
  405084:	3e10      	subs	r6, #16
  405086:	2e10      	cmp	r6, #16
  405088:	dd30      	ble.n	4050ec <_vfprintf_r+0x1410>
  40508a:	3301      	adds	r3, #1
  40508c:	3210      	adds	r2, #16
  40508e:	2b07      	cmp	r3, #7
  405090:	9225      	str	r2, [sp, #148]	; 0x94
  405092:	9324      	str	r3, [sp, #144]	; 0x90
  405094:	f8c8 5000 	str.w	r5, [r8]
  405098:	f8c8 4004 	str.w	r4, [r8, #4]
  40509c:	ddf0      	ble.n	405080 <_vfprintf_r+0x13a4>
  40509e:	aa23      	add	r2, sp, #140	; 0x8c
  4050a0:	4659      	mov	r1, fp
  4050a2:	4650      	mov	r0, sl
  4050a4:	f002 fbc4 	bl	407830 <__sprint_r>
  4050a8:	2800      	cmp	r0, #0
  4050aa:	f47f aeba 	bne.w	404e22 <_vfprintf_r+0x1146>
  4050ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4050b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4050b6:	e7e5      	b.n	405084 <_vfprintf_r+0x13a8>
  4050b8:	aa23      	add	r2, sp, #140	; 0x8c
  4050ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4050bc:	9808      	ldr	r0, [sp, #32]
  4050be:	f002 fbb7 	bl	407830 <__sprint_r>
  4050c2:	2800      	cmp	r0, #0
  4050c4:	f47f ab94 	bne.w	4047f0 <_vfprintf_r+0xb14>
  4050c8:	991d      	ldr	r1, [sp, #116]	; 0x74
  4050ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4050cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4050d2:	e68a      	b.n	404dea <_vfprintf_r+0x110e>
  4050d4:	9808      	ldr	r0, [sp, #32]
  4050d6:	aa23      	add	r2, sp, #140	; 0x8c
  4050d8:	4651      	mov	r1, sl
  4050da:	f002 fba9 	bl	407830 <__sprint_r>
  4050de:	2800      	cmp	r0, #0
  4050e0:	f43f aa64 	beq.w	4045ac <_vfprintf_r+0x8d0>
  4050e4:	f7ff ba64 	b.w	4045b0 <_vfprintf_r+0x8d4>
  4050e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4050ea:	e5fe      	b.n	404cea <_vfprintf_r+0x100e>
  4050ec:	3301      	adds	r3, #1
  4050ee:	4432      	add	r2, r6
  4050f0:	2b07      	cmp	r3, #7
  4050f2:	e888 0060 	stmia.w	r8, {r5, r6}
  4050f6:	9225      	str	r2, [sp, #148]	; 0x94
  4050f8:	9324      	str	r3, [sp, #144]	; 0x90
  4050fa:	f108 0808 	add.w	r8, r8, #8
  4050fe:	f77f ae77 	ble.w	404df0 <_vfprintf_r+0x1114>
  405102:	aa23      	add	r2, sp, #140	; 0x8c
  405104:	990a      	ldr	r1, [sp, #40]	; 0x28
  405106:	9808      	ldr	r0, [sp, #32]
  405108:	f002 fb92 	bl	407830 <__sprint_r>
  40510c:	2800      	cmp	r0, #0
  40510e:	f47f ab6f 	bne.w	4047f0 <_vfprintf_r+0xb14>
  405112:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405114:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405116:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40511a:	e669      	b.n	404df0 <_vfprintf_r+0x1114>
  40511c:	3330      	adds	r3, #48	; 0x30
  40511e:	2230      	movs	r2, #48	; 0x30
  405120:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405124:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405128:	ab20      	add	r3, sp, #128	; 0x80
  40512a:	e6e7      	b.n	404efc <_vfprintf_r+0x1220>
  40512c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40512e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405130:	4413      	add	r3, r2
  405132:	930d      	str	r3, [sp, #52]	; 0x34
  405134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405138:	9307      	str	r3, [sp, #28]
  40513a:	2667      	movs	r6, #103	; 0x67
  40513c:	e5f2      	b.n	404d24 <_vfprintf_r+0x1048>
  40513e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405140:	9807      	ldr	r0, [sp, #28]
  405142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405144:	4651      	mov	r1, sl
  405146:	f003 f88b 	bl	408260 <__aeabi_dcmpeq>
  40514a:	2800      	cmp	r0, #0
  40514c:	f47f af2d 	bne.w	404faa <_vfprintf_r+0x12ce>
  405150:	f1c5 0501 	rsb	r5, r5, #1
  405154:	951d      	str	r5, [sp, #116]	; 0x74
  405156:	442c      	add	r4, r5
  405158:	e5b4      	b.n	404cc4 <_vfprintf_r+0xfe8>
  40515a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40515c:	4f33      	ldr	r7, [pc, #204]	; (40522c <_vfprintf_r+0x1550>)
  40515e:	2b00      	cmp	r3, #0
  405160:	bfb6      	itet	lt
  405162:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  405166:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40516a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40516e:	4b30      	ldr	r3, [pc, #192]	; (405230 <_vfprintf_r+0x1554>)
  405170:	f7ff b9d1 	b.w	404516 <_vfprintf_r+0x83a>
  405174:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405176:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405178:	4413      	add	r3, r2
  40517a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40517c:	441a      	add	r2, r3
  40517e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405182:	920d      	str	r2, [sp, #52]	; 0x34
  405184:	9307      	str	r3, [sp, #28]
  405186:	e5cd      	b.n	404d24 <_vfprintf_r+0x1048>
  405188:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40518a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40518c:	f1c3 0301 	rsb	r3, r3, #1
  405190:	441a      	add	r2, r3
  405192:	4613      	mov	r3, r2
  405194:	920d      	str	r2, [sp, #52]	; 0x34
  405196:	e713      	b.n	404fc0 <_vfprintf_r+0x12e4>
  405198:	f01b 0301 	ands.w	r3, fp, #1
  40519c:	9310      	str	r3, [sp, #64]	; 0x40
  40519e:	f47f aeb6 	bne.w	404f0e <_vfprintf_r+0x1232>
  4051a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4051a8:	9307      	str	r3, [sp, #28]
  4051aa:	e5bb      	b.n	404d24 <_vfprintf_r+0x1048>
  4051ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4051ae:	f899 6001 	ldrb.w	r6, [r9, #1]
  4051b2:	6823      	ldr	r3, [r4, #0]
  4051b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4051b8:	9309      	str	r3, [sp, #36]	; 0x24
  4051ba:	4623      	mov	r3, r4
  4051bc:	3304      	adds	r3, #4
  4051be:	4681      	mov	r9, r0
  4051c0:	930e      	str	r3, [sp, #56]	; 0x38
  4051c2:	f7fe be0a 	b.w	403dda <_vfprintf_r+0xfe>
  4051c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4051c8:	b913      	cbnz	r3, 4051d0 <_vfprintf_r+0x14f4>
  4051ca:	f01b 0f01 	tst.w	fp, #1
  4051ce:	d002      	beq.n	4051d6 <_vfprintf_r+0x14fa>
  4051d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4051d2:	3301      	adds	r3, #1
  4051d4:	e7d1      	b.n	40517a <_vfprintf_r+0x149e>
  4051d6:	2301      	movs	r3, #1
  4051d8:	e702      	b.n	404fe0 <_vfprintf_r+0x1304>
  4051da:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4051dc:	1bdb      	subs	r3, r3, r7
  4051de:	9311      	str	r3, [sp, #68]	; 0x44
  4051e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051e2:	2b47      	cmp	r3, #71	; 0x47
  4051e4:	f43f ae40 	beq.w	404e68 <_vfprintf_r+0x118c>
  4051e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4051ea:	9310      	str	r3, [sp, #64]	; 0x40
  4051ec:	e647      	b.n	404e7e <_vfprintf_r+0x11a2>
  4051ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4051f2:	f7ff b81d 	b.w	404230 <_vfprintf_r+0x554>
  4051f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4051fa:	f7ff b918 	b.w	40442e <_vfprintf_r+0x752>
  4051fe:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405202:	e67b      	b.n	404efc <_vfprintf_r+0x1220>
  405204:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405208:	f7ff b866 	b.w	4042d8 <_vfprintf_r+0x5fc>
  40520c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405210:	f7ff b9ac 	b.w	40456c <_vfprintf_r+0x890>
  405214:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405218:	f7ff b934 	b.w	404484 <_vfprintf_r+0x7a8>
  40521c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405220:	f7ff b8b0 	b.w	404384 <_vfprintf_r+0x6a8>
  405224:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405228:	f7ff b945 	b.w	4044b6 <_vfprintf_r+0x7da>
  40522c:	0040876c 	.word	0x0040876c
  405230:	00408768 	.word	0x00408768

00405234 <__sbprintf>:
  405234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405238:	460c      	mov	r4, r1
  40523a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40523e:	8989      	ldrh	r1, [r1, #12]
  405240:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405242:	89e5      	ldrh	r5, [r4, #14]
  405244:	9619      	str	r6, [sp, #100]	; 0x64
  405246:	f021 0102 	bic.w	r1, r1, #2
  40524a:	4606      	mov	r6, r0
  40524c:	69e0      	ldr	r0, [r4, #28]
  40524e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405252:	4617      	mov	r7, r2
  405254:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405258:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40525a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40525e:	4698      	mov	r8, r3
  405260:	ad1a      	add	r5, sp, #104	; 0x68
  405262:	2300      	movs	r3, #0
  405264:	9007      	str	r0, [sp, #28]
  405266:	a816      	add	r0, sp, #88	; 0x58
  405268:	9209      	str	r2, [sp, #36]	; 0x24
  40526a:	9306      	str	r3, [sp, #24]
  40526c:	9500      	str	r5, [sp, #0]
  40526e:	9504      	str	r5, [sp, #16]
  405270:	9102      	str	r1, [sp, #8]
  405272:	9105      	str	r1, [sp, #20]
  405274:	f001 fc82 	bl	406b7c <__retarget_lock_init_recursive>
  405278:	4643      	mov	r3, r8
  40527a:	463a      	mov	r2, r7
  40527c:	4669      	mov	r1, sp
  40527e:	4630      	mov	r0, r6
  405280:	f7fe fd2c 	bl	403cdc <_vfprintf_r>
  405284:	1e05      	subs	r5, r0, #0
  405286:	db07      	blt.n	405298 <__sbprintf+0x64>
  405288:	4630      	mov	r0, r6
  40528a:	4669      	mov	r1, sp
  40528c:	f001 f8e6 	bl	40645c <_fflush_r>
  405290:	2800      	cmp	r0, #0
  405292:	bf18      	it	ne
  405294:	f04f 35ff 	movne.w	r5, #4294967295
  405298:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40529c:	065b      	lsls	r3, r3, #25
  40529e:	d503      	bpl.n	4052a8 <__sbprintf+0x74>
  4052a0:	89a3      	ldrh	r3, [r4, #12]
  4052a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052a6:	81a3      	strh	r3, [r4, #12]
  4052a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4052aa:	f001 fc69 	bl	406b80 <__retarget_lock_close_recursive>
  4052ae:	4628      	mov	r0, r5
  4052b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4052b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004052b8 <__swsetup_r>:
  4052b8:	b538      	push	{r3, r4, r5, lr}
  4052ba:	4b30      	ldr	r3, [pc, #192]	; (40537c <__swsetup_r+0xc4>)
  4052bc:	681b      	ldr	r3, [r3, #0]
  4052be:	4605      	mov	r5, r0
  4052c0:	460c      	mov	r4, r1
  4052c2:	b113      	cbz	r3, 4052ca <__swsetup_r+0x12>
  4052c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4052c6:	2a00      	cmp	r2, #0
  4052c8:	d038      	beq.n	40533c <__swsetup_r+0x84>
  4052ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4052ce:	b293      	uxth	r3, r2
  4052d0:	0718      	lsls	r0, r3, #28
  4052d2:	d50c      	bpl.n	4052ee <__swsetup_r+0x36>
  4052d4:	6920      	ldr	r0, [r4, #16]
  4052d6:	b1a8      	cbz	r0, 405304 <__swsetup_r+0x4c>
  4052d8:	f013 0201 	ands.w	r2, r3, #1
  4052dc:	d01e      	beq.n	40531c <__swsetup_r+0x64>
  4052de:	6963      	ldr	r3, [r4, #20]
  4052e0:	2200      	movs	r2, #0
  4052e2:	425b      	negs	r3, r3
  4052e4:	61a3      	str	r3, [r4, #24]
  4052e6:	60a2      	str	r2, [r4, #8]
  4052e8:	b1f0      	cbz	r0, 405328 <__swsetup_r+0x70>
  4052ea:	2000      	movs	r0, #0
  4052ec:	bd38      	pop	{r3, r4, r5, pc}
  4052ee:	06d9      	lsls	r1, r3, #27
  4052f0:	d53c      	bpl.n	40536c <__swsetup_r+0xb4>
  4052f2:	0758      	lsls	r0, r3, #29
  4052f4:	d426      	bmi.n	405344 <__swsetup_r+0x8c>
  4052f6:	6920      	ldr	r0, [r4, #16]
  4052f8:	f042 0308 	orr.w	r3, r2, #8
  4052fc:	81a3      	strh	r3, [r4, #12]
  4052fe:	b29b      	uxth	r3, r3
  405300:	2800      	cmp	r0, #0
  405302:	d1e9      	bne.n	4052d8 <__swsetup_r+0x20>
  405304:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405308:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40530c:	d0e4      	beq.n	4052d8 <__swsetup_r+0x20>
  40530e:	4628      	mov	r0, r5
  405310:	4621      	mov	r1, r4
  405312:	f001 fc69 	bl	406be8 <__smakebuf_r>
  405316:	89a3      	ldrh	r3, [r4, #12]
  405318:	6920      	ldr	r0, [r4, #16]
  40531a:	e7dd      	b.n	4052d8 <__swsetup_r+0x20>
  40531c:	0799      	lsls	r1, r3, #30
  40531e:	bf58      	it	pl
  405320:	6962      	ldrpl	r2, [r4, #20]
  405322:	60a2      	str	r2, [r4, #8]
  405324:	2800      	cmp	r0, #0
  405326:	d1e0      	bne.n	4052ea <__swsetup_r+0x32>
  405328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40532c:	061a      	lsls	r2, r3, #24
  40532e:	d5dd      	bpl.n	4052ec <__swsetup_r+0x34>
  405330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405334:	81a3      	strh	r3, [r4, #12]
  405336:	f04f 30ff 	mov.w	r0, #4294967295
  40533a:	bd38      	pop	{r3, r4, r5, pc}
  40533c:	4618      	mov	r0, r3
  40533e:	f001 f8e5 	bl	40650c <__sinit>
  405342:	e7c2      	b.n	4052ca <__swsetup_r+0x12>
  405344:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405346:	b151      	cbz	r1, 40535e <__swsetup_r+0xa6>
  405348:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40534c:	4299      	cmp	r1, r3
  40534e:	d004      	beq.n	40535a <__swsetup_r+0xa2>
  405350:	4628      	mov	r0, r5
  405352:	f001 f97d 	bl	406650 <_free_r>
  405356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40535a:	2300      	movs	r3, #0
  40535c:	6323      	str	r3, [r4, #48]	; 0x30
  40535e:	2300      	movs	r3, #0
  405360:	6920      	ldr	r0, [r4, #16]
  405362:	6063      	str	r3, [r4, #4]
  405364:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405368:	6020      	str	r0, [r4, #0]
  40536a:	e7c5      	b.n	4052f8 <__swsetup_r+0x40>
  40536c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405370:	2309      	movs	r3, #9
  405372:	602b      	str	r3, [r5, #0]
  405374:	f04f 30ff 	mov.w	r0, #4294967295
  405378:	81a2      	strh	r2, [r4, #12]
  40537a:	bd38      	pop	{r3, r4, r5, pc}
  40537c:	2040000c 	.word	0x2040000c

00405380 <register_fini>:
  405380:	4b02      	ldr	r3, [pc, #8]	; (40538c <register_fini+0xc>)
  405382:	b113      	cbz	r3, 40538a <register_fini+0xa>
  405384:	4802      	ldr	r0, [pc, #8]	; (405390 <register_fini+0x10>)
  405386:	f000 b805 	b.w	405394 <atexit>
  40538a:	4770      	bx	lr
  40538c:	00000000 	.word	0x00000000
  405390:	0040657d 	.word	0x0040657d

00405394 <atexit>:
  405394:	2300      	movs	r3, #0
  405396:	4601      	mov	r1, r0
  405398:	461a      	mov	r2, r3
  40539a:	4618      	mov	r0, r3
  40539c:	f002 ba68 	b.w	407870 <__register_exitproc>

004053a0 <quorem>:
  4053a0:	6902      	ldr	r2, [r0, #16]
  4053a2:	690b      	ldr	r3, [r1, #16]
  4053a4:	4293      	cmp	r3, r2
  4053a6:	f300 808d 	bgt.w	4054c4 <quorem+0x124>
  4053aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053ae:	f103 38ff 	add.w	r8, r3, #4294967295
  4053b2:	f101 0714 	add.w	r7, r1, #20
  4053b6:	f100 0b14 	add.w	fp, r0, #20
  4053ba:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4053be:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4053c2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4053c6:	b083      	sub	sp, #12
  4053c8:	3201      	adds	r2, #1
  4053ca:	fbb3 f9f2 	udiv	r9, r3, r2
  4053ce:	eb0b 0304 	add.w	r3, fp, r4
  4053d2:	9400      	str	r4, [sp, #0]
  4053d4:	eb07 0a04 	add.w	sl, r7, r4
  4053d8:	9301      	str	r3, [sp, #4]
  4053da:	f1b9 0f00 	cmp.w	r9, #0
  4053de:	d039      	beq.n	405454 <quorem+0xb4>
  4053e0:	2500      	movs	r5, #0
  4053e2:	462e      	mov	r6, r5
  4053e4:	46bc      	mov	ip, r7
  4053e6:	46de      	mov	lr, fp
  4053e8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4053ec:	f8de 3000 	ldr.w	r3, [lr]
  4053f0:	b2a2      	uxth	r2, r4
  4053f2:	fb09 5502 	mla	r5, r9, r2, r5
  4053f6:	0c22      	lsrs	r2, r4, #16
  4053f8:	0c2c      	lsrs	r4, r5, #16
  4053fa:	fb09 4202 	mla	r2, r9, r2, r4
  4053fe:	b2ad      	uxth	r5, r5
  405400:	1b75      	subs	r5, r6, r5
  405402:	b296      	uxth	r6, r2
  405404:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405408:	fa15 f383 	uxtah	r3, r5, r3
  40540c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405410:	b29b      	uxth	r3, r3
  405412:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405416:	45e2      	cmp	sl, ip
  405418:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40541c:	f84e 3b04 	str.w	r3, [lr], #4
  405420:	ea4f 4626 	mov.w	r6, r6, asr #16
  405424:	d2e0      	bcs.n	4053e8 <quorem+0x48>
  405426:	9b00      	ldr	r3, [sp, #0]
  405428:	f85b 3003 	ldr.w	r3, [fp, r3]
  40542c:	b993      	cbnz	r3, 405454 <quorem+0xb4>
  40542e:	9c01      	ldr	r4, [sp, #4]
  405430:	1f23      	subs	r3, r4, #4
  405432:	459b      	cmp	fp, r3
  405434:	d20c      	bcs.n	405450 <quorem+0xb0>
  405436:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40543a:	b94b      	cbnz	r3, 405450 <quorem+0xb0>
  40543c:	f1a4 0308 	sub.w	r3, r4, #8
  405440:	e002      	b.n	405448 <quorem+0xa8>
  405442:	681a      	ldr	r2, [r3, #0]
  405444:	3b04      	subs	r3, #4
  405446:	b91a      	cbnz	r2, 405450 <quorem+0xb0>
  405448:	459b      	cmp	fp, r3
  40544a:	f108 38ff 	add.w	r8, r8, #4294967295
  40544e:	d3f8      	bcc.n	405442 <quorem+0xa2>
  405450:	f8c0 8010 	str.w	r8, [r0, #16]
  405454:	4604      	mov	r4, r0
  405456:	f001 fec5 	bl	4071e4 <__mcmp>
  40545a:	2800      	cmp	r0, #0
  40545c:	db2e      	blt.n	4054bc <quorem+0x11c>
  40545e:	f109 0901 	add.w	r9, r9, #1
  405462:	465d      	mov	r5, fp
  405464:	2300      	movs	r3, #0
  405466:	f857 1b04 	ldr.w	r1, [r7], #4
  40546a:	6828      	ldr	r0, [r5, #0]
  40546c:	b28a      	uxth	r2, r1
  40546e:	1a9a      	subs	r2, r3, r2
  405470:	0c0b      	lsrs	r3, r1, #16
  405472:	fa12 f280 	uxtah	r2, r2, r0
  405476:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40547a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40547e:	b292      	uxth	r2, r2
  405480:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405484:	45ba      	cmp	sl, r7
  405486:	f845 2b04 	str.w	r2, [r5], #4
  40548a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40548e:	d2ea      	bcs.n	405466 <quorem+0xc6>
  405490:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405494:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405498:	b982      	cbnz	r2, 4054bc <quorem+0x11c>
  40549a:	1f1a      	subs	r2, r3, #4
  40549c:	4593      	cmp	fp, r2
  40549e:	d20b      	bcs.n	4054b8 <quorem+0x118>
  4054a0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4054a4:	b942      	cbnz	r2, 4054b8 <quorem+0x118>
  4054a6:	3b08      	subs	r3, #8
  4054a8:	e002      	b.n	4054b0 <quorem+0x110>
  4054aa:	681a      	ldr	r2, [r3, #0]
  4054ac:	3b04      	subs	r3, #4
  4054ae:	b91a      	cbnz	r2, 4054b8 <quorem+0x118>
  4054b0:	459b      	cmp	fp, r3
  4054b2:	f108 38ff 	add.w	r8, r8, #4294967295
  4054b6:	d3f8      	bcc.n	4054aa <quorem+0x10a>
  4054b8:	f8c4 8010 	str.w	r8, [r4, #16]
  4054bc:	4648      	mov	r0, r9
  4054be:	b003      	add	sp, #12
  4054c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054c4:	2000      	movs	r0, #0
  4054c6:	4770      	bx	lr

004054c8 <_dtoa_r>:
  4054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4054ce:	b09b      	sub	sp, #108	; 0x6c
  4054d0:	4604      	mov	r4, r0
  4054d2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4054d4:	4692      	mov	sl, r2
  4054d6:	469b      	mov	fp, r3
  4054d8:	b141      	cbz	r1, 4054ec <_dtoa_r+0x24>
  4054da:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4054dc:	604a      	str	r2, [r1, #4]
  4054de:	2301      	movs	r3, #1
  4054e0:	4093      	lsls	r3, r2
  4054e2:	608b      	str	r3, [r1, #8]
  4054e4:	f001 fca6 	bl	406e34 <_Bfree>
  4054e8:	2300      	movs	r3, #0
  4054ea:	6423      	str	r3, [r4, #64]	; 0x40
  4054ec:	f1bb 0f00 	cmp.w	fp, #0
  4054f0:	465d      	mov	r5, fp
  4054f2:	db35      	blt.n	405560 <_dtoa_r+0x98>
  4054f4:	2300      	movs	r3, #0
  4054f6:	6033      	str	r3, [r6, #0]
  4054f8:	4b9d      	ldr	r3, [pc, #628]	; (405770 <_dtoa_r+0x2a8>)
  4054fa:	43ab      	bics	r3, r5
  4054fc:	d015      	beq.n	40552a <_dtoa_r+0x62>
  4054fe:	4650      	mov	r0, sl
  405500:	4659      	mov	r1, fp
  405502:	2200      	movs	r2, #0
  405504:	2300      	movs	r3, #0
  405506:	f002 feab 	bl	408260 <__aeabi_dcmpeq>
  40550a:	4680      	mov	r8, r0
  40550c:	2800      	cmp	r0, #0
  40550e:	d02d      	beq.n	40556c <_dtoa_r+0xa4>
  405510:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405512:	2301      	movs	r3, #1
  405514:	6013      	str	r3, [r2, #0]
  405516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405518:	2b00      	cmp	r3, #0
  40551a:	f000 80bd 	beq.w	405698 <_dtoa_r+0x1d0>
  40551e:	4895      	ldr	r0, [pc, #596]	; (405774 <_dtoa_r+0x2ac>)
  405520:	6018      	str	r0, [r3, #0]
  405522:	3801      	subs	r0, #1
  405524:	b01b      	add	sp, #108	; 0x6c
  405526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40552a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40552c:	f242 730f 	movw	r3, #9999	; 0x270f
  405530:	6013      	str	r3, [r2, #0]
  405532:	f1ba 0f00 	cmp.w	sl, #0
  405536:	d10d      	bne.n	405554 <_dtoa_r+0x8c>
  405538:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40553c:	b955      	cbnz	r5, 405554 <_dtoa_r+0x8c>
  40553e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405540:	488d      	ldr	r0, [pc, #564]	; (405778 <_dtoa_r+0x2b0>)
  405542:	2b00      	cmp	r3, #0
  405544:	d0ee      	beq.n	405524 <_dtoa_r+0x5c>
  405546:	f100 0308 	add.w	r3, r0, #8
  40554a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40554c:	6013      	str	r3, [r2, #0]
  40554e:	b01b      	add	sp, #108	; 0x6c
  405550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405554:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405556:	4889      	ldr	r0, [pc, #548]	; (40577c <_dtoa_r+0x2b4>)
  405558:	2b00      	cmp	r3, #0
  40555a:	d0e3      	beq.n	405524 <_dtoa_r+0x5c>
  40555c:	1cc3      	adds	r3, r0, #3
  40555e:	e7f4      	b.n	40554a <_dtoa_r+0x82>
  405560:	2301      	movs	r3, #1
  405562:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405566:	6033      	str	r3, [r6, #0]
  405568:	46ab      	mov	fp, r5
  40556a:	e7c5      	b.n	4054f8 <_dtoa_r+0x30>
  40556c:	aa18      	add	r2, sp, #96	; 0x60
  40556e:	ab19      	add	r3, sp, #100	; 0x64
  405570:	9201      	str	r2, [sp, #4]
  405572:	9300      	str	r3, [sp, #0]
  405574:	4652      	mov	r2, sl
  405576:	465b      	mov	r3, fp
  405578:	4620      	mov	r0, r4
  40557a:	f001 fed3 	bl	407324 <__d2b>
  40557e:	0d2b      	lsrs	r3, r5, #20
  405580:	4681      	mov	r9, r0
  405582:	d071      	beq.n	405668 <_dtoa_r+0x1a0>
  405584:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405588:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40558c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40558e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405592:	4650      	mov	r0, sl
  405594:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405598:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40559c:	2200      	movs	r2, #0
  40559e:	4b78      	ldr	r3, [pc, #480]	; (405780 <_dtoa_r+0x2b8>)
  4055a0:	f7fd fc44 	bl	402e2c <__aeabi_dsub>
  4055a4:	a36c      	add	r3, pc, #432	; (adr r3, 405758 <_dtoa_r+0x290>)
  4055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055aa:	f002 fbf1 	bl	407d90 <__aeabi_dmul>
  4055ae:	a36c      	add	r3, pc, #432	; (adr r3, 405760 <_dtoa_r+0x298>)
  4055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055b4:	f7fd fc3c 	bl	402e30 <__adddf3>
  4055b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4055bc:	4630      	mov	r0, r6
  4055be:	f7fd fd83 	bl	4030c8 <__aeabi_i2d>
  4055c2:	a369      	add	r3, pc, #420	; (adr r3, 405768 <_dtoa_r+0x2a0>)
  4055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055c8:	f002 fbe2 	bl	407d90 <__aeabi_dmul>
  4055cc:	4602      	mov	r2, r0
  4055ce:	460b      	mov	r3, r1
  4055d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4055d4:	f7fd fc2c 	bl	402e30 <__adddf3>
  4055d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4055dc:	f002 fe88 	bl	4082f0 <__aeabi_d2iz>
  4055e0:	2200      	movs	r2, #0
  4055e2:	9002      	str	r0, [sp, #8]
  4055e4:	2300      	movs	r3, #0
  4055e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4055ea:	f002 fe43 	bl	408274 <__aeabi_dcmplt>
  4055ee:	2800      	cmp	r0, #0
  4055f0:	f040 8173 	bne.w	4058da <_dtoa_r+0x412>
  4055f4:	9d02      	ldr	r5, [sp, #8]
  4055f6:	2d16      	cmp	r5, #22
  4055f8:	f200 815d 	bhi.w	4058b6 <_dtoa_r+0x3ee>
  4055fc:	4b61      	ldr	r3, [pc, #388]	; (405784 <_dtoa_r+0x2bc>)
  4055fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405602:	e9d3 0100 	ldrd	r0, r1, [r3]
  405606:	4652      	mov	r2, sl
  405608:	465b      	mov	r3, fp
  40560a:	f002 fe51 	bl	4082b0 <__aeabi_dcmpgt>
  40560e:	2800      	cmp	r0, #0
  405610:	f000 81c5 	beq.w	40599e <_dtoa_r+0x4d6>
  405614:	1e6b      	subs	r3, r5, #1
  405616:	9302      	str	r3, [sp, #8]
  405618:	2300      	movs	r3, #0
  40561a:	930e      	str	r3, [sp, #56]	; 0x38
  40561c:	1bbf      	subs	r7, r7, r6
  40561e:	1e7b      	subs	r3, r7, #1
  405620:	9306      	str	r3, [sp, #24]
  405622:	f100 8154 	bmi.w	4058ce <_dtoa_r+0x406>
  405626:	2300      	movs	r3, #0
  405628:	9308      	str	r3, [sp, #32]
  40562a:	9b02      	ldr	r3, [sp, #8]
  40562c:	2b00      	cmp	r3, #0
  40562e:	f2c0 8145 	blt.w	4058bc <_dtoa_r+0x3f4>
  405632:	9a06      	ldr	r2, [sp, #24]
  405634:	930d      	str	r3, [sp, #52]	; 0x34
  405636:	4611      	mov	r1, r2
  405638:	4419      	add	r1, r3
  40563a:	2300      	movs	r3, #0
  40563c:	9106      	str	r1, [sp, #24]
  40563e:	930c      	str	r3, [sp, #48]	; 0x30
  405640:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405642:	2b09      	cmp	r3, #9
  405644:	d82a      	bhi.n	40569c <_dtoa_r+0x1d4>
  405646:	2b05      	cmp	r3, #5
  405648:	f340 865b 	ble.w	406302 <_dtoa_r+0xe3a>
  40564c:	3b04      	subs	r3, #4
  40564e:	9324      	str	r3, [sp, #144]	; 0x90
  405650:	2500      	movs	r5, #0
  405652:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405654:	3b02      	subs	r3, #2
  405656:	2b03      	cmp	r3, #3
  405658:	f200 8642 	bhi.w	4062e0 <_dtoa_r+0xe18>
  40565c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405660:	02c903d4 	.word	0x02c903d4
  405664:	046103df 	.word	0x046103df
  405668:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40566a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40566c:	443e      	add	r6, r7
  40566e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405672:	2b20      	cmp	r3, #32
  405674:	f340 818e 	ble.w	405994 <_dtoa_r+0x4cc>
  405678:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40567c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405680:	409d      	lsls	r5, r3
  405682:	fa2a f000 	lsr.w	r0, sl, r0
  405686:	4328      	orrs	r0, r5
  405688:	f7fd fd0e 	bl	4030a8 <__aeabi_ui2d>
  40568c:	2301      	movs	r3, #1
  40568e:	3e01      	subs	r6, #1
  405690:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405694:	9314      	str	r3, [sp, #80]	; 0x50
  405696:	e781      	b.n	40559c <_dtoa_r+0xd4>
  405698:	483b      	ldr	r0, [pc, #236]	; (405788 <_dtoa_r+0x2c0>)
  40569a:	e743      	b.n	405524 <_dtoa_r+0x5c>
  40569c:	2100      	movs	r1, #0
  40569e:	6461      	str	r1, [r4, #68]	; 0x44
  4056a0:	4620      	mov	r0, r4
  4056a2:	9125      	str	r1, [sp, #148]	; 0x94
  4056a4:	f001 fba0 	bl	406de8 <_Balloc>
  4056a8:	f04f 33ff 	mov.w	r3, #4294967295
  4056ac:	930a      	str	r3, [sp, #40]	; 0x28
  4056ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4056b2:	2301      	movs	r3, #1
  4056b4:	9004      	str	r0, [sp, #16]
  4056b6:	6420      	str	r0, [r4, #64]	; 0x40
  4056b8:	9224      	str	r2, [sp, #144]	; 0x90
  4056ba:	930b      	str	r3, [sp, #44]	; 0x2c
  4056bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4056be:	2b00      	cmp	r3, #0
  4056c0:	f2c0 80d9 	blt.w	405876 <_dtoa_r+0x3ae>
  4056c4:	9a02      	ldr	r2, [sp, #8]
  4056c6:	2a0e      	cmp	r2, #14
  4056c8:	f300 80d5 	bgt.w	405876 <_dtoa_r+0x3ae>
  4056cc:	4b2d      	ldr	r3, [pc, #180]	; (405784 <_dtoa_r+0x2bc>)
  4056ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4056da:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4056dc:	2b00      	cmp	r3, #0
  4056de:	f2c0 83ba 	blt.w	405e56 <_dtoa_r+0x98e>
  4056e2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4056e6:	4650      	mov	r0, sl
  4056e8:	462a      	mov	r2, r5
  4056ea:	4633      	mov	r3, r6
  4056ec:	4659      	mov	r1, fp
  4056ee:	f002 fc79 	bl	407fe4 <__aeabi_ddiv>
  4056f2:	f002 fdfd 	bl	4082f0 <__aeabi_d2iz>
  4056f6:	4680      	mov	r8, r0
  4056f8:	f7fd fce6 	bl	4030c8 <__aeabi_i2d>
  4056fc:	462a      	mov	r2, r5
  4056fe:	4633      	mov	r3, r6
  405700:	f002 fb46 	bl	407d90 <__aeabi_dmul>
  405704:	460b      	mov	r3, r1
  405706:	4602      	mov	r2, r0
  405708:	4659      	mov	r1, fp
  40570a:	4650      	mov	r0, sl
  40570c:	f7fd fb8e 	bl	402e2c <__aeabi_dsub>
  405710:	9d04      	ldr	r5, [sp, #16]
  405712:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405716:	702b      	strb	r3, [r5, #0]
  405718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40571a:	2b01      	cmp	r3, #1
  40571c:	4606      	mov	r6, r0
  40571e:	460f      	mov	r7, r1
  405720:	f105 0501 	add.w	r5, r5, #1
  405724:	d068      	beq.n	4057f8 <_dtoa_r+0x330>
  405726:	2200      	movs	r2, #0
  405728:	4b18      	ldr	r3, [pc, #96]	; (40578c <_dtoa_r+0x2c4>)
  40572a:	f002 fb31 	bl	407d90 <__aeabi_dmul>
  40572e:	2200      	movs	r2, #0
  405730:	2300      	movs	r3, #0
  405732:	4606      	mov	r6, r0
  405734:	460f      	mov	r7, r1
  405736:	f002 fd93 	bl	408260 <__aeabi_dcmpeq>
  40573a:	2800      	cmp	r0, #0
  40573c:	f040 8088 	bne.w	405850 <_dtoa_r+0x388>
  405740:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405744:	f04f 0a00 	mov.w	sl, #0
  405748:	f8df b040 	ldr.w	fp, [pc, #64]	; 40578c <_dtoa_r+0x2c4>
  40574c:	940c      	str	r4, [sp, #48]	; 0x30
  40574e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405752:	e028      	b.n	4057a6 <_dtoa_r+0x2de>
  405754:	f3af 8000 	nop.w
  405758:	636f4361 	.word	0x636f4361
  40575c:	3fd287a7 	.word	0x3fd287a7
  405760:	8b60c8b3 	.word	0x8b60c8b3
  405764:	3fc68a28 	.word	0x3fc68a28
  405768:	509f79fb 	.word	0x509f79fb
  40576c:	3fd34413 	.word	0x3fd34413
  405770:	7ff00000 	.word	0x7ff00000
  405774:	004087a1 	.word	0x004087a1
  405778:	004087c4 	.word	0x004087c4
  40577c:	004087d0 	.word	0x004087d0
  405780:	3ff80000 	.word	0x3ff80000
  405784:	00408800 	.word	0x00408800
  405788:	004087a0 	.word	0x004087a0
  40578c:	40240000 	.word	0x40240000
  405790:	f002 fafe 	bl	407d90 <__aeabi_dmul>
  405794:	2200      	movs	r2, #0
  405796:	2300      	movs	r3, #0
  405798:	4606      	mov	r6, r0
  40579a:	460f      	mov	r7, r1
  40579c:	f002 fd60 	bl	408260 <__aeabi_dcmpeq>
  4057a0:	2800      	cmp	r0, #0
  4057a2:	f040 83c1 	bne.w	405f28 <_dtoa_r+0xa60>
  4057a6:	4642      	mov	r2, r8
  4057a8:	464b      	mov	r3, r9
  4057aa:	4630      	mov	r0, r6
  4057ac:	4639      	mov	r1, r7
  4057ae:	f002 fc19 	bl	407fe4 <__aeabi_ddiv>
  4057b2:	f002 fd9d 	bl	4082f0 <__aeabi_d2iz>
  4057b6:	4604      	mov	r4, r0
  4057b8:	f7fd fc86 	bl	4030c8 <__aeabi_i2d>
  4057bc:	4642      	mov	r2, r8
  4057be:	464b      	mov	r3, r9
  4057c0:	f002 fae6 	bl	407d90 <__aeabi_dmul>
  4057c4:	4602      	mov	r2, r0
  4057c6:	460b      	mov	r3, r1
  4057c8:	4630      	mov	r0, r6
  4057ca:	4639      	mov	r1, r7
  4057cc:	f7fd fb2e 	bl	402e2c <__aeabi_dsub>
  4057d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4057d4:	9e04      	ldr	r6, [sp, #16]
  4057d6:	f805 eb01 	strb.w	lr, [r5], #1
  4057da:	eba5 0e06 	sub.w	lr, r5, r6
  4057de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4057e0:	45b6      	cmp	lr, r6
  4057e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4057e6:	4652      	mov	r2, sl
  4057e8:	465b      	mov	r3, fp
  4057ea:	d1d1      	bne.n	405790 <_dtoa_r+0x2c8>
  4057ec:	46a0      	mov	r8, r4
  4057ee:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4057f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4057f4:	4606      	mov	r6, r0
  4057f6:	460f      	mov	r7, r1
  4057f8:	4632      	mov	r2, r6
  4057fa:	463b      	mov	r3, r7
  4057fc:	4630      	mov	r0, r6
  4057fe:	4639      	mov	r1, r7
  405800:	f7fd fb16 	bl	402e30 <__adddf3>
  405804:	4606      	mov	r6, r0
  405806:	460f      	mov	r7, r1
  405808:	4602      	mov	r2, r0
  40580a:	460b      	mov	r3, r1
  40580c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405810:	f002 fd30 	bl	408274 <__aeabi_dcmplt>
  405814:	b948      	cbnz	r0, 40582a <_dtoa_r+0x362>
  405816:	4632      	mov	r2, r6
  405818:	463b      	mov	r3, r7
  40581a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40581e:	f002 fd1f 	bl	408260 <__aeabi_dcmpeq>
  405822:	b1a8      	cbz	r0, 405850 <_dtoa_r+0x388>
  405824:	f018 0f01 	tst.w	r8, #1
  405828:	d012      	beq.n	405850 <_dtoa_r+0x388>
  40582a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40582e:	9a04      	ldr	r2, [sp, #16]
  405830:	1e6b      	subs	r3, r5, #1
  405832:	e004      	b.n	40583e <_dtoa_r+0x376>
  405834:	429a      	cmp	r2, r3
  405836:	f000 8401 	beq.w	40603c <_dtoa_r+0xb74>
  40583a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40583e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405842:	f103 0501 	add.w	r5, r3, #1
  405846:	d0f5      	beq.n	405834 <_dtoa_r+0x36c>
  405848:	f108 0801 	add.w	r8, r8, #1
  40584c:	f883 8000 	strb.w	r8, [r3]
  405850:	4649      	mov	r1, r9
  405852:	4620      	mov	r0, r4
  405854:	f001 faee 	bl	406e34 <_Bfree>
  405858:	2200      	movs	r2, #0
  40585a:	9b02      	ldr	r3, [sp, #8]
  40585c:	702a      	strb	r2, [r5, #0]
  40585e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405860:	3301      	adds	r3, #1
  405862:	6013      	str	r3, [r2, #0]
  405864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405866:	2b00      	cmp	r3, #0
  405868:	f000 839e 	beq.w	405fa8 <_dtoa_r+0xae0>
  40586c:	9804      	ldr	r0, [sp, #16]
  40586e:	601d      	str	r5, [r3, #0]
  405870:	b01b      	add	sp, #108	; 0x6c
  405872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405878:	2a00      	cmp	r2, #0
  40587a:	d03e      	beq.n	4058fa <_dtoa_r+0x432>
  40587c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40587e:	2a01      	cmp	r2, #1
  405880:	f340 8311 	ble.w	405ea6 <_dtoa_r+0x9de>
  405884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405888:	1e5f      	subs	r7, r3, #1
  40588a:	42ba      	cmp	r2, r7
  40588c:	f2c0 838f 	blt.w	405fae <_dtoa_r+0xae6>
  405890:	1bd7      	subs	r7, r2, r7
  405892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405894:	2b00      	cmp	r3, #0
  405896:	f2c0 848b 	blt.w	4061b0 <_dtoa_r+0xce8>
  40589a:	9d08      	ldr	r5, [sp, #32]
  40589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40589e:	9a08      	ldr	r2, [sp, #32]
  4058a0:	441a      	add	r2, r3
  4058a2:	9208      	str	r2, [sp, #32]
  4058a4:	9a06      	ldr	r2, [sp, #24]
  4058a6:	2101      	movs	r1, #1
  4058a8:	441a      	add	r2, r3
  4058aa:	4620      	mov	r0, r4
  4058ac:	9206      	str	r2, [sp, #24]
  4058ae:	f001 fb5b 	bl	406f68 <__i2b>
  4058b2:	4606      	mov	r6, r0
  4058b4:	e024      	b.n	405900 <_dtoa_r+0x438>
  4058b6:	2301      	movs	r3, #1
  4058b8:	930e      	str	r3, [sp, #56]	; 0x38
  4058ba:	e6af      	b.n	40561c <_dtoa_r+0x154>
  4058bc:	9a08      	ldr	r2, [sp, #32]
  4058be:	9b02      	ldr	r3, [sp, #8]
  4058c0:	1ad2      	subs	r2, r2, r3
  4058c2:	425b      	negs	r3, r3
  4058c4:	930c      	str	r3, [sp, #48]	; 0x30
  4058c6:	2300      	movs	r3, #0
  4058c8:	9208      	str	r2, [sp, #32]
  4058ca:	930d      	str	r3, [sp, #52]	; 0x34
  4058cc:	e6b8      	b.n	405640 <_dtoa_r+0x178>
  4058ce:	f1c7 0301 	rsb	r3, r7, #1
  4058d2:	9308      	str	r3, [sp, #32]
  4058d4:	2300      	movs	r3, #0
  4058d6:	9306      	str	r3, [sp, #24]
  4058d8:	e6a7      	b.n	40562a <_dtoa_r+0x162>
  4058da:	9d02      	ldr	r5, [sp, #8]
  4058dc:	4628      	mov	r0, r5
  4058de:	f7fd fbf3 	bl	4030c8 <__aeabi_i2d>
  4058e2:	4602      	mov	r2, r0
  4058e4:	460b      	mov	r3, r1
  4058e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4058ea:	f002 fcb9 	bl	408260 <__aeabi_dcmpeq>
  4058ee:	2800      	cmp	r0, #0
  4058f0:	f47f ae80 	bne.w	4055f4 <_dtoa_r+0x12c>
  4058f4:	1e6b      	subs	r3, r5, #1
  4058f6:	9302      	str	r3, [sp, #8]
  4058f8:	e67c      	b.n	4055f4 <_dtoa_r+0x12c>
  4058fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4058fc:	9d08      	ldr	r5, [sp, #32]
  4058fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405900:	2d00      	cmp	r5, #0
  405902:	dd0c      	ble.n	40591e <_dtoa_r+0x456>
  405904:	9906      	ldr	r1, [sp, #24]
  405906:	2900      	cmp	r1, #0
  405908:	460b      	mov	r3, r1
  40590a:	dd08      	ble.n	40591e <_dtoa_r+0x456>
  40590c:	42a9      	cmp	r1, r5
  40590e:	9a08      	ldr	r2, [sp, #32]
  405910:	bfa8      	it	ge
  405912:	462b      	movge	r3, r5
  405914:	1ad2      	subs	r2, r2, r3
  405916:	1aed      	subs	r5, r5, r3
  405918:	1acb      	subs	r3, r1, r3
  40591a:	9208      	str	r2, [sp, #32]
  40591c:	9306      	str	r3, [sp, #24]
  40591e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405920:	b1d3      	cbz	r3, 405958 <_dtoa_r+0x490>
  405922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405924:	2b00      	cmp	r3, #0
  405926:	f000 82b7 	beq.w	405e98 <_dtoa_r+0x9d0>
  40592a:	2f00      	cmp	r7, #0
  40592c:	dd10      	ble.n	405950 <_dtoa_r+0x488>
  40592e:	4631      	mov	r1, r6
  405930:	463a      	mov	r2, r7
  405932:	4620      	mov	r0, r4
  405934:	f001 fbb4 	bl	4070a0 <__pow5mult>
  405938:	464a      	mov	r2, r9
  40593a:	4601      	mov	r1, r0
  40593c:	4606      	mov	r6, r0
  40593e:	4620      	mov	r0, r4
  405940:	f001 fb1c 	bl	406f7c <__multiply>
  405944:	4649      	mov	r1, r9
  405946:	4680      	mov	r8, r0
  405948:	4620      	mov	r0, r4
  40594a:	f001 fa73 	bl	406e34 <_Bfree>
  40594e:	46c1      	mov	r9, r8
  405950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405952:	1bda      	subs	r2, r3, r7
  405954:	f040 82a1 	bne.w	405e9a <_dtoa_r+0x9d2>
  405958:	2101      	movs	r1, #1
  40595a:	4620      	mov	r0, r4
  40595c:	f001 fb04 	bl	406f68 <__i2b>
  405960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405962:	2b00      	cmp	r3, #0
  405964:	4680      	mov	r8, r0
  405966:	dd1c      	ble.n	4059a2 <_dtoa_r+0x4da>
  405968:	4601      	mov	r1, r0
  40596a:	461a      	mov	r2, r3
  40596c:	4620      	mov	r0, r4
  40596e:	f001 fb97 	bl	4070a0 <__pow5mult>
  405972:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405974:	2b01      	cmp	r3, #1
  405976:	4680      	mov	r8, r0
  405978:	f340 8254 	ble.w	405e24 <_dtoa_r+0x95c>
  40597c:	2300      	movs	r3, #0
  40597e:	930c      	str	r3, [sp, #48]	; 0x30
  405980:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405984:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405988:	6918      	ldr	r0, [r3, #16]
  40598a:	f001 fa9d 	bl	406ec8 <__hi0bits>
  40598e:	f1c0 0020 	rsb	r0, r0, #32
  405992:	e010      	b.n	4059b6 <_dtoa_r+0x4ee>
  405994:	f1c3 0520 	rsb	r5, r3, #32
  405998:	fa0a f005 	lsl.w	r0, sl, r5
  40599c:	e674      	b.n	405688 <_dtoa_r+0x1c0>
  40599e:	900e      	str	r0, [sp, #56]	; 0x38
  4059a0:	e63c      	b.n	40561c <_dtoa_r+0x154>
  4059a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059a4:	2b01      	cmp	r3, #1
  4059a6:	f340 8287 	ble.w	405eb8 <_dtoa_r+0x9f0>
  4059aa:	2300      	movs	r3, #0
  4059ac:	930c      	str	r3, [sp, #48]	; 0x30
  4059ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059b0:	2001      	movs	r0, #1
  4059b2:	2b00      	cmp	r3, #0
  4059b4:	d1e4      	bne.n	405980 <_dtoa_r+0x4b8>
  4059b6:	9a06      	ldr	r2, [sp, #24]
  4059b8:	4410      	add	r0, r2
  4059ba:	f010 001f 	ands.w	r0, r0, #31
  4059be:	f000 80a1 	beq.w	405b04 <_dtoa_r+0x63c>
  4059c2:	f1c0 0320 	rsb	r3, r0, #32
  4059c6:	2b04      	cmp	r3, #4
  4059c8:	f340 849e 	ble.w	406308 <_dtoa_r+0xe40>
  4059cc:	9b08      	ldr	r3, [sp, #32]
  4059ce:	f1c0 001c 	rsb	r0, r0, #28
  4059d2:	4403      	add	r3, r0
  4059d4:	9308      	str	r3, [sp, #32]
  4059d6:	4613      	mov	r3, r2
  4059d8:	4403      	add	r3, r0
  4059da:	4405      	add	r5, r0
  4059dc:	9306      	str	r3, [sp, #24]
  4059de:	9b08      	ldr	r3, [sp, #32]
  4059e0:	2b00      	cmp	r3, #0
  4059e2:	dd05      	ble.n	4059f0 <_dtoa_r+0x528>
  4059e4:	4649      	mov	r1, r9
  4059e6:	461a      	mov	r2, r3
  4059e8:	4620      	mov	r0, r4
  4059ea:	f001 fba9 	bl	407140 <__lshift>
  4059ee:	4681      	mov	r9, r0
  4059f0:	9b06      	ldr	r3, [sp, #24]
  4059f2:	2b00      	cmp	r3, #0
  4059f4:	dd05      	ble.n	405a02 <_dtoa_r+0x53a>
  4059f6:	4641      	mov	r1, r8
  4059f8:	461a      	mov	r2, r3
  4059fa:	4620      	mov	r0, r4
  4059fc:	f001 fba0 	bl	407140 <__lshift>
  405a00:	4680      	mov	r8, r0
  405a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a04:	2b00      	cmp	r3, #0
  405a06:	f040 8086 	bne.w	405b16 <_dtoa_r+0x64e>
  405a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a0c:	2b00      	cmp	r3, #0
  405a0e:	f340 8266 	ble.w	405ede <_dtoa_r+0xa16>
  405a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a14:	2b00      	cmp	r3, #0
  405a16:	f000 8098 	beq.w	405b4a <_dtoa_r+0x682>
  405a1a:	2d00      	cmp	r5, #0
  405a1c:	dd05      	ble.n	405a2a <_dtoa_r+0x562>
  405a1e:	4631      	mov	r1, r6
  405a20:	462a      	mov	r2, r5
  405a22:	4620      	mov	r0, r4
  405a24:	f001 fb8c 	bl	407140 <__lshift>
  405a28:	4606      	mov	r6, r0
  405a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a2c:	2b00      	cmp	r3, #0
  405a2e:	f040 8337 	bne.w	4060a0 <_dtoa_r+0xbd8>
  405a32:	9606      	str	r6, [sp, #24]
  405a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a36:	9a04      	ldr	r2, [sp, #16]
  405a38:	f8dd b018 	ldr.w	fp, [sp, #24]
  405a3c:	3b01      	subs	r3, #1
  405a3e:	18d3      	adds	r3, r2, r3
  405a40:	930b      	str	r3, [sp, #44]	; 0x2c
  405a42:	f00a 0301 	and.w	r3, sl, #1
  405a46:	930c      	str	r3, [sp, #48]	; 0x30
  405a48:	4617      	mov	r7, r2
  405a4a:	46c2      	mov	sl, r8
  405a4c:	4651      	mov	r1, sl
  405a4e:	4648      	mov	r0, r9
  405a50:	f7ff fca6 	bl	4053a0 <quorem>
  405a54:	4631      	mov	r1, r6
  405a56:	4605      	mov	r5, r0
  405a58:	4648      	mov	r0, r9
  405a5a:	f001 fbc3 	bl	4071e4 <__mcmp>
  405a5e:	465a      	mov	r2, fp
  405a60:	900a      	str	r0, [sp, #40]	; 0x28
  405a62:	4651      	mov	r1, sl
  405a64:	4620      	mov	r0, r4
  405a66:	f001 fbd9 	bl	40721c <__mdiff>
  405a6a:	68c2      	ldr	r2, [r0, #12]
  405a6c:	4680      	mov	r8, r0
  405a6e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405a72:	2a00      	cmp	r2, #0
  405a74:	f040 822b 	bne.w	405ece <_dtoa_r+0xa06>
  405a78:	4601      	mov	r1, r0
  405a7a:	4648      	mov	r0, r9
  405a7c:	9308      	str	r3, [sp, #32]
  405a7e:	f001 fbb1 	bl	4071e4 <__mcmp>
  405a82:	4641      	mov	r1, r8
  405a84:	9006      	str	r0, [sp, #24]
  405a86:	4620      	mov	r0, r4
  405a88:	f001 f9d4 	bl	406e34 <_Bfree>
  405a8c:	9a06      	ldr	r2, [sp, #24]
  405a8e:	9b08      	ldr	r3, [sp, #32]
  405a90:	b932      	cbnz	r2, 405aa0 <_dtoa_r+0x5d8>
  405a92:	9924      	ldr	r1, [sp, #144]	; 0x90
  405a94:	b921      	cbnz	r1, 405aa0 <_dtoa_r+0x5d8>
  405a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405a98:	2a00      	cmp	r2, #0
  405a9a:	f000 83ef 	beq.w	40627c <_dtoa_r+0xdb4>
  405a9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
  405aa2:	2900      	cmp	r1, #0
  405aa4:	f2c0 829f 	blt.w	405fe6 <_dtoa_r+0xb1e>
  405aa8:	d105      	bne.n	405ab6 <_dtoa_r+0x5ee>
  405aaa:	9924      	ldr	r1, [sp, #144]	; 0x90
  405aac:	b919      	cbnz	r1, 405ab6 <_dtoa_r+0x5ee>
  405aae:	990c      	ldr	r1, [sp, #48]	; 0x30
  405ab0:	2900      	cmp	r1, #0
  405ab2:	f000 8298 	beq.w	405fe6 <_dtoa_r+0xb1e>
  405ab6:	2a00      	cmp	r2, #0
  405ab8:	f300 8306 	bgt.w	4060c8 <_dtoa_r+0xc00>
  405abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405abe:	703b      	strb	r3, [r7, #0]
  405ac0:	f107 0801 	add.w	r8, r7, #1
  405ac4:	4297      	cmp	r7, r2
  405ac6:	4645      	mov	r5, r8
  405ac8:	f000 830c 	beq.w	4060e4 <_dtoa_r+0xc1c>
  405acc:	4649      	mov	r1, r9
  405ace:	2300      	movs	r3, #0
  405ad0:	220a      	movs	r2, #10
  405ad2:	4620      	mov	r0, r4
  405ad4:	f001 f9b8 	bl	406e48 <__multadd>
  405ad8:	455e      	cmp	r6, fp
  405ada:	4681      	mov	r9, r0
  405adc:	4631      	mov	r1, r6
  405ade:	f04f 0300 	mov.w	r3, #0
  405ae2:	f04f 020a 	mov.w	r2, #10
  405ae6:	4620      	mov	r0, r4
  405ae8:	f000 81eb 	beq.w	405ec2 <_dtoa_r+0x9fa>
  405aec:	f001 f9ac 	bl	406e48 <__multadd>
  405af0:	4659      	mov	r1, fp
  405af2:	4606      	mov	r6, r0
  405af4:	2300      	movs	r3, #0
  405af6:	220a      	movs	r2, #10
  405af8:	4620      	mov	r0, r4
  405afa:	f001 f9a5 	bl	406e48 <__multadd>
  405afe:	4647      	mov	r7, r8
  405b00:	4683      	mov	fp, r0
  405b02:	e7a3      	b.n	405a4c <_dtoa_r+0x584>
  405b04:	201c      	movs	r0, #28
  405b06:	9b08      	ldr	r3, [sp, #32]
  405b08:	4403      	add	r3, r0
  405b0a:	9308      	str	r3, [sp, #32]
  405b0c:	9b06      	ldr	r3, [sp, #24]
  405b0e:	4403      	add	r3, r0
  405b10:	4405      	add	r5, r0
  405b12:	9306      	str	r3, [sp, #24]
  405b14:	e763      	b.n	4059de <_dtoa_r+0x516>
  405b16:	4641      	mov	r1, r8
  405b18:	4648      	mov	r0, r9
  405b1a:	f001 fb63 	bl	4071e4 <__mcmp>
  405b1e:	2800      	cmp	r0, #0
  405b20:	f6bf af73 	bge.w	405a0a <_dtoa_r+0x542>
  405b24:	9f02      	ldr	r7, [sp, #8]
  405b26:	4649      	mov	r1, r9
  405b28:	2300      	movs	r3, #0
  405b2a:	220a      	movs	r2, #10
  405b2c:	4620      	mov	r0, r4
  405b2e:	3f01      	subs	r7, #1
  405b30:	9702      	str	r7, [sp, #8]
  405b32:	f001 f989 	bl	406e48 <__multadd>
  405b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b38:	4681      	mov	r9, r0
  405b3a:	2b00      	cmp	r3, #0
  405b3c:	f040 83b6 	bne.w	4062ac <_dtoa_r+0xde4>
  405b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405b42:	2b00      	cmp	r3, #0
  405b44:	f340 83bf 	ble.w	4062c6 <_dtoa_r+0xdfe>
  405b48:	930a      	str	r3, [sp, #40]	; 0x28
  405b4a:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405b50:	465d      	mov	r5, fp
  405b52:	e002      	b.n	405b5a <_dtoa_r+0x692>
  405b54:	f001 f978 	bl	406e48 <__multadd>
  405b58:	4681      	mov	r9, r0
  405b5a:	4641      	mov	r1, r8
  405b5c:	4648      	mov	r0, r9
  405b5e:	f7ff fc1f 	bl	4053a0 <quorem>
  405b62:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405b66:	f805 ab01 	strb.w	sl, [r5], #1
  405b6a:	eba5 030b 	sub.w	r3, r5, fp
  405b6e:	42bb      	cmp	r3, r7
  405b70:	f04f 020a 	mov.w	r2, #10
  405b74:	f04f 0300 	mov.w	r3, #0
  405b78:	4649      	mov	r1, r9
  405b7a:	4620      	mov	r0, r4
  405b7c:	dbea      	blt.n	405b54 <_dtoa_r+0x68c>
  405b7e:	9b04      	ldr	r3, [sp, #16]
  405b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b82:	2a01      	cmp	r2, #1
  405b84:	bfac      	ite	ge
  405b86:	189b      	addge	r3, r3, r2
  405b88:	3301      	addlt	r3, #1
  405b8a:	461d      	mov	r5, r3
  405b8c:	f04f 0b00 	mov.w	fp, #0
  405b90:	4649      	mov	r1, r9
  405b92:	2201      	movs	r2, #1
  405b94:	4620      	mov	r0, r4
  405b96:	f001 fad3 	bl	407140 <__lshift>
  405b9a:	4641      	mov	r1, r8
  405b9c:	4681      	mov	r9, r0
  405b9e:	f001 fb21 	bl	4071e4 <__mcmp>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f340 823d 	ble.w	406022 <_dtoa_r+0xb5a>
  405ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405bac:	9904      	ldr	r1, [sp, #16]
  405bae:	1e6b      	subs	r3, r5, #1
  405bb0:	e004      	b.n	405bbc <_dtoa_r+0x6f4>
  405bb2:	428b      	cmp	r3, r1
  405bb4:	f000 81ae 	beq.w	405f14 <_dtoa_r+0xa4c>
  405bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405bbc:	2a39      	cmp	r2, #57	; 0x39
  405bbe:	f103 0501 	add.w	r5, r3, #1
  405bc2:	d0f6      	beq.n	405bb2 <_dtoa_r+0x6ea>
  405bc4:	3201      	adds	r2, #1
  405bc6:	701a      	strb	r2, [r3, #0]
  405bc8:	4641      	mov	r1, r8
  405bca:	4620      	mov	r0, r4
  405bcc:	f001 f932 	bl	406e34 <_Bfree>
  405bd0:	2e00      	cmp	r6, #0
  405bd2:	f43f ae3d 	beq.w	405850 <_dtoa_r+0x388>
  405bd6:	f1bb 0f00 	cmp.w	fp, #0
  405bda:	d005      	beq.n	405be8 <_dtoa_r+0x720>
  405bdc:	45b3      	cmp	fp, r6
  405bde:	d003      	beq.n	405be8 <_dtoa_r+0x720>
  405be0:	4659      	mov	r1, fp
  405be2:	4620      	mov	r0, r4
  405be4:	f001 f926 	bl	406e34 <_Bfree>
  405be8:	4631      	mov	r1, r6
  405bea:	4620      	mov	r0, r4
  405bec:	f001 f922 	bl	406e34 <_Bfree>
  405bf0:	e62e      	b.n	405850 <_dtoa_r+0x388>
  405bf2:	2300      	movs	r3, #0
  405bf4:	930b      	str	r3, [sp, #44]	; 0x2c
  405bf6:	9b02      	ldr	r3, [sp, #8]
  405bf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405bfa:	4413      	add	r3, r2
  405bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  405bfe:	3301      	adds	r3, #1
  405c00:	2b01      	cmp	r3, #1
  405c02:	461f      	mov	r7, r3
  405c04:	461e      	mov	r6, r3
  405c06:	930a      	str	r3, [sp, #40]	; 0x28
  405c08:	bfb8      	it	lt
  405c0a:	2701      	movlt	r7, #1
  405c0c:	2100      	movs	r1, #0
  405c0e:	2f17      	cmp	r7, #23
  405c10:	6461      	str	r1, [r4, #68]	; 0x44
  405c12:	d90a      	bls.n	405c2a <_dtoa_r+0x762>
  405c14:	2201      	movs	r2, #1
  405c16:	2304      	movs	r3, #4
  405c18:	005b      	lsls	r3, r3, #1
  405c1a:	f103 0014 	add.w	r0, r3, #20
  405c1e:	4287      	cmp	r7, r0
  405c20:	4611      	mov	r1, r2
  405c22:	f102 0201 	add.w	r2, r2, #1
  405c26:	d2f7      	bcs.n	405c18 <_dtoa_r+0x750>
  405c28:	6461      	str	r1, [r4, #68]	; 0x44
  405c2a:	4620      	mov	r0, r4
  405c2c:	f001 f8dc 	bl	406de8 <_Balloc>
  405c30:	2e0e      	cmp	r6, #14
  405c32:	9004      	str	r0, [sp, #16]
  405c34:	6420      	str	r0, [r4, #64]	; 0x40
  405c36:	f63f ad41 	bhi.w	4056bc <_dtoa_r+0x1f4>
  405c3a:	2d00      	cmp	r5, #0
  405c3c:	f43f ad3e 	beq.w	4056bc <_dtoa_r+0x1f4>
  405c40:	9902      	ldr	r1, [sp, #8]
  405c42:	2900      	cmp	r1, #0
  405c44:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405c48:	f340 8202 	ble.w	406050 <_dtoa_r+0xb88>
  405c4c:	4bb8      	ldr	r3, [pc, #736]	; (405f30 <_dtoa_r+0xa68>)
  405c4e:	f001 020f 	and.w	r2, r1, #15
  405c52:	110d      	asrs	r5, r1, #4
  405c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c58:	06e9      	lsls	r1, r5, #27
  405c5a:	e9d3 6700 	ldrd	r6, r7, [r3]
  405c5e:	f140 81ae 	bpl.w	405fbe <_dtoa_r+0xaf6>
  405c62:	4bb4      	ldr	r3, [pc, #720]	; (405f34 <_dtoa_r+0xa6c>)
  405c64:	4650      	mov	r0, sl
  405c66:	4659      	mov	r1, fp
  405c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405c6c:	f002 f9ba 	bl	407fe4 <__aeabi_ddiv>
  405c70:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405c74:	f005 050f 	and.w	r5, r5, #15
  405c78:	f04f 0a03 	mov.w	sl, #3
  405c7c:	b18d      	cbz	r5, 405ca2 <_dtoa_r+0x7da>
  405c7e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405f34 <_dtoa_r+0xa6c>
  405c82:	07ea      	lsls	r2, r5, #31
  405c84:	d509      	bpl.n	405c9a <_dtoa_r+0x7d2>
  405c86:	4630      	mov	r0, r6
  405c88:	4639      	mov	r1, r7
  405c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
  405c8e:	f002 f87f 	bl	407d90 <__aeabi_dmul>
  405c92:	f10a 0a01 	add.w	sl, sl, #1
  405c96:	4606      	mov	r6, r0
  405c98:	460f      	mov	r7, r1
  405c9a:	106d      	asrs	r5, r5, #1
  405c9c:	f108 0808 	add.w	r8, r8, #8
  405ca0:	d1ef      	bne.n	405c82 <_dtoa_r+0x7ba>
  405ca2:	463b      	mov	r3, r7
  405ca4:	4632      	mov	r2, r6
  405ca6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405caa:	f002 f99b 	bl	407fe4 <__aeabi_ddiv>
  405cae:	4607      	mov	r7, r0
  405cb0:	4688      	mov	r8, r1
  405cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cb4:	b143      	cbz	r3, 405cc8 <_dtoa_r+0x800>
  405cb6:	2200      	movs	r2, #0
  405cb8:	4b9f      	ldr	r3, [pc, #636]	; (405f38 <_dtoa_r+0xa70>)
  405cba:	4638      	mov	r0, r7
  405cbc:	4641      	mov	r1, r8
  405cbe:	f002 fad9 	bl	408274 <__aeabi_dcmplt>
  405cc2:	2800      	cmp	r0, #0
  405cc4:	f040 8286 	bne.w	4061d4 <_dtoa_r+0xd0c>
  405cc8:	4650      	mov	r0, sl
  405cca:	f7fd f9fd 	bl	4030c8 <__aeabi_i2d>
  405cce:	463a      	mov	r2, r7
  405cd0:	4643      	mov	r3, r8
  405cd2:	f002 f85d 	bl	407d90 <__aeabi_dmul>
  405cd6:	4b99      	ldr	r3, [pc, #612]	; (405f3c <_dtoa_r+0xa74>)
  405cd8:	2200      	movs	r2, #0
  405cda:	f7fd f8a9 	bl	402e30 <__adddf3>
  405cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ce0:	4605      	mov	r5, r0
  405ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405ce6:	2b00      	cmp	r3, #0
  405ce8:	f000 813e 	beq.w	405f68 <_dtoa_r+0xaa0>
  405cec:	9b02      	ldr	r3, [sp, #8]
  405cee:	9315      	str	r3, [sp, #84]	; 0x54
  405cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cf2:	9312      	str	r3, [sp, #72]	; 0x48
  405cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405cf6:	2b00      	cmp	r3, #0
  405cf8:	f000 81fa 	beq.w	4060f0 <_dtoa_r+0xc28>
  405cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405cfe:	4b8c      	ldr	r3, [pc, #560]	; (405f30 <_dtoa_r+0xa68>)
  405d00:	498f      	ldr	r1, [pc, #572]	; (405f40 <_dtoa_r+0xa78>)
  405d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405d0a:	2000      	movs	r0, #0
  405d0c:	f002 f96a 	bl	407fe4 <__aeabi_ddiv>
  405d10:	462a      	mov	r2, r5
  405d12:	4633      	mov	r3, r6
  405d14:	f7fd f88a 	bl	402e2c <__aeabi_dsub>
  405d18:	4682      	mov	sl, r0
  405d1a:	468b      	mov	fp, r1
  405d1c:	4638      	mov	r0, r7
  405d1e:	4641      	mov	r1, r8
  405d20:	f002 fae6 	bl	4082f0 <__aeabi_d2iz>
  405d24:	4605      	mov	r5, r0
  405d26:	f7fd f9cf 	bl	4030c8 <__aeabi_i2d>
  405d2a:	4602      	mov	r2, r0
  405d2c:	460b      	mov	r3, r1
  405d2e:	4638      	mov	r0, r7
  405d30:	4641      	mov	r1, r8
  405d32:	f7fd f87b 	bl	402e2c <__aeabi_dsub>
  405d36:	3530      	adds	r5, #48	; 0x30
  405d38:	fa5f f885 	uxtb.w	r8, r5
  405d3c:	9d04      	ldr	r5, [sp, #16]
  405d3e:	4606      	mov	r6, r0
  405d40:	460f      	mov	r7, r1
  405d42:	f885 8000 	strb.w	r8, [r5]
  405d46:	4602      	mov	r2, r0
  405d48:	460b      	mov	r3, r1
  405d4a:	4650      	mov	r0, sl
  405d4c:	4659      	mov	r1, fp
  405d4e:	3501      	adds	r5, #1
  405d50:	f002 faae 	bl	4082b0 <__aeabi_dcmpgt>
  405d54:	2800      	cmp	r0, #0
  405d56:	d154      	bne.n	405e02 <_dtoa_r+0x93a>
  405d58:	4632      	mov	r2, r6
  405d5a:	463b      	mov	r3, r7
  405d5c:	2000      	movs	r0, #0
  405d5e:	4976      	ldr	r1, [pc, #472]	; (405f38 <_dtoa_r+0xa70>)
  405d60:	f7fd f864 	bl	402e2c <__aeabi_dsub>
  405d64:	4602      	mov	r2, r0
  405d66:	460b      	mov	r3, r1
  405d68:	4650      	mov	r0, sl
  405d6a:	4659      	mov	r1, fp
  405d6c:	f002 faa0 	bl	4082b0 <__aeabi_dcmpgt>
  405d70:	2800      	cmp	r0, #0
  405d72:	f040 8270 	bne.w	406256 <_dtoa_r+0xd8e>
  405d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d78:	2a01      	cmp	r2, #1
  405d7a:	f000 8111 	beq.w	405fa0 <_dtoa_r+0xad8>
  405d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d80:	9a04      	ldr	r2, [sp, #16]
  405d82:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405d86:	4413      	add	r3, r2
  405d88:	4699      	mov	r9, r3
  405d8a:	e00d      	b.n	405da8 <_dtoa_r+0x8e0>
  405d8c:	2000      	movs	r0, #0
  405d8e:	496a      	ldr	r1, [pc, #424]	; (405f38 <_dtoa_r+0xa70>)
  405d90:	f7fd f84c 	bl	402e2c <__aeabi_dsub>
  405d94:	4652      	mov	r2, sl
  405d96:	465b      	mov	r3, fp
  405d98:	f002 fa6c 	bl	408274 <__aeabi_dcmplt>
  405d9c:	2800      	cmp	r0, #0
  405d9e:	f040 8258 	bne.w	406252 <_dtoa_r+0xd8a>
  405da2:	454d      	cmp	r5, r9
  405da4:	f000 80fa 	beq.w	405f9c <_dtoa_r+0xad4>
  405da8:	4650      	mov	r0, sl
  405daa:	4659      	mov	r1, fp
  405dac:	2200      	movs	r2, #0
  405dae:	4b65      	ldr	r3, [pc, #404]	; (405f44 <_dtoa_r+0xa7c>)
  405db0:	f001 ffee 	bl	407d90 <__aeabi_dmul>
  405db4:	2200      	movs	r2, #0
  405db6:	4b63      	ldr	r3, [pc, #396]	; (405f44 <_dtoa_r+0xa7c>)
  405db8:	4682      	mov	sl, r0
  405dba:	468b      	mov	fp, r1
  405dbc:	4630      	mov	r0, r6
  405dbe:	4639      	mov	r1, r7
  405dc0:	f001 ffe6 	bl	407d90 <__aeabi_dmul>
  405dc4:	460f      	mov	r7, r1
  405dc6:	4606      	mov	r6, r0
  405dc8:	f002 fa92 	bl	4082f0 <__aeabi_d2iz>
  405dcc:	4680      	mov	r8, r0
  405dce:	f7fd f97b 	bl	4030c8 <__aeabi_i2d>
  405dd2:	4602      	mov	r2, r0
  405dd4:	460b      	mov	r3, r1
  405dd6:	4630      	mov	r0, r6
  405dd8:	4639      	mov	r1, r7
  405dda:	f7fd f827 	bl	402e2c <__aeabi_dsub>
  405dde:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405de2:	fa5f f888 	uxtb.w	r8, r8
  405de6:	4652      	mov	r2, sl
  405de8:	465b      	mov	r3, fp
  405dea:	f805 8b01 	strb.w	r8, [r5], #1
  405dee:	4606      	mov	r6, r0
  405df0:	460f      	mov	r7, r1
  405df2:	f002 fa3f 	bl	408274 <__aeabi_dcmplt>
  405df6:	4632      	mov	r2, r6
  405df8:	463b      	mov	r3, r7
  405dfa:	2800      	cmp	r0, #0
  405dfc:	d0c6      	beq.n	405d8c <_dtoa_r+0x8c4>
  405dfe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e04:	9302      	str	r3, [sp, #8]
  405e06:	e523      	b.n	405850 <_dtoa_r+0x388>
  405e08:	2300      	movs	r3, #0
  405e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  405e0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e0e:	2b00      	cmp	r3, #0
  405e10:	f340 80dc 	ble.w	405fcc <_dtoa_r+0xb04>
  405e14:	461f      	mov	r7, r3
  405e16:	461e      	mov	r6, r3
  405e18:	930f      	str	r3, [sp, #60]	; 0x3c
  405e1a:	930a      	str	r3, [sp, #40]	; 0x28
  405e1c:	e6f6      	b.n	405c0c <_dtoa_r+0x744>
  405e1e:	2301      	movs	r3, #1
  405e20:	930b      	str	r3, [sp, #44]	; 0x2c
  405e22:	e7f3      	b.n	405e0c <_dtoa_r+0x944>
  405e24:	f1ba 0f00 	cmp.w	sl, #0
  405e28:	f47f ada8 	bne.w	40597c <_dtoa_r+0x4b4>
  405e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405e30:	2b00      	cmp	r3, #0
  405e32:	f47f adba 	bne.w	4059aa <_dtoa_r+0x4e2>
  405e36:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405e3a:	0d3f      	lsrs	r7, r7, #20
  405e3c:	053f      	lsls	r7, r7, #20
  405e3e:	2f00      	cmp	r7, #0
  405e40:	f000 820d 	beq.w	40625e <_dtoa_r+0xd96>
  405e44:	9b08      	ldr	r3, [sp, #32]
  405e46:	3301      	adds	r3, #1
  405e48:	9308      	str	r3, [sp, #32]
  405e4a:	9b06      	ldr	r3, [sp, #24]
  405e4c:	3301      	adds	r3, #1
  405e4e:	9306      	str	r3, [sp, #24]
  405e50:	2301      	movs	r3, #1
  405e52:	930c      	str	r3, [sp, #48]	; 0x30
  405e54:	e5ab      	b.n	4059ae <_dtoa_r+0x4e6>
  405e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e58:	2b00      	cmp	r3, #0
  405e5a:	f73f ac42 	bgt.w	4056e2 <_dtoa_r+0x21a>
  405e5e:	f040 8221 	bne.w	4062a4 <_dtoa_r+0xddc>
  405e62:	2200      	movs	r2, #0
  405e64:	4b38      	ldr	r3, [pc, #224]	; (405f48 <_dtoa_r+0xa80>)
  405e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e6a:	f001 ff91 	bl	407d90 <__aeabi_dmul>
  405e6e:	4652      	mov	r2, sl
  405e70:	465b      	mov	r3, fp
  405e72:	f002 fa13 	bl	40829c <__aeabi_dcmpge>
  405e76:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405e7a:	4646      	mov	r6, r8
  405e7c:	2800      	cmp	r0, #0
  405e7e:	d041      	beq.n	405f04 <_dtoa_r+0xa3c>
  405e80:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e82:	9d04      	ldr	r5, [sp, #16]
  405e84:	43db      	mvns	r3, r3
  405e86:	9302      	str	r3, [sp, #8]
  405e88:	4641      	mov	r1, r8
  405e8a:	4620      	mov	r0, r4
  405e8c:	f000 ffd2 	bl	406e34 <_Bfree>
  405e90:	2e00      	cmp	r6, #0
  405e92:	f43f acdd 	beq.w	405850 <_dtoa_r+0x388>
  405e96:	e6a7      	b.n	405be8 <_dtoa_r+0x720>
  405e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e9a:	4649      	mov	r1, r9
  405e9c:	4620      	mov	r0, r4
  405e9e:	f001 f8ff 	bl	4070a0 <__pow5mult>
  405ea2:	4681      	mov	r9, r0
  405ea4:	e558      	b.n	405958 <_dtoa_r+0x490>
  405ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405ea8:	2a00      	cmp	r2, #0
  405eaa:	f000 8187 	beq.w	4061bc <_dtoa_r+0xcf4>
  405eae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405eb2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405eb4:	9d08      	ldr	r5, [sp, #32]
  405eb6:	e4f2      	b.n	40589e <_dtoa_r+0x3d6>
  405eb8:	f1ba 0f00 	cmp.w	sl, #0
  405ebc:	f47f ad75 	bne.w	4059aa <_dtoa_r+0x4e2>
  405ec0:	e7b4      	b.n	405e2c <_dtoa_r+0x964>
  405ec2:	f000 ffc1 	bl	406e48 <__multadd>
  405ec6:	4647      	mov	r7, r8
  405ec8:	4606      	mov	r6, r0
  405eca:	4683      	mov	fp, r0
  405ecc:	e5be      	b.n	405a4c <_dtoa_r+0x584>
  405ece:	4601      	mov	r1, r0
  405ed0:	4620      	mov	r0, r4
  405ed2:	9306      	str	r3, [sp, #24]
  405ed4:	f000 ffae 	bl	406e34 <_Bfree>
  405ed8:	2201      	movs	r2, #1
  405eda:	9b06      	ldr	r3, [sp, #24]
  405edc:	e5e0      	b.n	405aa0 <_dtoa_r+0x5d8>
  405ede:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ee0:	2b02      	cmp	r3, #2
  405ee2:	f77f ad96 	ble.w	405a12 <_dtoa_r+0x54a>
  405ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ee8:	2b00      	cmp	r3, #0
  405eea:	d1c9      	bne.n	405e80 <_dtoa_r+0x9b8>
  405eec:	4641      	mov	r1, r8
  405eee:	2205      	movs	r2, #5
  405ef0:	4620      	mov	r0, r4
  405ef2:	f000 ffa9 	bl	406e48 <__multadd>
  405ef6:	4601      	mov	r1, r0
  405ef8:	4680      	mov	r8, r0
  405efa:	4648      	mov	r0, r9
  405efc:	f001 f972 	bl	4071e4 <__mcmp>
  405f00:	2800      	cmp	r0, #0
  405f02:	ddbd      	ble.n	405e80 <_dtoa_r+0x9b8>
  405f04:	9a02      	ldr	r2, [sp, #8]
  405f06:	9904      	ldr	r1, [sp, #16]
  405f08:	2331      	movs	r3, #49	; 0x31
  405f0a:	3201      	adds	r2, #1
  405f0c:	9202      	str	r2, [sp, #8]
  405f0e:	700b      	strb	r3, [r1, #0]
  405f10:	1c4d      	adds	r5, r1, #1
  405f12:	e7b9      	b.n	405e88 <_dtoa_r+0x9c0>
  405f14:	9a02      	ldr	r2, [sp, #8]
  405f16:	3201      	adds	r2, #1
  405f18:	9202      	str	r2, [sp, #8]
  405f1a:	9a04      	ldr	r2, [sp, #16]
  405f1c:	2331      	movs	r3, #49	; 0x31
  405f1e:	7013      	strb	r3, [r2, #0]
  405f20:	e652      	b.n	405bc8 <_dtoa_r+0x700>
  405f22:	2301      	movs	r3, #1
  405f24:	930b      	str	r3, [sp, #44]	; 0x2c
  405f26:	e666      	b.n	405bf6 <_dtoa_r+0x72e>
  405f28:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405f2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405f2e:	e48f      	b.n	405850 <_dtoa_r+0x388>
  405f30:	00408800 	.word	0x00408800
  405f34:	004087d8 	.word	0x004087d8
  405f38:	3ff00000 	.word	0x3ff00000
  405f3c:	401c0000 	.word	0x401c0000
  405f40:	3fe00000 	.word	0x3fe00000
  405f44:	40240000 	.word	0x40240000
  405f48:	40140000 	.word	0x40140000
  405f4c:	4650      	mov	r0, sl
  405f4e:	f7fd f8bb 	bl	4030c8 <__aeabi_i2d>
  405f52:	463a      	mov	r2, r7
  405f54:	4643      	mov	r3, r8
  405f56:	f001 ff1b 	bl	407d90 <__aeabi_dmul>
  405f5a:	2200      	movs	r2, #0
  405f5c:	4bc1      	ldr	r3, [pc, #772]	; (406264 <_dtoa_r+0xd9c>)
  405f5e:	f7fc ff67 	bl	402e30 <__adddf3>
  405f62:	4605      	mov	r5, r0
  405f64:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405f68:	4641      	mov	r1, r8
  405f6a:	2200      	movs	r2, #0
  405f6c:	4bbe      	ldr	r3, [pc, #760]	; (406268 <_dtoa_r+0xda0>)
  405f6e:	4638      	mov	r0, r7
  405f70:	f7fc ff5c 	bl	402e2c <__aeabi_dsub>
  405f74:	462a      	mov	r2, r5
  405f76:	4633      	mov	r3, r6
  405f78:	4682      	mov	sl, r0
  405f7a:	468b      	mov	fp, r1
  405f7c:	f002 f998 	bl	4082b0 <__aeabi_dcmpgt>
  405f80:	4680      	mov	r8, r0
  405f82:	2800      	cmp	r0, #0
  405f84:	f040 8110 	bne.w	4061a8 <_dtoa_r+0xce0>
  405f88:	462a      	mov	r2, r5
  405f8a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405f8e:	4650      	mov	r0, sl
  405f90:	4659      	mov	r1, fp
  405f92:	f002 f96f 	bl	408274 <__aeabi_dcmplt>
  405f96:	b118      	cbz	r0, 405fa0 <_dtoa_r+0xad8>
  405f98:	4646      	mov	r6, r8
  405f9a:	e771      	b.n	405e80 <_dtoa_r+0x9b8>
  405f9c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405fa0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405fa4:	f7ff bb8a 	b.w	4056bc <_dtoa_r+0x1f4>
  405fa8:	9804      	ldr	r0, [sp, #16]
  405faa:	f7ff babb 	b.w	405524 <_dtoa_r+0x5c>
  405fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405fb2:	970c      	str	r7, [sp, #48]	; 0x30
  405fb4:	1afb      	subs	r3, r7, r3
  405fb6:	441a      	add	r2, r3
  405fb8:	920d      	str	r2, [sp, #52]	; 0x34
  405fba:	2700      	movs	r7, #0
  405fbc:	e469      	b.n	405892 <_dtoa_r+0x3ca>
  405fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405fc2:	f04f 0a02 	mov.w	sl, #2
  405fc6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405fca:	e657      	b.n	405c7c <_dtoa_r+0x7b4>
  405fcc:	2100      	movs	r1, #0
  405fce:	2301      	movs	r3, #1
  405fd0:	6461      	str	r1, [r4, #68]	; 0x44
  405fd2:	4620      	mov	r0, r4
  405fd4:	9325      	str	r3, [sp, #148]	; 0x94
  405fd6:	f000 ff07 	bl	406de8 <_Balloc>
  405fda:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405fdc:	9004      	str	r0, [sp, #16]
  405fde:	6420      	str	r0, [r4, #64]	; 0x40
  405fe0:	930a      	str	r3, [sp, #40]	; 0x28
  405fe2:	930f      	str	r3, [sp, #60]	; 0x3c
  405fe4:	e629      	b.n	405c3a <_dtoa_r+0x772>
  405fe6:	2a00      	cmp	r2, #0
  405fe8:	46d0      	mov	r8, sl
  405fea:	f8cd b018 	str.w	fp, [sp, #24]
  405fee:	469a      	mov	sl, r3
  405ff0:	dd11      	ble.n	406016 <_dtoa_r+0xb4e>
  405ff2:	4649      	mov	r1, r9
  405ff4:	2201      	movs	r2, #1
  405ff6:	4620      	mov	r0, r4
  405ff8:	f001 f8a2 	bl	407140 <__lshift>
  405ffc:	4641      	mov	r1, r8
  405ffe:	4681      	mov	r9, r0
  406000:	f001 f8f0 	bl	4071e4 <__mcmp>
  406004:	2800      	cmp	r0, #0
  406006:	f340 8146 	ble.w	406296 <_dtoa_r+0xdce>
  40600a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40600e:	f000 8106 	beq.w	40621e <_dtoa_r+0xd56>
  406012:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406016:	46b3      	mov	fp, r6
  406018:	f887 a000 	strb.w	sl, [r7]
  40601c:	1c7d      	adds	r5, r7, #1
  40601e:	9e06      	ldr	r6, [sp, #24]
  406020:	e5d2      	b.n	405bc8 <_dtoa_r+0x700>
  406022:	d104      	bne.n	40602e <_dtoa_r+0xb66>
  406024:	f01a 0f01 	tst.w	sl, #1
  406028:	d001      	beq.n	40602e <_dtoa_r+0xb66>
  40602a:	e5bd      	b.n	405ba8 <_dtoa_r+0x6e0>
  40602c:	4615      	mov	r5, r2
  40602e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406032:	2b30      	cmp	r3, #48	; 0x30
  406034:	f105 32ff 	add.w	r2, r5, #4294967295
  406038:	d0f8      	beq.n	40602c <_dtoa_r+0xb64>
  40603a:	e5c5      	b.n	405bc8 <_dtoa_r+0x700>
  40603c:	9904      	ldr	r1, [sp, #16]
  40603e:	2230      	movs	r2, #48	; 0x30
  406040:	700a      	strb	r2, [r1, #0]
  406042:	9a02      	ldr	r2, [sp, #8]
  406044:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406048:	3201      	adds	r2, #1
  40604a:	9202      	str	r2, [sp, #8]
  40604c:	f7ff bbfc 	b.w	405848 <_dtoa_r+0x380>
  406050:	f000 80bb 	beq.w	4061ca <_dtoa_r+0xd02>
  406054:	9b02      	ldr	r3, [sp, #8]
  406056:	425d      	negs	r5, r3
  406058:	4b84      	ldr	r3, [pc, #528]	; (40626c <_dtoa_r+0xda4>)
  40605a:	f005 020f 	and.w	r2, r5, #15
  40605e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406062:	e9d3 2300 	ldrd	r2, r3, [r3]
  406066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40606a:	f001 fe91 	bl	407d90 <__aeabi_dmul>
  40606e:	112d      	asrs	r5, r5, #4
  406070:	4607      	mov	r7, r0
  406072:	4688      	mov	r8, r1
  406074:	f000 812c 	beq.w	4062d0 <_dtoa_r+0xe08>
  406078:	4e7d      	ldr	r6, [pc, #500]	; (406270 <_dtoa_r+0xda8>)
  40607a:	f04f 0a02 	mov.w	sl, #2
  40607e:	07eb      	lsls	r3, r5, #31
  406080:	d509      	bpl.n	406096 <_dtoa_r+0xbce>
  406082:	4638      	mov	r0, r7
  406084:	4641      	mov	r1, r8
  406086:	e9d6 2300 	ldrd	r2, r3, [r6]
  40608a:	f001 fe81 	bl	407d90 <__aeabi_dmul>
  40608e:	f10a 0a01 	add.w	sl, sl, #1
  406092:	4607      	mov	r7, r0
  406094:	4688      	mov	r8, r1
  406096:	106d      	asrs	r5, r5, #1
  406098:	f106 0608 	add.w	r6, r6, #8
  40609c:	d1ef      	bne.n	40607e <_dtoa_r+0xbb6>
  40609e:	e608      	b.n	405cb2 <_dtoa_r+0x7ea>
  4060a0:	6871      	ldr	r1, [r6, #4]
  4060a2:	4620      	mov	r0, r4
  4060a4:	f000 fea0 	bl	406de8 <_Balloc>
  4060a8:	6933      	ldr	r3, [r6, #16]
  4060aa:	3302      	adds	r3, #2
  4060ac:	009a      	lsls	r2, r3, #2
  4060ae:	4605      	mov	r5, r0
  4060b0:	f106 010c 	add.w	r1, r6, #12
  4060b4:	300c      	adds	r0, #12
  4060b6:	f7fd fb55 	bl	403764 <memcpy>
  4060ba:	4629      	mov	r1, r5
  4060bc:	2201      	movs	r2, #1
  4060be:	4620      	mov	r0, r4
  4060c0:	f001 f83e 	bl	407140 <__lshift>
  4060c4:	9006      	str	r0, [sp, #24]
  4060c6:	e4b5      	b.n	405a34 <_dtoa_r+0x56c>
  4060c8:	2b39      	cmp	r3, #57	; 0x39
  4060ca:	f8cd b018 	str.w	fp, [sp, #24]
  4060ce:	46d0      	mov	r8, sl
  4060d0:	f000 80a5 	beq.w	40621e <_dtoa_r+0xd56>
  4060d4:	f103 0a01 	add.w	sl, r3, #1
  4060d8:	46b3      	mov	fp, r6
  4060da:	f887 a000 	strb.w	sl, [r7]
  4060de:	1c7d      	adds	r5, r7, #1
  4060e0:	9e06      	ldr	r6, [sp, #24]
  4060e2:	e571      	b.n	405bc8 <_dtoa_r+0x700>
  4060e4:	465a      	mov	r2, fp
  4060e6:	46d0      	mov	r8, sl
  4060e8:	46b3      	mov	fp, r6
  4060ea:	469a      	mov	sl, r3
  4060ec:	4616      	mov	r6, r2
  4060ee:	e54f      	b.n	405b90 <_dtoa_r+0x6c8>
  4060f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060f2:	495e      	ldr	r1, [pc, #376]	; (40626c <_dtoa_r+0xda4>)
  4060f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4060f8:	462a      	mov	r2, r5
  4060fa:	4633      	mov	r3, r6
  4060fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406100:	f001 fe46 	bl	407d90 <__aeabi_dmul>
  406104:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406108:	4638      	mov	r0, r7
  40610a:	4641      	mov	r1, r8
  40610c:	f002 f8f0 	bl	4082f0 <__aeabi_d2iz>
  406110:	4605      	mov	r5, r0
  406112:	f7fc ffd9 	bl	4030c8 <__aeabi_i2d>
  406116:	460b      	mov	r3, r1
  406118:	4602      	mov	r2, r0
  40611a:	4641      	mov	r1, r8
  40611c:	4638      	mov	r0, r7
  40611e:	f7fc fe85 	bl	402e2c <__aeabi_dsub>
  406122:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406124:	460f      	mov	r7, r1
  406126:	9904      	ldr	r1, [sp, #16]
  406128:	3530      	adds	r5, #48	; 0x30
  40612a:	2b01      	cmp	r3, #1
  40612c:	700d      	strb	r5, [r1, #0]
  40612e:	4606      	mov	r6, r0
  406130:	f101 0501 	add.w	r5, r1, #1
  406134:	d026      	beq.n	406184 <_dtoa_r+0xcbc>
  406136:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406138:	9a04      	ldr	r2, [sp, #16]
  40613a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406278 <_dtoa_r+0xdb0>
  40613e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406142:	4413      	add	r3, r2
  406144:	f04f 0a00 	mov.w	sl, #0
  406148:	4699      	mov	r9, r3
  40614a:	4652      	mov	r2, sl
  40614c:	465b      	mov	r3, fp
  40614e:	4630      	mov	r0, r6
  406150:	4639      	mov	r1, r7
  406152:	f001 fe1d 	bl	407d90 <__aeabi_dmul>
  406156:	460f      	mov	r7, r1
  406158:	4606      	mov	r6, r0
  40615a:	f002 f8c9 	bl	4082f0 <__aeabi_d2iz>
  40615e:	4680      	mov	r8, r0
  406160:	f7fc ffb2 	bl	4030c8 <__aeabi_i2d>
  406164:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406168:	4602      	mov	r2, r0
  40616a:	460b      	mov	r3, r1
  40616c:	4630      	mov	r0, r6
  40616e:	4639      	mov	r1, r7
  406170:	f7fc fe5c 	bl	402e2c <__aeabi_dsub>
  406174:	f805 8b01 	strb.w	r8, [r5], #1
  406178:	454d      	cmp	r5, r9
  40617a:	4606      	mov	r6, r0
  40617c:	460f      	mov	r7, r1
  40617e:	d1e4      	bne.n	40614a <_dtoa_r+0xc82>
  406180:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406184:	4b3b      	ldr	r3, [pc, #236]	; (406274 <_dtoa_r+0xdac>)
  406186:	2200      	movs	r2, #0
  406188:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40618c:	f7fc fe50 	bl	402e30 <__adddf3>
  406190:	4632      	mov	r2, r6
  406192:	463b      	mov	r3, r7
  406194:	f002 f86e 	bl	408274 <__aeabi_dcmplt>
  406198:	2800      	cmp	r0, #0
  40619a:	d046      	beq.n	40622a <_dtoa_r+0xd62>
  40619c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40619e:	9302      	str	r3, [sp, #8]
  4061a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4061a4:	f7ff bb43 	b.w	40582e <_dtoa_r+0x366>
  4061a8:	f04f 0800 	mov.w	r8, #0
  4061ac:	4646      	mov	r6, r8
  4061ae:	e6a9      	b.n	405f04 <_dtoa_r+0xa3c>
  4061b0:	9b08      	ldr	r3, [sp, #32]
  4061b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061b4:	1a9d      	subs	r5, r3, r2
  4061b6:	2300      	movs	r3, #0
  4061b8:	f7ff bb71 	b.w	40589e <_dtoa_r+0x3d6>
  4061bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4061be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4061c0:	9d08      	ldr	r5, [sp, #32]
  4061c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4061c6:	f7ff bb6a 	b.w	40589e <_dtoa_r+0x3d6>
  4061ca:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4061ce:	f04f 0a02 	mov.w	sl, #2
  4061d2:	e56e      	b.n	405cb2 <_dtoa_r+0x7ea>
  4061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061d6:	2b00      	cmp	r3, #0
  4061d8:	f43f aeb8 	beq.w	405f4c <_dtoa_r+0xa84>
  4061dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061de:	2b00      	cmp	r3, #0
  4061e0:	f77f aede 	ble.w	405fa0 <_dtoa_r+0xad8>
  4061e4:	2200      	movs	r2, #0
  4061e6:	4b24      	ldr	r3, [pc, #144]	; (406278 <_dtoa_r+0xdb0>)
  4061e8:	4638      	mov	r0, r7
  4061ea:	4641      	mov	r1, r8
  4061ec:	f001 fdd0 	bl	407d90 <__aeabi_dmul>
  4061f0:	4607      	mov	r7, r0
  4061f2:	4688      	mov	r8, r1
  4061f4:	f10a 0001 	add.w	r0, sl, #1
  4061f8:	f7fc ff66 	bl	4030c8 <__aeabi_i2d>
  4061fc:	463a      	mov	r2, r7
  4061fe:	4643      	mov	r3, r8
  406200:	f001 fdc6 	bl	407d90 <__aeabi_dmul>
  406204:	2200      	movs	r2, #0
  406206:	4b17      	ldr	r3, [pc, #92]	; (406264 <_dtoa_r+0xd9c>)
  406208:	f7fc fe12 	bl	402e30 <__adddf3>
  40620c:	9a02      	ldr	r2, [sp, #8]
  40620e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406210:	9312      	str	r3, [sp, #72]	; 0x48
  406212:	3a01      	subs	r2, #1
  406214:	4605      	mov	r5, r0
  406216:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40621a:	9215      	str	r2, [sp, #84]	; 0x54
  40621c:	e56a      	b.n	405cf4 <_dtoa_r+0x82c>
  40621e:	2239      	movs	r2, #57	; 0x39
  406220:	46b3      	mov	fp, r6
  406222:	703a      	strb	r2, [r7, #0]
  406224:	9e06      	ldr	r6, [sp, #24]
  406226:	1c7d      	adds	r5, r7, #1
  406228:	e4c0      	b.n	405bac <_dtoa_r+0x6e4>
  40622a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40622e:	2000      	movs	r0, #0
  406230:	4910      	ldr	r1, [pc, #64]	; (406274 <_dtoa_r+0xdac>)
  406232:	f7fc fdfb 	bl	402e2c <__aeabi_dsub>
  406236:	4632      	mov	r2, r6
  406238:	463b      	mov	r3, r7
  40623a:	f002 f839 	bl	4082b0 <__aeabi_dcmpgt>
  40623e:	b908      	cbnz	r0, 406244 <_dtoa_r+0xd7c>
  406240:	e6ae      	b.n	405fa0 <_dtoa_r+0xad8>
  406242:	4615      	mov	r5, r2
  406244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406248:	2b30      	cmp	r3, #48	; 0x30
  40624a:	f105 32ff 	add.w	r2, r5, #4294967295
  40624e:	d0f8      	beq.n	406242 <_dtoa_r+0xd7a>
  406250:	e5d7      	b.n	405e02 <_dtoa_r+0x93a>
  406252:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406256:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406258:	9302      	str	r3, [sp, #8]
  40625a:	f7ff bae8 	b.w	40582e <_dtoa_r+0x366>
  40625e:	970c      	str	r7, [sp, #48]	; 0x30
  406260:	f7ff bba5 	b.w	4059ae <_dtoa_r+0x4e6>
  406264:	401c0000 	.word	0x401c0000
  406268:	40140000 	.word	0x40140000
  40626c:	00408800 	.word	0x00408800
  406270:	004087d8 	.word	0x004087d8
  406274:	3fe00000 	.word	0x3fe00000
  406278:	40240000 	.word	0x40240000
  40627c:	2b39      	cmp	r3, #57	; 0x39
  40627e:	f8cd b018 	str.w	fp, [sp, #24]
  406282:	46d0      	mov	r8, sl
  406284:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406288:	469a      	mov	sl, r3
  40628a:	d0c8      	beq.n	40621e <_dtoa_r+0xd56>
  40628c:	f1bb 0f00 	cmp.w	fp, #0
  406290:	f73f aebf 	bgt.w	406012 <_dtoa_r+0xb4a>
  406294:	e6bf      	b.n	406016 <_dtoa_r+0xb4e>
  406296:	f47f aebe 	bne.w	406016 <_dtoa_r+0xb4e>
  40629a:	f01a 0f01 	tst.w	sl, #1
  40629e:	f43f aeba 	beq.w	406016 <_dtoa_r+0xb4e>
  4062a2:	e6b2      	b.n	40600a <_dtoa_r+0xb42>
  4062a4:	f04f 0800 	mov.w	r8, #0
  4062a8:	4646      	mov	r6, r8
  4062aa:	e5e9      	b.n	405e80 <_dtoa_r+0x9b8>
  4062ac:	4631      	mov	r1, r6
  4062ae:	2300      	movs	r3, #0
  4062b0:	220a      	movs	r2, #10
  4062b2:	4620      	mov	r0, r4
  4062b4:	f000 fdc8 	bl	406e48 <__multadd>
  4062b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062ba:	2b00      	cmp	r3, #0
  4062bc:	4606      	mov	r6, r0
  4062be:	dd0a      	ble.n	4062d6 <_dtoa_r+0xe0e>
  4062c0:	930a      	str	r3, [sp, #40]	; 0x28
  4062c2:	f7ff bbaa 	b.w	405a1a <_dtoa_r+0x552>
  4062c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062c8:	2b02      	cmp	r3, #2
  4062ca:	dc23      	bgt.n	406314 <_dtoa_r+0xe4c>
  4062cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062ce:	e43b      	b.n	405b48 <_dtoa_r+0x680>
  4062d0:	f04f 0a02 	mov.w	sl, #2
  4062d4:	e4ed      	b.n	405cb2 <_dtoa_r+0x7ea>
  4062d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062d8:	2b02      	cmp	r3, #2
  4062da:	dc1b      	bgt.n	406314 <_dtoa_r+0xe4c>
  4062dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062de:	e7ef      	b.n	4062c0 <_dtoa_r+0xdf8>
  4062e0:	2500      	movs	r5, #0
  4062e2:	6465      	str	r5, [r4, #68]	; 0x44
  4062e4:	4629      	mov	r1, r5
  4062e6:	4620      	mov	r0, r4
  4062e8:	f000 fd7e 	bl	406de8 <_Balloc>
  4062ec:	f04f 33ff 	mov.w	r3, #4294967295
  4062f0:	930a      	str	r3, [sp, #40]	; 0x28
  4062f2:	930f      	str	r3, [sp, #60]	; 0x3c
  4062f4:	2301      	movs	r3, #1
  4062f6:	9004      	str	r0, [sp, #16]
  4062f8:	9525      	str	r5, [sp, #148]	; 0x94
  4062fa:	6420      	str	r0, [r4, #64]	; 0x40
  4062fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4062fe:	f7ff b9dd 	b.w	4056bc <_dtoa_r+0x1f4>
  406302:	2501      	movs	r5, #1
  406304:	f7ff b9a5 	b.w	405652 <_dtoa_r+0x18a>
  406308:	f43f ab69 	beq.w	4059de <_dtoa_r+0x516>
  40630c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406310:	f7ff bbf9 	b.w	405b06 <_dtoa_r+0x63e>
  406314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406316:	930a      	str	r3, [sp, #40]	; 0x28
  406318:	e5e5      	b.n	405ee6 <_dtoa_r+0xa1e>
  40631a:	bf00      	nop

0040631c <__sflush_r>:
  40631c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406320:	b29a      	uxth	r2, r3
  406322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406326:	460d      	mov	r5, r1
  406328:	0711      	lsls	r1, r2, #28
  40632a:	4680      	mov	r8, r0
  40632c:	d43a      	bmi.n	4063a4 <__sflush_r+0x88>
  40632e:	686a      	ldr	r2, [r5, #4]
  406330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406334:	2a00      	cmp	r2, #0
  406336:	81ab      	strh	r3, [r5, #12]
  406338:	dd6f      	ble.n	40641a <__sflush_r+0xfe>
  40633a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40633c:	2c00      	cmp	r4, #0
  40633e:	d049      	beq.n	4063d4 <__sflush_r+0xb8>
  406340:	2200      	movs	r2, #0
  406342:	b29b      	uxth	r3, r3
  406344:	f8d8 6000 	ldr.w	r6, [r8]
  406348:	f8c8 2000 	str.w	r2, [r8]
  40634c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406350:	d067      	beq.n	406422 <__sflush_r+0x106>
  406352:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406354:	075f      	lsls	r7, r3, #29
  406356:	d505      	bpl.n	406364 <__sflush_r+0x48>
  406358:	6869      	ldr	r1, [r5, #4]
  40635a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40635c:	1a52      	subs	r2, r2, r1
  40635e:	b10b      	cbz	r3, 406364 <__sflush_r+0x48>
  406360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406362:	1ad2      	subs	r2, r2, r3
  406364:	2300      	movs	r3, #0
  406366:	69e9      	ldr	r1, [r5, #28]
  406368:	4640      	mov	r0, r8
  40636a:	47a0      	blx	r4
  40636c:	1c44      	adds	r4, r0, #1
  40636e:	d03c      	beq.n	4063ea <__sflush_r+0xce>
  406370:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406374:	692a      	ldr	r2, [r5, #16]
  406376:	602a      	str	r2, [r5, #0]
  406378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40637c:	2200      	movs	r2, #0
  40637e:	81ab      	strh	r3, [r5, #12]
  406380:	04db      	lsls	r3, r3, #19
  406382:	606a      	str	r2, [r5, #4]
  406384:	d447      	bmi.n	406416 <__sflush_r+0xfa>
  406386:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406388:	f8c8 6000 	str.w	r6, [r8]
  40638c:	b311      	cbz	r1, 4063d4 <__sflush_r+0xb8>
  40638e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406392:	4299      	cmp	r1, r3
  406394:	d002      	beq.n	40639c <__sflush_r+0x80>
  406396:	4640      	mov	r0, r8
  406398:	f000 f95a 	bl	406650 <_free_r>
  40639c:	2000      	movs	r0, #0
  40639e:	6328      	str	r0, [r5, #48]	; 0x30
  4063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063a4:	692e      	ldr	r6, [r5, #16]
  4063a6:	b1ae      	cbz	r6, 4063d4 <__sflush_r+0xb8>
  4063a8:	682c      	ldr	r4, [r5, #0]
  4063aa:	602e      	str	r6, [r5, #0]
  4063ac:	0791      	lsls	r1, r2, #30
  4063ae:	bf0c      	ite	eq
  4063b0:	696b      	ldreq	r3, [r5, #20]
  4063b2:	2300      	movne	r3, #0
  4063b4:	1ba4      	subs	r4, r4, r6
  4063b6:	60ab      	str	r3, [r5, #8]
  4063b8:	e00a      	b.n	4063d0 <__sflush_r+0xb4>
  4063ba:	4623      	mov	r3, r4
  4063bc:	4632      	mov	r2, r6
  4063be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4063c0:	69e9      	ldr	r1, [r5, #28]
  4063c2:	4640      	mov	r0, r8
  4063c4:	47b8      	blx	r7
  4063c6:	2800      	cmp	r0, #0
  4063c8:	eba4 0400 	sub.w	r4, r4, r0
  4063cc:	4406      	add	r6, r0
  4063ce:	dd04      	ble.n	4063da <__sflush_r+0xbe>
  4063d0:	2c00      	cmp	r4, #0
  4063d2:	dcf2      	bgt.n	4063ba <__sflush_r+0x9e>
  4063d4:	2000      	movs	r0, #0
  4063d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063da:	89ab      	ldrh	r3, [r5, #12]
  4063dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4063e0:	81ab      	strh	r3, [r5, #12]
  4063e2:	f04f 30ff 	mov.w	r0, #4294967295
  4063e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063ea:	f8d8 4000 	ldr.w	r4, [r8]
  4063ee:	2c1d      	cmp	r4, #29
  4063f0:	d8f3      	bhi.n	4063da <__sflush_r+0xbe>
  4063f2:	4b19      	ldr	r3, [pc, #100]	; (406458 <__sflush_r+0x13c>)
  4063f4:	40e3      	lsrs	r3, r4
  4063f6:	43db      	mvns	r3, r3
  4063f8:	f013 0301 	ands.w	r3, r3, #1
  4063fc:	d1ed      	bne.n	4063da <__sflush_r+0xbe>
  4063fe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406402:	606b      	str	r3, [r5, #4]
  406404:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406408:	6929      	ldr	r1, [r5, #16]
  40640a:	81ab      	strh	r3, [r5, #12]
  40640c:	04da      	lsls	r2, r3, #19
  40640e:	6029      	str	r1, [r5, #0]
  406410:	d5b9      	bpl.n	406386 <__sflush_r+0x6a>
  406412:	2c00      	cmp	r4, #0
  406414:	d1b7      	bne.n	406386 <__sflush_r+0x6a>
  406416:	6528      	str	r0, [r5, #80]	; 0x50
  406418:	e7b5      	b.n	406386 <__sflush_r+0x6a>
  40641a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40641c:	2a00      	cmp	r2, #0
  40641e:	dc8c      	bgt.n	40633a <__sflush_r+0x1e>
  406420:	e7d8      	b.n	4063d4 <__sflush_r+0xb8>
  406422:	2301      	movs	r3, #1
  406424:	69e9      	ldr	r1, [r5, #28]
  406426:	4640      	mov	r0, r8
  406428:	47a0      	blx	r4
  40642a:	1c43      	adds	r3, r0, #1
  40642c:	4602      	mov	r2, r0
  40642e:	d002      	beq.n	406436 <__sflush_r+0x11a>
  406430:	89ab      	ldrh	r3, [r5, #12]
  406432:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406434:	e78e      	b.n	406354 <__sflush_r+0x38>
  406436:	f8d8 3000 	ldr.w	r3, [r8]
  40643a:	2b00      	cmp	r3, #0
  40643c:	d0f8      	beq.n	406430 <__sflush_r+0x114>
  40643e:	2b1d      	cmp	r3, #29
  406440:	d001      	beq.n	406446 <__sflush_r+0x12a>
  406442:	2b16      	cmp	r3, #22
  406444:	d102      	bne.n	40644c <__sflush_r+0x130>
  406446:	f8c8 6000 	str.w	r6, [r8]
  40644a:	e7c3      	b.n	4063d4 <__sflush_r+0xb8>
  40644c:	89ab      	ldrh	r3, [r5, #12]
  40644e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406452:	81ab      	strh	r3, [r5, #12]
  406454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406458:	20400001 	.word	0x20400001

0040645c <_fflush_r>:
  40645c:	b538      	push	{r3, r4, r5, lr}
  40645e:	460d      	mov	r5, r1
  406460:	4604      	mov	r4, r0
  406462:	b108      	cbz	r0, 406468 <_fflush_r+0xc>
  406464:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406466:	b1bb      	cbz	r3, 406498 <_fflush_r+0x3c>
  406468:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40646c:	b188      	cbz	r0, 406492 <_fflush_r+0x36>
  40646e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406470:	07db      	lsls	r3, r3, #31
  406472:	d401      	bmi.n	406478 <_fflush_r+0x1c>
  406474:	0581      	lsls	r1, r0, #22
  406476:	d517      	bpl.n	4064a8 <_fflush_r+0x4c>
  406478:	4620      	mov	r0, r4
  40647a:	4629      	mov	r1, r5
  40647c:	f7ff ff4e 	bl	40631c <__sflush_r>
  406480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406482:	07da      	lsls	r2, r3, #31
  406484:	4604      	mov	r4, r0
  406486:	d402      	bmi.n	40648e <_fflush_r+0x32>
  406488:	89ab      	ldrh	r3, [r5, #12]
  40648a:	059b      	lsls	r3, r3, #22
  40648c:	d507      	bpl.n	40649e <_fflush_r+0x42>
  40648e:	4620      	mov	r0, r4
  406490:	bd38      	pop	{r3, r4, r5, pc}
  406492:	4604      	mov	r4, r0
  406494:	4620      	mov	r0, r4
  406496:	bd38      	pop	{r3, r4, r5, pc}
  406498:	f000 f838 	bl	40650c <__sinit>
  40649c:	e7e4      	b.n	406468 <_fflush_r+0xc>
  40649e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4064a0:	f000 fb72 	bl	406b88 <__retarget_lock_release_recursive>
  4064a4:	4620      	mov	r0, r4
  4064a6:	bd38      	pop	{r3, r4, r5, pc}
  4064a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4064aa:	f000 fb6b 	bl	406b84 <__retarget_lock_acquire_recursive>
  4064ae:	e7e3      	b.n	406478 <_fflush_r+0x1c>

004064b0 <_cleanup_r>:
  4064b0:	4901      	ldr	r1, [pc, #4]	; (4064b8 <_cleanup_r+0x8>)
  4064b2:	f000 bb2b 	b.w	406b0c <_fwalk_reent>
  4064b6:	bf00      	nop
  4064b8:	004079b9 	.word	0x004079b9

004064bc <std.isra.0>:
  4064bc:	b510      	push	{r4, lr}
  4064be:	2300      	movs	r3, #0
  4064c0:	4604      	mov	r4, r0
  4064c2:	8181      	strh	r1, [r0, #12]
  4064c4:	81c2      	strh	r2, [r0, #14]
  4064c6:	6003      	str	r3, [r0, #0]
  4064c8:	6043      	str	r3, [r0, #4]
  4064ca:	6083      	str	r3, [r0, #8]
  4064cc:	6643      	str	r3, [r0, #100]	; 0x64
  4064ce:	6103      	str	r3, [r0, #16]
  4064d0:	6143      	str	r3, [r0, #20]
  4064d2:	6183      	str	r3, [r0, #24]
  4064d4:	4619      	mov	r1, r3
  4064d6:	2208      	movs	r2, #8
  4064d8:	305c      	adds	r0, #92	; 0x5c
  4064da:	f7fd f9dd 	bl	403898 <memset>
  4064de:	4807      	ldr	r0, [pc, #28]	; (4064fc <std.isra.0+0x40>)
  4064e0:	4907      	ldr	r1, [pc, #28]	; (406500 <std.isra.0+0x44>)
  4064e2:	4a08      	ldr	r2, [pc, #32]	; (406504 <std.isra.0+0x48>)
  4064e4:	4b08      	ldr	r3, [pc, #32]	; (406508 <std.isra.0+0x4c>)
  4064e6:	6220      	str	r0, [r4, #32]
  4064e8:	61e4      	str	r4, [r4, #28]
  4064ea:	6261      	str	r1, [r4, #36]	; 0x24
  4064ec:	62a2      	str	r2, [r4, #40]	; 0x28
  4064ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  4064f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4064f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4064f8:	f000 bb40 	b.w	406b7c <__retarget_lock_init_recursive>
  4064fc:	00407729 	.word	0x00407729
  406500:	0040774d 	.word	0x0040774d
  406504:	00407789 	.word	0x00407789
  406508:	004077a9 	.word	0x004077a9

0040650c <__sinit>:
  40650c:	b510      	push	{r4, lr}
  40650e:	4604      	mov	r4, r0
  406510:	4812      	ldr	r0, [pc, #72]	; (40655c <__sinit+0x50>)
  406512:	f000 fb37 	bl	406b84 <__retarget_lock_acquire_recursive>
  406516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406518:	b9d2      	cbnz	r2, 406550 <__sinit+0x44>
  40651a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40651e:	4810      	ldr	r0, [pc, #64]	; (406560 <__sinit+0x54>)
  406520:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406524:	2103      	movs	r1, #3
  406526:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40652a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40652c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406530:	6860      	ldr	r0, [r4, #4]
  406532:	2104      	movs	r1, #4
  406534:	f7ff ffc2 	bl	4064bc <std.isra.0>
  406538:	2201      	movs	r2, #1
  40653a:	2109      	movs	r1, #9
  40653c:	68a0      	ldr	r0, [r4, #8]
  40653e:	f7ff ffbd 	bl	4064bc <std.isra.0>
  406542:	2202      	movs	r2, #2
  406544:	2112      	movs	r1, #18
  406546:	68e0      	ldr	r0, [r4, #12]
  406548:	f7ff ffb8 	bl	4064bc <std.isra.0>
  40654c:	2301      	movs	r3, #1
  40654e:	63a3      	str	r3, [r4, #56]	; 0x38
  406550:	4802      	ldr	r0, [pc, #8]	; (40655c <__sinit+0x50>)
  406552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406556:	f000 bb17 	b.w	406b88 <__retarget_lock_release_recursive>
  40655a:	bf00      	nop
  40655c:	20400cac 	.word	0x20400cac
  406560:	004064b1 	.word	0x004064b1

00406564 <__sfp_lock_acquire>:
  406564:	4801      	ldr	r0, [pc, #4]	; (40656c <__sfp_lock_acquire+0x8>)
  406566:	f000 bb0d 	b.w	406b84 <__retarget_lock_acquire_recursive>
  40656a:	bf00      	nop
  40656c:	20400cc0 	.word	0x20400cc0

00406570 <__sfp_lock_release>:
  406570:	4801      	ldr	r0, [pc, #4]	; (406578 <__sfp_lock_release+0x8>)
  406572:	f000 bb09 	b.w	406b88 <__retarget_lock_release_recursive>
  406576:	bf00      	nop
  406578:	20400cc0 	.word	0x20400cc0

0040657c <__libc_fini_array>:
  40657c:	b538      	push	{r3, r4, r5, lr}
  40657e:	4c0a      	ldr	r4, [pc, #40]	; (4065a8 <__libc_fini_array+0x2c>)
  406580:	4d0a      	ldr	r5, [pc, #40]	; (4065ac <__libc_fini_array+0x30>)
  406582:	1b64      	subs	r4, r4, r5
  406584:	10a4      	asrs	r4, r4, #2
  406586:	d00a      	beq.n	40659e <__libc_fini_array+0x22>
  406588:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40658c:	3b01      	subs	r3, #1
  40658e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406592:	3c01      	subs	r4, #1
  406594:	f855 3904 	ldr.w	r3, [r5], #-4
  406598:	4798      	blx	r3
  40659a:	2c00      	cmp	r4, #0
  40659c:	d1f9      	bne.n	406592 <__libc_fini_array+0x16>
  40659e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4065a2:	f002 ba2b 	b.w	4089fc <_fini>
  4065a6:	bf00      	nop
  4065a8:	00408a0c 	.word	0x00408a0c
  4065ac:	00408a08 	.word	0x00408a08

004065b0 <_malloc_trim_r>:
  4065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065b2:	4f24      	ldr	r7, [pc, #144]	; (406644 <_malloc_trim_r+0x94>)
  4065b4:	460c      	mov	r4, r1
  4065b6:	4606      	mov	r6, r0
  4065b8:	f7fd f9bc 	bl	403934 <__malloc_lock>
  4065bc:	68bb      	ldr	r3, [r7, #8]
  4065be:	685d      	ldr	r5, [r3, #4]
  4065c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4065c4:	310f      	adds	r1, #15
  4065c6:	f025 0503 	bic.w	r5, r5, #3
  4065ca:	4429      	add	r1, r5
  4065cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4065d0:	f021 010f 	bic.w	r1, r1, #15
  4065d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4065d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4065dc:	db07      	blt.n	4065ee <_malloc_trim_r+0x3e>
  4065de:	2100      	movs	r1, #0
  4065e0:	4630      	mov	r0, r6
  4065e2:	f7fd fa1d 	bl	403a20 <_sbrk_r>
  4065e6:	68bb      	ldr	r3, [r7, #8]
  4065e8:	442b      	add	r3, r5
  4065ea:	4298      	cmp	r0, r3
  4065ec:	d004      	beq.n	4065f8 <_malloc_trim_r+0x48>
  4065ee:	4630      	mov	r0, r6
  4065f0:	f7fd f9a6 	bl	403940 <__malloc_unlock>
  4065f4:	2000      	movs	r0, #0
  4065f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4065f8:	4261      	negs	r1, r4
  4065fa:	4630      	mov	r0, r6
  4065fc:	f7fd fa10 	bl	403a20 <_sbrk_r>
  406600:	3001      	adds	r0, #1
  406602:	d00d      	beq.n	406620 <_malloc_trim_r+0x70>
  406604:	4b10      	ldr	r3, [pc, #64]	; (406648 <_malloc_trim_r+0x98>)
  406606:	68ba      	ldr	r2, [r7, #8]
  406608:	6819      	ldr	r1, [r3, #0]
  40660a:	1b2d      	subs	r5, r5, r4
  40660c:	f045 0501 	orr.w	r5, r5, #1
  406610:	4630      	mov	r0, r6
  406612:	1b09      	subs	r1, r1, r4
  406614:	6055      	str	r5, [r2, #4]
  406616:	6019      	str	r1, [r3, #0]
  406618:	f7fd f992 	bl	403940 <__malloc_unlock>
  40661c:	2001      	movs	r0, #1
  40661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406620:	2100      	movs	r1, #0
  406622:	4630      	mov	r0, r6
  406624:	f7fd f9fc 	bl	403a20 <_sbrk_r>
  406628:	68ba      	ldr	r2, [r7, #8]
  40662a:	1a83      	subs	r3, r0, r2
  40662c:	2b0f      	cmp	r3, #15
  40662e:	ddde      	ble.n	4065ee <_malloc_trim_r+0x3e>
  406630:	4c06      	ldr	r4, [pc, #24]	; (40664c <_malloc_trim_r+0x9c>)
  406632:	4905      	ldr	r1, [pc, #20]	; (406648 <_malloc_trim_r+0x98>)
  406634:	6824      	ldr	r4, [r4, #0]
  406636:	f043 0301 	orr.w	r3, r3, #1
  40663a:	1b00      	subs	r0, r0, r4
  40663c:	6053      	str	r3, [r2, #4]
  40663e:	6008      	str	r0, [r1, #0]
  406640:	e7d5      	b.n	4065ee <_malloc_trim_r+0x3e>
  406642:	bf00      	nop
  406644:	20400438 	.word	0x20400438
  406648:	20400b8c 	.word	0x20400b8c
  40664c:	20400840 	.word	0x20400840

00406650 <_free_r>:
  406650:	2900      	cmp	r1, #0
  406652:	d044      	beq.n	4066de <_free_r+0x8e>
  406654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406658:	460d      	mov	r5, r1
  40665a:	4680      	mov	r8, r0
  40665c:	f7fd f96a 	bl	403934 <__malloc_lock>
  406660:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406664:	4969      	ldr	r1, [pc, #420]	; (40680c <_free_r+0x1bc>)
  406666:	f027 0301 	bic.w	r3, r7, #1
  40666a:	f1a5 0408 	sub.w	r4, r5, #8
  40666e:	18e2      	adds	r2, r4, r3
  406670:	688e      	ldr	r6, [r1, #8]
  406672:	6850      	ldr	r0, [r2, #4]
  406674:	42b2      	cmp	r2, r6
  406676:	f020 0003 	bic.w	r0, r0, #3
  40667a:	d05e      	beq.n	40673a <_free_r+0xea>
  40667c:	07fe      	lsls	r6, r7, #31
  40667e:	6050      	str	r0, [r2, #4]
  406680:	d40b      	bmi.n	40669a <_free_r+0x4a>
  406682:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406686:	1be4      	subs	r4, r4, r7
  406688:	f101 0e08 	add.w	lr, r1, #8
  40668c:	68a5      	ldr	r5, [r4, #8]
  40668e:	4575      	cmp	r5, lr
  406690:	443b      	add	r3, r7
  406692:	d06d      	beq.n	406770 <_free_r+0x120>
  406694:	68e7      	ldr	r7, [r4, #12]
  406696:	60ef      	str	r7, [r5, #12]
  406698:	60bd      	str	r5, [r7, #8]
  40669a:	1815      	adds	r5, r2, r0
  40669c:	686d      	ldr	r5, [r5, #4]
  40669e:	07ed      	lsls	r5, r5, #31
  4066a0:	d53e      	bpl.n	406720 <_free_r+0xd0>
  4066a2:	f043 0201 	orr.w	r2, r3, #1
  4066a6:	6062      	str	r2, [r4, #4]
  4066a8:	50e3      	str	r3, [r4, r3]
  4066aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4066ae:	d217      	bcs.n	4066e0 <_free_r+0x90>
  4066b0:	08db      	lsrs	r3, r3, #3
  4066b2:	1c58      	adds	r0, r3, #1
  4066b4:	109a      	asrs	r2, r3, #2
  4066b6:	684d      	ldr	r5, [r1, #4]
  4066b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4066bc:	60a7      	str	r7, [r4, #8]
  4066be:	2301      	movs	r3, #1
  4066c0:	4093      	lsls	r3, r2
  4066c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4066c6:	432b      	orrs	r3, r5
  4066c8:	3a08      	subs	r2, #8
  4066ca:	60e2      	str	r2, [r4, #12]
  4066cc:	604b      	str	r3, [r1, #4]
  4066ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4066d2:	60fc      	str	r4, [r7, #12]
  4066d4:	4640      	mov	r0, r8
  4066d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4066da:	f7fd b931 	b.w	403940 <__malloc_unlock>
  4066de:	4770      	bx	lr
  4066e0:	0a5a      	lsrs	r2, r3, #9
  4066e2:	2a04      	cmp	r2, #4
  4066e4:	d852      	bhi.n	40678c <_free_r+0x13c>
  4066e6:	099a      	lsrs	r2, r3, #6
  4066e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4066ec:	00ff      	lsls	r7, r7, #3
  4066ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4066f2:	19c8      	adds	r0, r1, r7
  4066f4:	59ca      	ldr	r2, [r1, r7]
  4066f6:	3808      	subs	r0, #8
  4066f8:	4290      	cmp	r0, r2
  4066fa:	d04f      	beq.n	40679c <_free_r+0x14c>
  4066fc:	6851      	ldr	r1, [r2, #4]
  4066fe:	f021 0103 	bic.w	r1, r1, #3
  406702:	428b      	cmp	r3, r1
  406704:	d232      	bcs.n	40676c <_free_r+0x11c>
  406706:	6892      	ldr	r2, [r2, #8]
  406708:	4290      	cmp	r0, r2
  40670a:	d1f7      	bne.n	4066fc <_free_r+0xac>
  40670c:	68c3      	ldr	r3, [r0, #12]
  40670e:	60a0      	str	r0, [r4, #8]
  406710:	60e3      	str	r3, [r4, #12]
  406712:	609c      	str	r4, [r3, #8]
  406714:	60c4      	str	r4, [r0, #12]
  406716:	4640      	mov	r0, r8
  406718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40671c:	f7fd b910 	b.w	403940 <__malloc_unlock>
  406720:	6895      	ldr	r5, [r2, #8]
  406722:	4f3b      	ldr	r7, [pc, #236]	; (406810 <_free_r+0x1c0>)
  406724:	42bd      	cmp	r5, r7
  406726:	4403      	add	r3, r0
  406728:	d040      	beq.n	4067ac <_free_r+0x15c>
  40672a:	68d0      	ldr	r0, [r2, #12]
  40672c:	60e8      	str	r0, [r5, #12]
  40672e:	f043 0201 	orr.w	r2, r3, #1
  406732:	6085      	str	r5, [r0, #8]
  406734:	6062      	str	r2, [r4, #4]
  406736:	50e3      	str	r3, [r4, r3]
  406738:	e7b7      	b.n	4066aa <_free_r+0x5a>
  40673a:	07ff      	lsls	r7, r7, #31
  40673c:	4403      	add	r3, r0
  40673e:	d407      	bmi.n	406750 <_free_r+0x100>
  406740:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406744:	1aa4      	subs	r4, r4, r2
  406746:	4413      	add	r3, r2
  406748:	68a0      	ldr	r0, [r4, #8]
  40674a:	68e2      	ldr	r2, [r4, #12]
  40674c:	60c2      	str	r2, [r0, #12]
  40674e:	6090      	str	r0, [r2, #8]
  406750:	4a30      	ldr	r2, [pc, #192]	; (406814 <_free_r+0x1c4>)
  406752:	6812      	ldr	r2, [r2, #0]
  406754:	f043 0001 	orr.w	r0, r3, #1
  406758:	4293      	cmp	r3, r2
  40675a:	6060      	str	r0, [r4, #4]
  40675c:	608c      	str	r4, [r1, #8]
  40675e:	d3b9      	bcc.n	4066d4 <_free_r+0x84>
  406760:	4b2d      	ldr	r3, [pc, #180]	; (406818 <_free_r+0x1c8>)
  406762:	4640      	mov	r0, r8
  406764:	6819      	ldr	r1, [r3, #0]
  406766:	f7ff ff23 	bl	4065b0 <_malloc_trim_r>
  40676a:	e7b3      	b.n	4066d4 <_free_r+0x84>
  40676c:	4610      	mov	r0, r2
  40676e:	e7cd      	b.n	40670c <_free_r+0xbc>
  406770:	1811      	adds	r1, r2, r0
  406772:	6849      	ldr	r1, [r1, #4]
  406774:	07c9      	lsls	r1, r1, #31
  406776:	d444      	bmi.n	406802 <_free_r+0x1b2>
  406778:	6891      	ldr	r1, [r2, #8]
  40677a:	68d2      	ldr	r2, [r2, #12]
  40677c:	60ca      	str	r2, [r1, #12]
  40677e:	4403      	add	r3, r0
  406780:	f043 0001 	orr.w	r0, r3, #1
  406784:	6091      	str	r1, [r2, #8]
  406786:	6060      	str	r0, [r4, #4]
  406788:	50e3      	str	r3, [r4, r3]
  40678a:	e7a3      	b.n	4066d4 <_free_r+0x84>
  40678c:	2a14      	cmp	r2, #20
  40678e:	d816      	bhi.n	4067be <_free_r+0x16e>
  406790:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406794:	00ff      	lsls	r7, r7, #3
  406796:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40679a:	e7aa      	b.n	4066f2 <_free_r+0xa2>
  40679c:	10aa      	asrs	r2, r5, #2
  40679e:	2301      	movs	r3, #1
  4067a0:	684d      	ldr	r5, [r1, #4]
  4067a2:	4093      	lsls	r3, r2
  4067a4:	432b      	orrs	r3, r5
  4067a6:	604b      	str	r3, [r1, #4]
  4067a8:	4603      	mov	r3, r0
  4067aa:	e7b0      	b.n	40670e <_free_r+0xbe>
  4067ac:	f043 0201 	orr.w	r2, r3, #1
  4067b0:	614c      	str	r4, [r1, #20]
  4067b2:	610c      	str	r4, [r1, #16]
  4067b4:	60e5      	str	r5, [r4, #12]
  4067b6:	60a5      	str	r5, [r4, #8]
  4067b8:	6062      	str	r2, [r4, #4]
  4067ba:	50e3      	str	r3, [r4, r3]
  4067bc:	e78a      	b.n	4066d4 <_free_r+0x84>
  4067be:	2a54      	cmp	r2, #84	; 0x54
  4067c0:	d806      	bhi.n	4067d0 <_free_r+0x180>
  4067c2:	0b1a      	lsrs	r2, r3, #12
  4067c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4067c8:	00ff      	lsls	r7, r7, #3
  4067ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4067ce:	e790      	b.n	4066f2 <_free_r+0xa2>
  4067d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4067d4:	d806      	bhi.n	4067e4 <_free_r+0x194>
  4067d6:	0bda      	lsrs	r2, r3, #15
  4067d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4067dc:	00ff      	lsls	r7, r7, #3
  4067de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4067e2:	e786      	b.n	4066f2 <_free_r+0xa2>
  4067e4:	f240 5054 	movw	r0, #1364	; 0x554
  4067e8:	4282      	cmp	r2, r0
  4067ea:	d806      	bhi.n	4067fa <_free_r+0x1aa>
  4067ec:	0c9a      	lsrs	r2, r3, #18
  4067ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4067f2:	00ff      	lsls	r7, r7, #3
  4067f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4067f8:	e77b      	b.n	4066f2 <_free_r+0xa2>
  4067fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4067fe:	257e      	movs	r5, #126	; 0x7e
  406800:	e777      	b.n	4066f2 <_free_r+0xa2>
  406802:	f043 0101 	orr.w	r1, r3, #1
  406806:	6061      	str	r1, [r4, #4]
  406808:	6013      	str	r3, [r2, #0]
  40680a:	e763      	b.n	4066d4 <_free_r+0x84>
  40680c:	20400438 	.word	0x20400438
  406810:	20400440 	.word	0x20400440
  406814:	20400844 	.word	0x20400844
  406818:	20400bbc 	.word	0x20400bbc

0040681c <__sfvwrite_r>:
  40681c:	6893      	ldr	r3, [r2, #8]
  40681e:	2b00      	cmp	r3, #0
  406820:	d073      	beq.n	40690a <__sfvwrite_r+0xee>
  406822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406826:	898b      	ldrh	r3, [r1, #12]
  406828:	b083      	sub	sp, #12
  40682a:	460c      	mov	r4, r1
  40682c:	0719      	lsls	r1, r3, #28
  40682e:	9000      	str	r0, [sp, #0]
  406830:	4616      	mov	r6, r2
  406832:	d526      	bpl.n	406882 <__sfvwrite_r+0x66>
  406834:	6922      	ldr	r2, [r4, #16]
  406836:	b322      	cbz	r2, 406882 <__sfvwrite_r+0x66>
  406838:	f013 0002 	ands.w	r0, r3, #2
  40683c:	6835      	ldr	r5, [r6, #0]
  40683e:	d02c      	beq.n	40689a <__sfvwrite_r+0x7e>
  406840:	f04f 0900 	mov.w	r9, #0
  406844:	4fb0      	ldr	r7, [pc, #704]	; (406b08 <__sfvwrite_r+0x2ec>)
  406846:	46c8      	mov	r8, r9
  406848:	46b2      	mov	sl, r6
  40684a:	45b8      	cmp	r8, r7
  40684c:	4643      	mov	r3, r8
  40684e:	464a      	mov	r2, r9
  406850:	bf28      	it	cs
  406852:	463b      	movcs	r3, r7
  406854:	9800      	ldr	r0, [sp, #0]
  406856:	f1b8 0f00 	cmp.w	r8, #0
  40685a:	d050      	beq.n	4068fe <__sfvwrite_r+0xe2>
  40685c:	69e1      	ldr	r1, [r4, #28]
  40685e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406860:	47b0      	blx	r6
  406862:	2800      	cmp	r0, #0
  406864:	dd58      	ble.n	406918 <__sfvwrite_r+0xfc>
  406866:	f8da 3008 	ldr.w	r3, [sl, #8]
  40686a:	1a1b      	subs	r3, r3, r0
  40686c:	4481      	add	r9, r0
  40686e:	eba8 0800 	sub.w	r8, r8, r0
  406872:	f8ca 3008 	str.w	r3, [sl, #8]
  406876:	2b00      	cmp	r3, #0
  406878:	d1e7      	bne.n	40684a <__sfvwrite_r+0x2e>
  40687a:	2000      	movs	r0, #0
  40687c:	b003      	add	sp, #12
  40687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406882:	4621      	mov	r1, r4
  406884:	9800      	ldr	r0, [sp, #0]
  406886:	f7fe fd17 	bl	4052b8 <__swsetup_r>
  40688a:	2800      	cmp	r0, #0
  40688c:	f040 8133 	bne.w	406af6 <__sfvwrite_r+0x2da>
  406890:	89a3      	ldrh	r3, [r4, #12]
  406892:	6835      	ldr	r5, [r6, #0]
  406894:	f013 0002 	ands.w	r0, r3, #2
  406898:	d1d2      	bne.n	406840 <__sfvwrite_r+0x24>
  40689a:	f013 0901 	ands.w	r9, r3, #1
  40689e:	d145      	bne.n	40692c <__sfvwrite_r+0x110>
  4068a0:	464f      	mov	r7, r9
  4068a2:	9601      	str	r6, [sp, #4]
  4068a4:	b337      	cbz	r7, 4068f4 <__sfvwrite_r+0xd8>
  4068a6:	059a      	lsls	r2, r3, #22
  4068a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4068ac:	f140 8083 	bpl.w	4069b6 <__sfvwrite_r+0x19a>
  4068b0:	4547      	cmp	r7, r8
  4068b2:	46c3      	mov	fp, r8
  4068b4:	f0c0 80ab 	bcc.w	406a0e <__sfvwrite_r+0x1f2>
  4068b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4068bc:	f040 80ac 	bne.w	406a18 <__sfvwrite_r+0x1fc>
  4068c0:	6820      	ldr	r0, [r4, #0]
  4068c2:	46ba      	mov	sl, r7
  4068c4:	465a      	mov	r2, fp
  4068c6:	4649      	mov	r1, r9
  4068c8:	f000 fa2a 	bl	406d20 <memmove>
  4068cc:	68a2      	ldr	r2, [r4, #8]
  4068ce:	6823      	ldr	r3, [r4, #0]
  4068d0:	eba2 0208 	sub.w	r2, r2, r8
  4068d4:	445b      	add	r3, fp
  4068d6:	60a2      	str	r2, [r4, #8]
  4068d8:	6023      	str	r3, [r4, #0]
  4068da:	9a01      	ldr	r2, [sp, #4]
  4068dc:	6893      	ldr	r3, [r2, #8]
  4068de:	eba3 030a 	sub.w	r3, r3, sl
  4068e2:	44d1      	add	r9, sl
  4068e4:	eba7 070a 	sub.w	r7, r7, sl
  4068e8:	6093      	str	r3, [r2, #8]
  4068ea:	2b00      	cmp	r3, #0
  4068ec:	d0c5      	beq.n	40687a <__sfvwrite_r+0x5e>
  4068ee:	89a3      	ldrh	r3, [r4, #12]
  4068f0:	2f00      	cmp	r7, #0
  4068f2:	d1d8      	bne.n	4068a6 <__sfvwrite_r+0x8a>
  4068f4:	f8d5 9000 	ldr.w	r9, [r5]
  4068f8:	686f      	ldr	r7, [r5, #4]
  4068fa:	3508      	adds	r5, #8
  4068fc:	e7d2      	b.n	4068a4 <__sfvwrite_r+0x88>
  4068fe:	f8d5 9000 	ldr.w	r9, [r5]
  406902:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406906:	3508      	adds	r5, #8
  406908:	e79f      	b.n	40684a <__sfvwrite_r+0x2e>
  40690a:	2000      	movs	r0, #0
  40690c:	4770      	bx	lr
  40690e:	4621      	mov	r1, r4
  406910:	9800      	ldr	r0, [sp, #0]
  406912:	f7ff fda3 	bl	40645c <_fflush_r>
  406916:	b370      	cbz	r0, 406976 <__sfvwrite_r+0x15a>
  406918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406920:	f04f 30ff 	mov.w	r0, #4294967295
  406924:	81a3      	strh	r3, [r4, #12]
  406926:	b003      	add	sp, #12
  406928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40692c:	4681      	mov	r9, r0
  40692e:	4633      	mov	r3, r6
  406930:	464e      	mov	r6, r9
  406932:	46a8      	mov	r8, r5
  406934:	469a      	mov	sl, r3
  406936:	464d      	mov	r5, r9
  406938:	b34e      	cbz	r6, 40698e <__sfvwrite_r+0x172>
  40693a:	b380      	cbz	r0, 40699e <__sfvwrite_r+0x182>
  40693c:	6820      	ldr	r0, [r4, #0]
  40693e:	6923      	ldr	r3, [r4, #16]
  406940:	6962      	ldr	r2, [r4, #20]
  406942:	45b1      	cmp	r9, r6
  406944:	46cb      	mov	fp, r9
  406946:	bf28      	it	cs
  406948:	46b3      	movcs	fp, r6
  40694a:	4298      	cmp	r0, r3
  40694c:	465f      	mov	r7, fp
  40694e:	d904      	bls.n	40695a <__sfvwrite_r+0x13e>
  406950:	68a3      	ldr	r3, [r4, #8]
  406952:	4413      	add	r3, r2
  406954:	459b      	cmp	fp, r3
  406956:	f300 80a6 	bgt.w	406aa6 <__sfvwrite_r+0x28a>
  40695a:	4593      	cmp	fp, r2
  40695c:	db4b      	blt.n	4069f6 <__sfvwrite_r+0x1da>
  40695e:	4613      	mov	r3, r2
  406960:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406962:	69e1      	ldr	r1, [r4, #28]
  406964:	9800      	ldr	r0, [sp, #0]
  406966:	462a      	mov	r2, r5
  406968:	47b8      	blx	r7
  40696a:	1e07      	subs	r7, r0, #0
  40696c:	ddd4      	ble.n	406918 <__sfvwrite_r+0xfc>
  40696e:	ebb9 0907 	subs.w	r9, r9, r7
  406972:	d0cc      	beq.n	40690e <__sfvwrite_r+0xf2>
  406974:	2001      	movs	r0, #1
  406976:	f8da 3008 	ldr.w	r3, [sl, #8]
  40697a:	1bdb      	subs	r3, r3, r7
  40697c:	443d      	add	r5, r7
  40697e:	1bf6      	subs	r6, r6, r7
  406980:	f8ca 3008 	str.w	r3, [sl, #8]
  406984:	2b00      	cmp	r3, #0
  406986:	f43f af78 	beq.w	40687a <__sfvwrite_r+0x5e>
  40698a:	2e00      	cmp	r6, #0
  40698c:	d1d5      	bne.n	40693a <__sfvwrite_r+0x11e>
  40698e:	f108 0308 	add.w	r3, r8, #8
  406992:	e913 0060 	ldmdb	r3, {r5, r6}
  406996:	4698      	mov	r8, r3
  406998:	3308      	adds	r3, #8
  40699a:	2e00      	cmp	r6, #0
  40699c:	d0f9      	beq.n	406992 <__sfvwrite_r+0x176>
  40699e:	4632      	mov	r2, r6
  4069a0:	210a      	movs	r1, #10
  4069a2:	4628      	mov	r0, r5
  4069a4:	f000 f96c 	bl	406c80 <memchr>
  4069a8:	2800      	cmp	r0, #0
  4069aa:	f000 80a1 	beq.w	406af0 <__sfvwrite_r+0x2d4>
  4069ae:	3001      	adds	r0, #1
  4069b0:	eba0 0905 	sub.w	r9, r0, r5
  4069b4:	e7c2      	b.n	40693c <__sfvwrite_r+0x120>
  4069b6:	6820      	ldr	r0, [r4, #0]
  4069b8:	6923      	ldr	r3, [r4, #16]
  4069ba:	4298      	cmp	r0, r3
  4069bc:	d802      	bhi.n	4069c4 <__sfvwrite_r+0x1a8>
  4069be:	6963      	ldr	r3, [r4, #20]
  4069c0:	429f      	cmp	r7, r3
  4069c2:	d25d      	bcs.n	406a80 <__sfvwrite_r+0x264>
  4069c4:	45b8      	cmp	r8, r7
  4069c6:	bf28      	it	cs
  4069c8:	46b8      	movcs	r8, r7
  4069ca:	4642      	mov	r2, r8
  4069cc:	4649      	mov	r1, r9
  4069ce:	f000 f9a7 	bl	406d20 <memmove>
  4069d2:	68a3      	ldr	r3, [r4, #8]
  4069d4:	6822      	ldr	r2, [r4, #0]
  4069d6:	eba3 0308 	sub.w	r3, r3, r8
  4069da:	4442      	add	r2, r8
  4069dc:	60a3      	str	r3, [r4, #8]
  4069de:	6022      	str	r2, [r4, #0]
  4069e0:	b10b      	cbz	r3, 4069e6 <__sfvwrite_r+0x1ca>
  4069e2:	46c2      	mov	sl, r8
  4069e4:	e779      	b.n	4068da <__sfvwrite_r+0xbe>
  4069e6:	4621      	mov	r1, r4
  4069e8:	9800      	ldr	r0, [sp, #0]
  4069ea:	f7ff fd37 	bl	40645c <_fflush_r>
  4069ee:	2800      	cmp	r0, #0
  4069f0:	d192      	bne.n	406918 <__sfvwrite_r+0xfc>
  4069f2:	46c2      	mov	sl, r8
  4069f4:	e771      	b.n	4068da <__sfvwrite_r+0xbe>
  4069f6:	465a      	mov	r2, fp
  4069f8:	4629      	mov	r1, r5
  4069fa:	f000 f991 	bl	406d20 <memmove>
  4069fe:	68a2      	ldr	r2, [r4, #8]
  406a00:	6823      	ldr	r3, [r4, #0]
  406a02:	eba2 020b 	sub.w	r2, r2, fp
  406a06:	445b      	add	r3, fp
  406a08:	60a2      	str	r2, [r4, #8]
  406a0a:	6023      	str	r3, [r4, #0]
  406a0c:	e7af      	b.n	40696e <__sfvwrite_r+0x152>
  406a0e:	6820      	ldr	r0, [r4, #0]
  406a10:	46b8      	mov	r8, r7
  406a12:	46ba      	mov	sl, r7
  406a14:	46bb      	mov	fp, r7
  406a16:	e755      	b.n	4068c4 <__sfvwrite_r+0xa8>
  406a18:	6962      	ldr	r2, [r4, #20]
  406a1a:	6820      	ldr	r0, [r4, #0]
  406a1c:	6921      	ldr	r1, [r4, #16]
  406a1e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406a22:	eba0 0a01 	sub.w	sl, r0, r1
  406a26:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406a2a:	f10a 0001 	add.w	r0, sl, #1
  406a2e:	ea4f 0868 	mov.w	r8, r8, asr #1
  406a32:	4438      	add	r0, r7
  406a34:	4540      	cmp	r0, r8
  406a36:	4642      	mov	r2, r8
  406a38:	bf84      	itt	hi
  406a3a:	4680      	movhi	r8, r0
  406a3c:	4642      	movhi	r2, r8
  406a3e:	055b      	lsls	r3, r3, #21
  406a40:	d544      	bpl.n	406acc <__sfvwrite_r+0x2b0>
  406a42:	4611      	mov	r1, r2
  406a44:	9800      	ldr	r0, [sp, #0]
  406a46:	f7fc fbdd 	bl	403204 <_malloc_r>
  406a4a:	4683      	mov	fp, r0
  406a4c:	2800      	cmp	r0, #0
  406a4e:	d055      	beq.n	406afc <__sfvwrite_r+0x2e0>
  406a50:	4652      	mov	r2, sl
  406a52:	6921      	ldr	r1, [r4, #16]
  406a54:	f7fc fe86 	bl	403764 <memcpy>
  406a58:	89a3      	ldrh	r3, [r4, #12]
  406a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406a62:	81a3      	strh	r3, [r4, #12]
  406a64:	eb0b 000a 	add.w	r0, fp, sl
  406a68:	eba8 030a 	sub.w	r3, r8, sl
  406a6c:	f8c4 b010 	str.w	fp, [r4, #16]
  406a70:	f8c4 8014 	str.w	r8, [r4, #20]
  406a74:	6020      	str	r0, [r4, #0]
  406a76:	60a3      	str	r3, [r4, #8]
  406a78:	46b8      	mov	r8, r7
  406a7a:	46ba      	mov	sl, r7
  406a7c:	46bb      	mov	fp, r7
  406a7e:	e721      	b.n	4068c4 <__sfvwrite_r+0xa8>
  406a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406a84:	42b9      	cmp	r1, r7
  406a86:	bf28      	it	cs
  406a88:	4639      	movcs	r1, r7
  406a8a:	464a      	mov	r2, r9
  406a8c:	fb91 f1f3 	sdiv	r1, r1, r3
  406a90:	9800      	ldr	r0, [sp, #0]
  406a92:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406a94:	fb03 f301 	mul.w	r3, r3, r1
  406a98:	69e1      	ldr	r1, [r4, #28]
  406a9a:	47b0      	blx	r6
  406a9c:	f1b0 0a00 	subs.w	sl, r0, #0
  406aa0:	f73f af1b 	bgt.w	4068da <__sfvwrite_r+0xbe>
  406aa4:	e738      	b.n	406918 <__sfvwrite_r+0xfc>
  406aa6:	461a      	mov	r2, r3
  406aa8:	4629      	mov	r1, r5
  406aaa:	9301      	str	r3, [sp, #4]
  406aac:	f000 f938 	bl	406d20 <memmove>
  406ab0:	6822      	ldr	r2, [r4, #0]
  406ab2:	9b01      	ldr	r3, [sp, #4]
  406ab4:	9800      	ldr	r0, [sp, #0]
  406ab6:	441a      	add	r2, r3
  406ab8:	6022      	str	r2, [r4, #0]
  406aba:	4621      	mov	r1, r4
  406abc:	f7ff fcce 	bl	40645c <_fflush_r>
  406ac0:	9b01      	ldr	r3, [sp, #4]
  406ac2:	2800      	cmp	r0, #0
  406ac4:	f47f af28 	bne.w	406918 <__sfvwrite_r+0xfc>
  406ac8:	461f      	mov	r7, r3
  406aca:	e750      	b.n	40696e <__sfvwrite_r+0x152>
  406acc:	9800      	ldr	r0, [sp, #0]
  406ace:	f000 fc85 	bl	4073dc <_realloc_r>
  406ad2:	4683      	mov	fp, r0
  406ad4:	2800      	cmp	r0, #0
  406ad6:	d1c5      	bne.n	406a64 <__sfvwrite_r+0x248>
  406ad8:	9d00      	ldr	r5, [sp, #0]
  406ada:	6921      	ldr	r1, [r4, #16]
  406adc:	4628      	mov	r0, r5
  406ade:	f7ff fdb7 	bl	406650 <_free_r>
  406ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ae6:	220c      	movs	r2, #12
  406ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406aec:	602a      	str	r2, [r5, #0]
  406aee:	e715      	b.n	40691c <__sfvwrite_r+0x100>
  406af0:	f106 0901 	add.w	r9, r6, #1
  406af4:	e722      	b.n	40693c <__sfvwrite_r+0x120>
  406af6:	f04f 30ff 	mov.w	r0, #4294967295
  406afa:	e6bf      	b.n	40687c <__sfvwrite_r+0x60>
  406afc:	9a00      	ldr	r2, [sp, #0]
  406afe:	230c      	movs	r3, #12
  406b00:	6013      	str	r3, [r2, #0]
  406b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b06:	e709      	b.n	40691c <__sfvwrite_r+0x100>
  406b08:	7ffffc00 	.word	0x7ffffc00

00406b0c <_fwalk_reent>:
  406b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406b10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406b14:	d01f      	beq.n	406b56 <_fwalk_reent+0x4a>
  406b16:	4688      	mov	r8, r1
  406b18:	4606      	mov	r6, r0
  406b1a:	f04f 0900 	mov.w	r9, #0
  406b1e:	687d      	ldr	r5, [r7, #4]
  406b20:	68bc      	ldr	r4, [r7, #8]
  406b22:	3d01      	subs	r5, #1
  406b24:	d411      	bmi.n	406b4a <_fwalk_reent+0x3e>
  406b26:	89a3      	ldrh	r3, [r4, #12]
  406b28:	2b01      	cmp	r3, #1
  406b2a:	f105 35ff 	add.w	r5, r5, #4294967295
  406b2e:	d908      	bls.n	406b42 <_fwalk_reent+0x36>
  406b30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406b34:	3301      	adds	r3, #1
  406b36:	4621      	mov	r1, r4
  406b38:	4630      	mov	r0, r6
  406b3a:	d002      	beq.n	406b42 <_fwalk_reent+0x36>
  406b3c:	47c0      	blx	r8
  406b3e:	ea49 0900 	orr.w	r9, r9, r0
  406b42:	1c6b      	adds	r3, r5, #1
  406b44:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406b48:	d1ed      	bne.n	406b26 <_fwalk_reent+0x1a>
  406b4a:	683f      	ldr	r7, [r7, #0]
  406b4c:	2f00      	cmp	r7, #0
  406b4e:	d1e6      	bne.n	406b1e <_fwalk_reent+0x12>
  406b50:	4648      	mov	r0, r9
  406b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b56:	46b9      	mov	r9, r7
  406b58:	4648      	mov	r0, r9
  406b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b5e:	bf00      	nop

00406b60 <_localeconv_r>:
  406b60:	4a04      	ldr	r2, [pc, #16]	; (406b74 <_localeconv_r+0x14>)
  406b62:	4b05      	ldr	r3, [pc, #20]	; (406b78 <_localeconv_r+0x18>)
  406b64:	6812      	ldr	r2, [r2, #0]
  406b66:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406b68:	2800      	cmp	r0, #0
  406b6a:	bf08      	it	eq
  406b6c:	4618      	moveq	r0, r3
  406b6e:	30f0      	adds	r0, #240	; 0xf0
  406b70:	4770      	bx	lr
  406b72:	bf00      	nop
  406b74:	2040000c 	.word	0x2040000c
  406b78:	2040084c 	.word	0x2040084c

00406b7c <__retarget_lock_init_recursive>:
  406b7c:	4770      	bx	lr
  406b7e:	bf00      	nop

00406b80 <__retarget_lock_close_recursive>:
  406b80:	4770      	bx	lr
  406b82:	bf00      	nop

00406b84 <__retarget_lock_acquire_recursive>:
  406b84:	4770      	bx	lr
  406b86:	bf00      	nop

00406b88 <__retarget_lock_release_recursive>:
  406b88:	4770      	bx	lr
  406b8a:	bf00      	nop

00406b8c <__swhatbuf_r>:
  406b8c:	b570      	push	{r4, r5, r6, lr}
  406b8e:	460c      	mov	r4, r1
  406b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b94:	2900      	cmp	r1, #0
  406b96:	b090      	sub	sp, #64	; 0x40
  406b98:	4615      	mov	r5, r2
  406b9a:	461e      	mov	r6, r3
  406b9c:	db14      	blt.n	406bc8 <__swhatbuf_r+0x3c>
  406b9e:	aa01      	add	r2, sp, #4
  406ba0:	f000 fff0 	bl	407b84 <_fstat_r>
  406ba4:	2800      	cmp	r0, #0
  406ba6:	db0f      	blt.n	406bc8 <__swhatbuf_r+0x3c>
  406ba8:	9a02      	ldr	r2, [sp, #8]
  406baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406bae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406bb2:	fab2 f282 	clz	r2, r2
  406bb6:	0952      	lsrs	r2, r2, #5
  406bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406bbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406bc0:	6032      	str	r2, [r6, #0]
  406bc2:	602b      	str	r3, [r5, #0]
  406bc4:	b010      	add	sp, #64	; 0x40
  406bc6:	bd70      	pop	{r4, r5, r6, pc}
  406bc8:	89a2      	ldrh	r2, [r4, #12]
  406bca:	2300      	movs	r3, #0
  406bcc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406bd0:	6033      	str	r3, [r6, #0]
  406bd2:	d004      	beq.n	406bde <__swhatbuf_r+0x52>
  406bd4:	2240      	movs	r2, #64	; 0x40
  406bd6:	4618      	mov	r0, r3
  406bd8:	602a      	str	r2, [r5, #0]
  406bda:	b010      	add	sp, #64	; 0x40
  406bdc:	bd70      	pop	{r4, r5, r6, pc}
  406bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406be2:	602b      	str	r3, [r5, #0]
  406be4:	b010      	add	sp, #64	; 0x40
  406be6:	bd70      	pop	{r4, r5, r6, pc}

00406be8 <__smakebuf_r>:
  406be8:	898a      	ldrh	r2, [r1, #12]
  406bea:	0792      	lsls	r2, r2, #30
  406bec:	460b      	mov	r3, r1
  406bee:	d506      	bpl.n	406bfe <__smakebuf_r+0x16>
  406bf0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406bf4:	2101      	movs	r1, #1
  406bf6:	601a      	str	r2, [r3, #0]
  406bf8:	611a      	str	r2, [r3, #16]
  406bfa:	6159      	str	r1, [r3, #20]
  406bfc:	4770      	bx	lr
  406bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c00:	b083      	sub	sp, #12
  406c02:	ab01      	add	r3, sp, #4
  406c04:	466a      	mov	r2, sp
  406c06:	460c      	mov	r4, r1
  406c08:	4606      	mov	r6, r0
  406c0a:	f7ff ffbf 	bl	406b8c <__swhatbuf_r>
  406c0e:	9900      	ldr	r1, [sp, #0]
  406c10:	4605      	mov	r5, r0
  406c12:	4630      	mov	r0, r6
  406c14:	f7fc faf6 	bl	403204 <_malloc_r>
  406c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c1c:	b1d8      	cbz	r0, 406c56 <__smakebuf_r+0x6e>
  406c1e:	9a01      	ldr	r2, [sp, #4]
  406c20:	4f15      	ldr	r7, [pc, #84]	; (406c78 <__smakebuf_r+0x90>)
  406c22:	9900      	ldr	r1, [sp, #0]
  406c24:	63f7      	str	r7, [r6, #60]	; 0x3c
  406c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406c2a:	81a3      	strh	r3, [r4, #12]
  406c2c:	6020      	str	r0, [r4, #0]
  406c2e:	6120      	str	r0, [r4, #16]
  406c30:	6161      	str	r1, [r4, #20]
  406c32:	b91a      	cbnz	r2, 406c3c <__smakebuf_r+0x54>
  406c34:	432b      	orrs	r3, r5
  406c36:	81a3      	strh	r3, [r4, #12]
  406c38:	b003      	add	sp, #12
  406c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c3c:	4630      	mov	r0, r6
  406c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406c42:	f000 ffb3 	bl	407bac <_isatty_r>
  406c46:	b1a0      	cbz	r0, 406c72 <__smakebuf_r+0x8a>
  406c48:	89a3      	ldrh	r3, [r4, #12]
  406c4a:	f023 0303 	bic.w	r3, r3, #3
  406c4e:	f043 0301 	orr.w	r3, r3, #1
  406c52:	b21b      	sxth	r3, r3
  406c54:	e7ee      	b.n	406c34 <__smakebuf_r+0x4c>
  406c56:	059a      	lsls	r2, r3, #22
  406c58:	d4ee      	bmi.n	406c38 <__smakebuf_r+0x50>
  406c5a:	f023 0303 	bic.w	r3, r3, #3
  406c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406c62:	f043 0302 	orr.w	r3, r3, #2
  406c66:	2101      	movs	r1, #1
  406c68:	81a3      	strh	r3, [r4, #12]
  406c6a:	6022      	str	r2, [r4, #0]
  406c6c:	6122      	str	r2, [r4, #16]
  406c6e:	6161      	str	r1, [r4, #20]
  406c70:	e7e2      	b.n	406c38 <__smakebuf_r+0x50>
  406c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c76:	e7dd      	b.n	406c34 <__smakebuf_r+0x4c>
  406c78:	004064b1 	.word	0x004064b1
  406c7c:	00000000 	.word	0x00000000

00406c80 <memchr>:
  406c80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406c84:	2a10      	cmp	r2, #16
  406c86:	db2b      	blt.n	406ce0 <memchr+0x60>
  406c88:	f010 0f07 	tst.w	r0, #7
  406c8c:	d008      	beq.n	406ca0 <memchr+0x20>
  406c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406c92:	3a01      	subs	r2, #1
  406c94:	428b      	cmp	r3, r1
  406c96:	d02d      	beq.n	406cf4 <memchr+0x74>
  406c98:	f010 0f07 	tst.w	r0, #7
  406c9c:	b342      	cbz	r2, 406cf0 <memchr+0x70>
  406c9e:	d1f6      	bne.n	406c8e <memchr+0xe>
  406ca0:	b4f0      	push	{r4, r5, r6, r7}
  406ca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406ca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406caa:	f022 0407 	bic.w	r4, r2, #7
  406cae:	f07f 0700 	mvns.w	r7, #0
  406cb2:	2300      	movs	r3, #0
  406cb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406cb8:	3c08      	subs	r4, #8
  406cba:	ea85 0501 	eor.w	r5, r5, r1
  406cbe:	ea86 0601 	eor.w	r6, r6, r1
  406cc2:	fa85 f547 	uadd8	r5, r5, r7
  406cc6:	faa3 f587 	sel	r5, r3, r7
  406cca:	fa86 f647 	uadd8	r6, r6, r7
  406cce:	faa5 f687 	sel	r6, r5, r7
  406cd2:	b98e      	cbnz	r6, 406cf8 <memchr+0x78>
  406cd4:	d1ee      	bne.n	406cb4 <memchr+0x34>
  406cd6:	bcf0      	pop	{r4, r5, r6, r7}
  406cd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406cdc:	f002 0207 	and.w	r2, r2, #7
  406ce0:	b132      	cbz	r2, 406cf0 <memchr+0x70>
  406ce2:	f810 3b01 	ldrb.w	r3, [r0], #1
  406ce6:	3a01      	subs	r2, #1
  406ce8:	ea83 0301 	eor.w	r3, r3, r1
  406cec:	b113      	cbz	r3, 406cf4 <memchr+0x74>
  406cee:	d1f8      	bne.n	406ce2 <memchr+0x62>
  406cf0:	2000      	movs	r0, #0
  406cf2:	4770      	bx	lr
  406cf4:	3801      	subs	r0, #1
  406cf6:	4770      	bx	lr
  406cf8:	2d00      	cmp	r5, #0
  406cfa:	bf06      	itte	eq
  406cfc:	4635      	moveq	r5, r6
  406cfe:	3803      	subeq	r0, #3
  406d00:	3807      	subne	r0, #7
  406d02:	f015 0f01 	tst.w	r5, #1
  406d06:	d107      	bne.n	406d18 <memchr+0x98>
  406d08:	3001      	adds	r0, #1
  406d0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406d0e:	bf02      	ittt	eq
  406d10:	3001      	addeq	r0, #1
  406d12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406d16:	3001      	addeq	r0, #1
  406d18:	bcf0      	pop	{r4, r5, r6, r7}
  406d1a:	3801      	subs	r0, #1
  406d1c:	4770      	bx	lr
  406d1e:	bf00      	nop

00406d20 <memmove>:
  406d20:	4288      	cmp	r0, r1
  406d22:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d24:	d90d      	bls.n	406d42 <memmove+0x22>
  406d26:	188b      	adds	r3, r1, r2
  406d28:	4298      	cmp	r0, r3
  406d2a:	d20a      	bcs.n	406d42 <memmove+0x22>
  406d2c:	1884      	adds	r4, r0, r2
  406d2e:	2a00      	cmp	r2, #0
  406d30:	d051      	beq.n	406dd6 <memmove+0xb6>
  406d32:	4622      	mov	r2, r4
  406d34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406d38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406d3c:	4299      	cmp	r1, r3
  406d3e:	d1f9      	bne.n	406d34 <memmove+0x14>
  406d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d42:	2a0f      	cmp	r2, #15
  406d44:	d948      	bls.n	406dd8 <memmove+0xb8>
  406d46:	ea41 0300 	orr.w	r3, r1, r0
  406d4a:	079b      	lsls	r3, r3, #30
  406d4c:	d146      	bne.n	406ddc <memmove+0xbc>
  406d4e:	f100 0410 	add.w	r4, r0, #16
  406d52:	f101 0310 	add.w	r3, r1, #16
  406d56:	4615      	mov	r5, r2
  406d58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406d5c:	f844 6c10 	str.w	r6, [r4, #-16]
  406d60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406d64:	f844 6c0c 	str.w	r6, [r4, #-12]
  406d68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406d6c:	f844 6c08 	str.w	r6, [r4, #-8]
  406d70:	3d10      	subs	r5, #16
  406d72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406d76:	f844 6c04 	str.w	r6, [r4, #-4]
  406d7a:	2d0f      	cmp	r5, #15
  406d7c:	f103 0310 	add.w	r3, r3, #16
  406d80:	f104 0410 	add.w	r4, r4, #16
  406d84:	d8e8      	bhi.n	406d58 <memmove+0x38>
  406d86:	f1a2 0310 	sub.w	r3, r2, #16
  406d8a:	f023 030f 	bic.w	r3, r3, #15
  406d8e:	f002 0e0f 	and.w	lr, r2, #15
  406d92:	3310      	adds	r3, #16
  406d94:	f1be 0f03 	cmp.w	lr, #3
  406d98:	4419      	add	r1, r3
  406d9a:	4403      	add	r3, r0
  406d9c:	d921      	bls.n	406de2 <memmove+0xc2>
  406d9e:	1f1e      	subs	r6, r3, #4
  406da0:	460d      	mov	r5, r1
  406da2:	4674      	mov	r4, lr
  406da4:	3c04      	subs	r4, #4
  406da6:	f855 7b04 	ldr.w	r7, [r5], #4
  406daa:	f846 7f04 	str.w	r7, [r6, #4]!
  406dae:	2c03      	cmp	r4, #3
  406db0:	d8f8      	bhi.n	406da4 <memmove+0x84>
  406db2:	f1ae 0404 	sub.w	r4, lr, #4
  406db6:	f024 0403 	bic.w	r4, r4, #3
  406dba:	3404      	adds	r4, #4
  406dbc:	4421      	add	r1, r4
  406dbe:	4423      	add	r3, r4
  406dc0:	f002 0203 	and.w	r2, r2, #3
  406dc4:	b162      	cbz	r2, 406de0 <memmove+0xc0>
  406dc6:	3b01      	subs	r3, #1
  406dc8:	440a      	add	r2, r1
  406dca:	f811 4b01 	ldrb.w	r4, [r1], #1
  406dce:	f803 4f01 	strb.w	r4, [r3, #1]!
  406dd2:	428a      	cmp	r2, r1
  406dd4:	d1f9      	bne.n	406dca <memmove+0xaa>
  406dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406dd8:	4603      	mov	r3, r0
  406dda:	e7f3      	b.n	406dc4 <memmove+0xa4>
  406ddc:	4603      	mov	r3, r0
  406dde:	e7f2      	b.n	406dc6 <memmove+0xa6>
  406de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406de2:	4672      	mov	r2, lr
  406de4:	e7ee      	b.n	406dc4 <memmove+0xa4>
  406de6:	bf00      	nop

00406de8 <_Balloc>:
  406de8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406dea:	b570      	push	{r4, r5, r6, lr}
  406dec:	4605      	mov	r5, r0
  406dee:	460c      	mov	r4, r1
  406df0:	b14b      	cbz	r3, 406e06 <_Balloc+0x1e>
  406df2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406df6:	b180      	cbz	r0, 406e1a <_Balloc+0x32>
  406df8:	6802      	ldr	r2, [r0, #0]
  406dfa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406dfe:	2300      	movs	r3, #0
  406e00:	6103      	str	r3, [r0, #16]
  406e02:	60c3      	str	r3, [r0, #12]
  406e04:	bd70      	pop	{r4, r5, r6, pc}
  406e06:	2221      	movs	r2, #33	; 0x21
  406e08:	2104      	movs	r1, #4
  406e0a:	f000 fd93 	bl	407934 <_calloc_r>
  406e0e:	64e8      	str	r0, [r5, #76]	; 0x4c
  406e10:	4603      	mov	r3, r0
  406e12:	2800      	cmp	r0, #0
  406e14:	d1ed      	bne.n	406df2 <_Balloc+0xa>
  406e16:	2000      	movs	r0, #0
  406e18:	bd70      	pop	{r4, r5, r6, pc}
  406e1a:	2101      	movs	r1, #1
  406e1c:	fa01 f604 	lsl.w	r6, r1, r4
  406e20:	1d72      	adds	r2, r6, #5
  406e22:	4628      	mov	r0, r5
  406e24:	0092      	lsls	r2, r2, #2
  406e26:	f000 fd85 	bl	407934 <_calloc_r>
  406e2a:	2800      	cmp	r0, #0
  406e2c:	d0f3      	beq.n	406e16 <_Balloc+0x2e>
  406e2e:	6044      	str	r4, [r0, #4]
  406e30:	6086      	str	r6, [r0, #8]
  406e32:	e7e4      	b.n	406dfe <_Balloc+0x16>

00406e34 <_Bfree>:
  406e34:	b131      	cbz	r1, 406e44 <_Bfree+0x10>
  406e36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406e38:	684a      	ldr	r2, [r1, #4]
  406e3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406e3e:	6008      	str	r0, [r1, #0]
  406e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406e44:	4770      	bx	lr
  406e46:	bf00      	nop

00406e48 <__multadd>:
  406e48:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e4a:	690c      	ldr	r4, [r1, #16]
  406e4c:	b083      	sub	sp, #12
  406e4e:	460d      	mov	r5, r1
  406e50:	4606      	mov	r6, r0
  406e52:	f101 0e14 	add.w	lr, r1, #20
  406e56:	2700      	movs	r7, #0
  406e58:	f8de 0000 	ldr.w	r0, [lr]
  406e5c:	b281      	uxth	r1, r0
  406e5e:	fb02 3301 	mla	r3, r2, r1, r3
  406e62:	0c01      	lsrs	r1, r0, #16
  406e64:	0c18      	lsrs	r0, r3, #16
  406e66:	fb02 0101 	mla	r1, r2, r1, r0
  406e6a:	b29b      	uxth	r3, r3
  406e6c:	3701      	adds	r7, #1
  406e6e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406e72:	42bc      	cmp	r4, r7
  406e74:	f84e 3b04 	str.w	r3, [lr], #4
  406e78:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406e7c:	dcec      	bgt.n	406e58 <__multadd+0x10>
  406e7e:	b13b      	cbz	r3, 406e90 <__multadd+0x48>
  406e80:	68aa      	ldr	r2, [r5, #8]
  406e82:	4294      	cmp	r4, r2
  406e84:	da07      	bge.n	406e96 <__multadd+0x4e>
  406e86:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406e8a:	3401      	adds	r4, #1
  406e8c:	6153      	str	r3, [r2, #20]
  406e8e:	612c      	str	r4, [r5, #16]
  406e90:	4628      	mov	r0, r5
  406e92:	b003      	add	sp, #12
  406e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e96:	6869      	ldr	r1, [r5, #4]
  406e98:	9301      	str	r3, [sp, #4]
  406e9a:	3101      	adds	r1, #1
  406e9c:	4630      	mov	r0, r6
  406e9e:	f7ff ffa3 	bl	406de8 <_Balloc>
  406ea2:	692a      	ldr	r2, [r5, #16]
  406ea4:	3202      	adds	r2, #2
  406ea6:	f105 010c 	add.w	r1, r5, #12
  406eaa:	4607      	mov	r7, r0
  406eac:	0092      	lsls	r2, r2, #2
  406eae:	300c      	adds	r0, #12
  406eb0:	f7fc fc58 	bl	403764 <memcpy>
  406eb4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406eb6:	6869      	ldr	r1, [r5, #4]
  406eb8:	9b01      	ldr	r3, [sp, #4]
  406eba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406ebe:	6028      	str	r0, [r5, #0]
  406ec0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406ec4:	463d      	mov	r5, r7
  406ec6:	e7de      	b.n	406e86 <__multadd+0x3e>

00406ec8 <__hi0bits>:
  406ec8:	0c02      	lsrs	r2, r0, #16
  406eca:	0412      	lsls	r2, r2, #16
  406ecc:	4603      	mov	r3, r0
  406ece:	b9b2      	cbnz	r2, 406efe <__hi0bits+0x36>
  406ed0:	0403      	lsls	r3, r0, #16
  406ed2:	2010      	movs	r0, #16
  406ed4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406ed8:	bf04      	itt	eq
  406eda:	021b      	lsleq	r3, r3, #8
  406edc:	3008      	addeq	r0, #8
  406ede:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406ee2:	bf04      	itt	eq
  406ee4:	011b      	lsleq	r3, r3, #4
  406ee6:	3004      	addeq	r0, #4
  406ee8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406eec:	bf04      	itt	eq
  406eee:	009b      	lsleq	r3, r3, #2
  406ef0:	3002      	addeq	r0, #2
  406ef2:	2b00      	cmp	r3, #0
  406ef4:	db02      	blt.n	406efc <__hi0bits+0x34>
  406ef6:	005b      	lsls	r3, r3, #1
  406ef8:	d403      	bmi.n	406f02 <__hi0bits+0x3a>
  406efa:	2020      	movs	r0, #32
  406efc:	4770      	bx	lr
  406efe:	2000      	movs	r0, #0
  406f00:	e7e8      	b.n	406ed4 <__hi0bits+0xc>
  406f02:	3001      	adds	r0, #1
  406f04:	4770      	bx	lr
  406f06:	bf00      	nop

00406f08 <__lo0bits>:
  406f08:	6803      	ldr	r3, [r0, #0]
  406f0a:	f013 0207 	ands.w	r2, r3, #7
  406f0e:	4601      	mov	r1, r0
  406f10:	d007      	beq.n	406f22 <__lo0bits+0x1a>
  406f12:	07da      	lsls	r2, r3, #31
  406f14:	d421      	bmi.n	406f5a <__lo0bits+0x52>
  406f16:	0798      	lsls	r0, r3, #30
  406f18:	d421      	bmi.n	406f5e <__lo0bits+0x56>
  406f1a:	089b      	lsrs	r3, r3, #2
  406f1c:	600b      	str	r3, [r1, #0]
  406f1e:	2002      	movs	r0, #2
  406f20:	4770      	bx	lr
  406f22:	b298      	uxth	r0, r3
  406f24:	b198      	cbz	r0, 406f4e <__lo0bits+0x46>
  406f26:	4610      	mov	r0, r2
  406f28:	f013 0fff 	tst.w	r3, #255	; 0xff
  406f2c:	bf04      	itt	eq
  406f2e:	0a1b      	lsreq	r3, r3, #8
  406f30:	3008      	addeq	r0, #8
  406f32:	071a      	lsls	r2, r3, #28
  406f34:	bf04      	itt	eq
  406f36:	091b      	lsreq	r3, r3, #4
  406f38:	3004      	addeq	r0, #4
  406f3a:	079a      	lsls	r2, r3, #30
  406f3c:	bf04      	itt	eq
  406f3e:	089b      	lsreq	r3, r3, #2
  406f40:	3002      	addeq	r0, #2
  406f42:	07da      	lsls	r2, r3, #31
  406f44:	d407      	bmi.n	406f56 <__lo0bits+0x4e>
  406f46:	085b      	lsrs	r3, r3, #1
  406f48:	d104      	bne.n	406f54 <__lo0bits+0x4c>
  406f4a:	2020      	movs	r0, #32
  406f4c:	4770      	bx	lr
  406f4e:	0c1b      	lsrs	r3, r3, #16
  406f50:	2010      	movs	r0, #16
  406f52:	e7e9      	b.n	406f28 <__lo0bits+0x20>
  406f54:	3001      	adds	r0, #1
  406f56:	600b      	str	r3, [r1, #0]
  406f58:	4770      	bx	lr
  406f5a:	2000      	movs	r0, #0
  406f5c:	4770      	bx	lr
  406f5e:	085b      	lsrs	r3, r3, #1
  406f60:	600b      	str	r3, [r1, #0]
  406f62:	2001      	movs	r0, #1
  406f64:	4770      	bx	lr
  406f66:	bf00      	nop

00406f68 <__i2b>:
  406f68:	b510      	push	{r4, lr}
  406f6a:	460c      	mov	r4, r1
  406f6c:	2101      	movs	r1, #1
  406f6e:	f7ff ff3b 	bl	406de8 <_Balloc>
  406f72:	2201      	movs	r2, #1
  406f74:	6144      	str	r4, [r0, #20]
  406f76:	6102      	str	r2, [r0, #16]
  406f78:	bd10      	pop	{r4, pc}
  406f7a:	bf00      	nop

00406f7c <__multiply>:
  406f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f80:	690c      	ldr	r4, [r1, #16]
  406f82:	6915      	ldr	r5, [r2, #16]
  406f84:	42ac      	cmp	r4, r5
  406f86:	b083      	sub	sp, #12
  406f88:	468b      	mov	fp, r1
  406f8a:	4616      	mov	r6, r2
  406f8c:	da04      	bge.n	406f98 <__multiply+0x1c>
  406f8e:	4622      	mov	r2, r4
  406f90:	46b3      	mov	fp, r6
  406f92:	462c      	mov	r4, r5
  406f94:	460e      	mov	r6, r1
  406f96:	4615      	mov	r5, r2
  406f98:	f8db 3008 	ldr.w	r3, [fp, #8]
  406f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
  406fa0:	eb04 0805 	add.w	r8, r4, r5
  406fa4:	4598      	cmp	r8, r3
  406fa6:	bfc8      	it	gt
  406fa8:	3101      	addgt	r1, #1
  406faa:	f7ff ff1d 	bl	406de8 <_Balloc>
  406fae:	f100 0914 	add.w	r9, r0, #20
  406fb2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406fb6:	45d1      	cmp	r9, sl
  406fb8:	9000      	str	r0, [sp, #0]
  406fba:	d205      	bcs.n	406fc8 <__multiply+0x4c>
  406fbc:	464b      	mov	r3, r9
  406fbe:	2100      	movs	r1, #0
  406fc0:	f843 1b04 	str.w	r1, [r3], #4
  406fc4:	459a      	cmp	sl, r3
  406fc6:	d8fb      	bhi.n	406fc0 <__multiply+0x44>
  406fc8:	f106 0c14 	add.w	ip, r6, #20
  406fcc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406fd0:	f10b 0b14 	add.w	fp, fp, #20
  406fd4:	459c      	cmp	ip, r3
  406fd6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406fda:	d24c      	bcs.n	407076 <__multiply+0xfa>
  406fdc:	f8cd a004 	str.w	sl, [sp, #4]
  406fe0:	469a      	mov	sl, r3
  406fe2:	f8dc 5000 	ldr.w	r5, [ip]
  406fe6:	b2af      	uxth	r7, r5
  406fe8:	b1ef      	cbz	r7, 407026 <__multiply+0xaa>
  406fea:	2100      	movs	r1, #0
  406fec:	464d      	mov	r5, r9
  406fee:	465e      	mov	r6, fp
  406ff0:	460c      	mov	r4, r1
  406ff2:	f856 2b04 	ldr.w	r2, [r6], #4
  406ff6:	6828      	ldr	r0, [r5, #0]
  406ff8:	b293      	uxth	r3, r2
  406ffa:	b281      	uxth	r1, r0
  406ffc:	fb07 1303 	mla	r3, r7, r3, r1
  407000:	0c12      	lsrs	r2, r2, #16
  407002:	0c01      	lsrs	r1, r0, #16
  407004:	4423      	add	r3, r4
  407006:	fb07 1102 	mla	r1, r7, r2, r1
  40700a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40700e:	b29b      	uxth	r3, r3
  407010:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407014:	45b6      	cmp	lr, r6
  407016:	f845 3b04 	str.w	r3, [r5], #4
  40701a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40701e:	d8e8      	bhi.n	406ff2 <__multiply+0x76>
  407020:	602c      	str	r4, [r5, #0]
  407022:	f8dc 5000 	ldr.w	r5, [ip]
  407026:	0c2d      	lsrs	r5, r5, #16
  407028:	d01d      	beq.n	407066 <__multiply+0xea>
  40702a:	f8d9 3000 	ldr.w	r3, [r9]
  40702e:	4648      	mov	r0, r9
  407030:	461c      	mov	r4, r3
  407032:	4659      	mov	r1, fp
  407034:	2200      	movs	r2, #0
  407036:	880e      	ldrh	r6, [r1, #0]
  407038:	0c24      	lsrs	r4, r4, #16
  40703a:	fb05 4406 	mla	r4, r5, r6, r4
  40703e:	4422      	add	r2, r4
  407040:	b29b      	uxth	r3, r3
  407042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407046:	f840 3b04 	str.w	r3, [r0], #4
  40704a:	f851 3b04 	ldr.w	r3, [r1], #4
  40704e:	6804      	ldr	r4, [r0, #0]
  407050:	0c1b      	lsrs	r3, r3, #16
  407052:	b2a6      	uxth	r6, r4
  407054:	fb05 6303 	mla	r3, r5, r3, r6
  407058:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40705c:	458e      	cmp	lr, r1
  40705e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407062:	d8e8      	bhi.n	407036 <__multiply+0xba>
  407064:	6003      	str	r3, [r0, #0]
  407066:	f10c 0c04 	add.w	ip, ip, #4
  40706a:	45e2      	cmp	sl, ip
  40706c:	f109 0904 	add.w	r9, r9, #4
  407070:	d8b7      	bhi.n	406fe2 <__multiply+0x66>
  407072:	f8dd a004 	ldr.w	sl, [sp, #4]
  407076:	f1b8 0f00 	cmp.w	r8, #0
  40707a:	dd0b      	ble.n	407094 <__multiply+0x118>
  40707c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407080:	f1aa 0a04 	sub.w	sl, sl, #4
  407084:	b11b      	cbz	r3, 40708e <__multiply+0x112>
  407086:	e005      	b.n	407094 <__multiply+0x118>
  407088:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40708c:	b913      	cbnz	r3, 407094 <__multiply+0x118>
  40708e:	f1b8 0801 	subs.w	r8, r8, #1
  407092:	d1f9      	bne.n	407088 <__multiply+0x10c>
  407094:	9800      	ldr	r0, [sp, #0]
  407096:	f8c0 8010 	str.w	r8, [r0, #16]
  40709a:	b003      	add	sp, #12
  40709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004070a0 <__pow5mult>:
  4070a0:	f012 0303 	ands.w	r3, r2, #3
  4070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4070a8:	4614      	mov	r4, r2
  4070aa:	4607      	mov	r7, r0
  4070ac:	d12e      	bne.n	40710c <__pow5mult+0x6c>
  4070ae:	460d      	mov	r5, r1
  4070b0:	10a4      	asrs	r4, r4, #2
  4070b2:	d01c      	beq.n	4070ee <__pow5mult+0x4e>
  4070b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4070b6:	b396      	cbz	r6, 40711e <__pow5mult+0x7e>
  4070b8:	07e3      	lsls	r3, r4, #31
  4070ba:	f04f 0800 	mov.w	r8, #0
  4070be:	d406      	bmi.n	4070ce <__pow5mult+0x2e>
  4070c0:	1064      	asrs	r4, r4, #1
  4070c2:	d014      	beq.n	4070ee <__pow5mult+0x4e>
  4070c4:	6830      	ldr	r0, [r6, #0]
  4070c6:	b1a8      	cbz	r0, 4070f4 <__pow5mult+0x54>
  4070c8:	4606      	mov	r6, r0
  4070ca:	07e3      	lsls	r3, r4, #31
  4070cc:	d5f8      	bpl.n	4070c0 <__pow5mult+0x20>
  4070ce:	4632      	mov	r2, r6
  4070d0:	4629      	mov	r1, r5
  4070d2:	4638      	mov	r0, r7
  4070d4:	f7ff ff52 	bl	406f7c <__multiply>
  4070d8:	b1b5      	cbz	r5, 407108 <__pow5mult+0x68>
  4070da:	686a      	ldr	r2, [r5, #4]
  4070dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4070de:	1064      	asrs	r4, r4, #1
  4070e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4070e4:	6029      	str	r1, [r5, #0]
  4070e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4070ea:	4605      	mov	r5, r0
  4070ec:	d1ea      	bne.n	4070c4 <__pow5mult+0x24>
  4070ee:	4628      	mov	r0, r5
  4070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070f4:	4632      	mov	r2, r6
  4070f6:	4631      	mov	r1, r6
  4070f8:	4638      	mov	r0, r7
  4070fa:	f7ff ff3f 	bl	406f7c <__multiply>
  4070fe:	6030      	str	r0, [r6, #0]
  407100:	f8c0 8000 	str.w	r8, [r0]
  407104:	4606      	mov	r6, r0
  407106:	e7e0      	b.n	4070ca <__pow5mult+0x2a>
  407108:	4605      	mov	r5, r0
  40710a:	e7d9      	b.n	4070c0 <__pow5mult+0x20>
  40710c:	1e5a      	subs	r2, r3, #1
  40710e:	4d0b      	ldr	r5, [pc, #44]	; (40713c <__pow5mult+0x9c>)
  407110:	2300      	movs	r3, #0
  407112:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407116:	f7ff fe97 	bl	406e48 <__multadd>
  40711a:	4605      	mov	r5, r0
  40711c:	e7c8      	b.n	4070b0 <__pow5mult+0x10>
  40711e:	2101      	movs	r1, #1
  407120:	4638      	mov	r0, r7
  407122:	f7ff fe61 	bl	406de8 <_Balloc>
  407126:	f240 2171 	movw	r1, #625	; 0x271
  40712a:	2201      	movs	r2, #1
  40712c:	2300      	movs	r3, #0
  40712e:	6141      	str	r1, [r0, #20]
  407130:	6102      	str	r2, [r0, #16]
  407132:	4606      	mov	r6, r0
  407134:	64b8      	str	r0, [r7, #72]	; 0x48
  407136:	6003      	str	r3, [r0, #0]
  407138:	e7be      	b.n	4070b8 <__pow5mult+0x18>
  40713a:	bf00      	nop
  40713c:	004088c8 	.word	0x004088c8

00407140 <__lshift>:
  407140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407144:	4691      	mov	r9, r2
  407146:	690a      	ldr	r2, [r1, #16]
  407148:	688b      	ldr	r3, [r1, #8]
  40714a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40714e:	eb04 0802 	add.w	r8, r4, r2
  407152:	f108 0501 	add.w	r5, r8, #1
  407156:	429d      	cmp	r5, r3
  407158:	460e      	mov	r6, r1
  40715a:	4607      	mov	r7, r0
  40715c:	6849      	ldr	r1, [r1, #4]
  40715e:	dd04      	ble.n	40716a <__lshift+0x2a>
  407160:	005b      	lsls	r3, r3, #1
  407162:	429d      	cmp	r5, r3
  407164:	f101 0101 	add.w	r1, r1, #1
  407168:	dcfa      	bgt.n	407160 <__lshift+0x20>
  40716a:	4638      	mov	r0, r7
  40716c:	f7ff fe3c 	bl	406de8 <_Balloc>
  407170:	2c00      	cmp	r4, #0
  407172:	f100 0314 	add.w	r3, r0, #20
  407176:	dd06      	ble.n	407186 <__lshift+0x46>
  407178:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40717c:	2100      	movs	r1, #0
  40717e:	f843 1b04 	str.w	r1, [r3], #4
  407182:	429a      	cmp	r2, r3
  407184:	d1fb      	bne.n	40717e <__lshift+0x3e>
  407186:	6934      	ldr	r4, [r6, #16]
  407188:	f106 0114 	add.w	r1, r6, #20
  40718c:	f019 091f 	ands.w	r9, r9, #31
  407190:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407194:	d01d      	beq.n	4071d2 <__lshift+0x92>
  407196:	f1c9 0c20 	rsb	ip, r9, #32
  40719a:	2200      	movs	r2, #0
  40719c:	680c      	ldr	r4, [r1, #0]
  40719e:	fa04 f409 	lsl.w	r4, r4, r9
  4071a2:	4314      	orrs	r4, r2
  4071a4:	f843 4b04 	str.w	r4, [r3], #4
  4071a8:	f851 2b04 	ldr.w	r2, [r1], #4
  4071ac:	458e      	cmp	lr, r1
  4071ae:	fa22 f20c 	lsr.w	r2, r2, ip
  4071b2:	d8f3      	bhi.n	40719c <__lshift+0x5c>
  4071b4:	601a      	str	r2, [r3, #0]
  4071b6:	b10a      	cbz	r2, 4071bc <__lshift+0x7c>
  4071b8:	f108 0502 	add.w	r5, r8, #2
  4071bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4071be:	6872      	ldr	r2, [r6, #4]
  4071c0:	3d01      	subs	r5, #1
  4071c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4071c6:	6105      	str	r5, [r0, #16]
  4071c8:	6031      	str	r1, [r6, #0]
  4071ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071d2:	3b04      	subs	r3, #4
  4071d4:	f851 2b04 	ldr.w	r2, [r1], #4
  4071d8:	f843 2f04 	str.w	r2, [r3, #4]!
  4071dc:	458e      	cmp	lr, r1
  4071de:	d8f9      	bhi.n	4071d4 <__lshift+0x94>
  4071e0:	e7ec      	b.n	4071bc <__lshift+0x7c>
  4071e2:	bf00      	nop

004071e4 <__mcmp>:
  4071e4:	b430      	push	{r4, r5}
  4071e6:	690b      	ldr	r3, [r1, #16]
  4071e8:	4605      	mov	r5, r0
  4071ea:	6900      	ldr	r0, [r0, #16]
  4071ec:	1ac0      	subs	r0, r0, r3
  4071ee:	d10f      	bne.n	407210 <__mcmp+0x2c>
  4071f0:	009b      	lsls	r3, r3, #2
  4071f2:	3514      	adds	r5, #20
  4071f4:	3114      	adds	r1, #20
  4071f6:	4419      	add	r1, r3
  4071f8:	442b      	add	r3, r5
  4071fa:	e001      	b.n	407200 <__mcmp+0x1c>
  4071fc:	429d      	cmp	r5, r3
  4071fe:	d207      	bcs.n	407210 <__mcmp+0x2c>
  407200:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407208:	4294      	cmp	r4, r2
  40720a:	d0f7      	beq.n	4071fc <__mcmp+0x18>
  40720c:	d302      	bcc.n	407214 <__mcmp+0x30>
  40720e:	2001      	movs	r0, #1
  407210:	bc30      	pop	{r4, r5}
  407212:	4770      	bx	lr
  407214:	f04f 30ff 	mov.w	r0, #4294967295
  407218:	e7fa      	b.n	407210 <__mcmp+0x2c>
  40721a:	bf00      	nop

0040721c <__mdiff>:
  40721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407220:	690f      	ldr	r7, [r1, #16]
  407222:	460e      	mov	r6, r1
  407224:	6911      	ldr	r1, [r2, #16]
  407226:	1a7f      	subs	r7, r7, r1
  407228:	2f00      	cmp	r7, #0
  40722a:	4690      	mov	r8, r2
  40722c:	d117      	bne.n	40725e <__mdiff+0x42>
  40722e:	0089      	lsls	r1, r1, #2
  407230:	f106 0514 	add.w	r5, r6, #20
  407234:	f102 0e14 	add.w	lr, r2, #20
  407238:	186b      	adds	r3, r5, r1
  40723a:	4471      	add	r1, lr
  40723c:	e001      	b.n	407242 <__mdiff+0x26>
  40723e:	429d      	cmp	r5, r3
  407240:	d25c      	bcs.n	4072fc <__mdiff+0xe0>
  407242:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407246:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40724a:	42a2      	cmp	r2, r4
  40724c:	d0f7      	beq.n	40723e <__mdiff+0x22>
  40724e:	d25e      	bcs.n	40730e <__mdiff+0xf2>
  407250:	4633      	mov	r3, r6
  407252:	462c      	mov	r4, r5
  407254:	4646      	mov	r6, r8
  407256:	4675      	mov	r5, lr
  407258:	4698      	mov	r8, r3
  40725a:	2701      	movs	r7, #1
  40725c:	e005      	b.n	40726a <__mdiff+0x4e>
  40725e:	db58      	blt.n	407312 <__mdiff+0xf6>
  407260:	f106 0514 	add.w	r5, r6, #20
  407264:	f108 0414 	add.w	r4, r8, #20
  407268:	2700      	movs	r7, #0
  40726a:	6871      	ldr	r1, [r6, #4]
  40726c:	f7ff fdbc 	bl	406de8 <_Balloc>
  407270:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407274:	6936      	ldr	r6, [r6, #16]
  407276:	60c7      	str	r7, [r0, #12]
  407278:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40727c:	46a6      	mov	lr, r4
  40727e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407282:	f100 0414 	add.w	r4, r0, #20
  407286:	2300      	movs	r3, #0
  407288:	f85e 1b04 	ldr.w	r1, [lr], #4
  40728c:	f855 8b04 	ldr.w	r8, [r5], #4
  407290:	b28a      	uxth	r2, r1
  407292:	fa13 f388 	uxtah	r3, r3, r8
  407296:	0c09      	lsrs	r1, r1, #16
  407298:	1a9a      	subs	r2, r3, r2
  40729a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40729e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4072a2:	b292      	uxth	r2, r2
  4072a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4072a8:	45f4      	cmp	ip, lr
  4072aa:	f844 2b04 	str.w	r2, [r4], #4
  4072ae:	ea4f 4323 	mov.w	r3, r3, asr #16
  4072b2:	d8e9      	bhi.n	407288 <__mdiff+0x6c>
  4072b4:	42af      	cmp	r7, r5
  4072b6:	d917      	bls.n	4072e8 <__mdiff+0xcc>
  4072b8:	46a4      	mov	ip, r4
  4072ba:	46ae      	mov	lr, r5
  4072bc:	f85e 2b04 	ldr.w	r2, [lr], #4
  4072c0:	fa13 f382 	uxtah	r3, r3, r2
  4072c4:	1419      	asrs	r1, r3, #16
  4072c6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4072ca:	b29b      	uxth	r3, r3
  4072cc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4072d0:	4577      	cmp	r7, lr
  4072d2:	f84c 2b04 	str.w	r2, [ip], #4
  4072d6:	ea4f 4321 	mov.w	r3, r1, asr #16
  4072da:	d8ef      	bhi.n	4072bc <__mdiff+0xa0>
  4072dc:	43ed      	mvns	r5, r5
  4072de:	442f      	add	r7, r5
  4072e0:	f027 0703 	bic.w	r7, r7, #3
  4072e4:	3704      	adds	r7, #4
  4072e6:	443c      	add	r4, r7
  4072e8:	3c04      	subs	r4, #4
  4072ea:	b922      	cbnz	r2, 4072f6 <__mdiff+0xda>
  4072ec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4072f0:	3e01      	subs	r6, #1
  4072f2:	2b00      	cmp	r3, #0
  4072f4:	d0fa      	beq.n	4072ec <__mdiff+0xd0>
  4072f6:	6106      	str	r6, [r0, #16]
  4072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4072fc:	2100      	movs	r1, #0
  4072fe:	f7ff fd73 	bl	406de8 <_Balloc>
  407302:	2201      	movs	r2, #1
  407304:	2300      	movs	r3, #0
  407306:	6102      	str	r2, [r0, #16]
  407308:	6143      	str	r3, [r0, #20]
  40730a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40730e:	4674      	mov	r4, lr
  407310:	e7ab      	b.n	40726a <__mdiff+0x4e>
  407312:	4633      	mov	r3, r6
  407314:	f106 0414 	add.w	r4, r6, #20
  407318:	f102 0514 	add.w	r5, r2, #20
  40731c:	4616      	mov	r6, r2
  40731e:	2701      	movs	r7, #1
  407320:	4698      	mov	r8, r3
  407322:	e7a2      	b.n	40726a <__mdiff+0x4e>

00407324 <__d2b>:
  407324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407328:	b082      	sub	sp, #8
  40732a:	2101      	movs	r1, #1
  40732c:	461c      	mov	r4, r3
  40732e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407332:	4615      	mov	r5, r2
  407334:	9e08      	ldr	r6, [sp, #32]
  407336:	f7ff fd57 	bl	406de8 <_Balloc>
  40733a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40733e:	4680      	mov	r8, r0
  407340:	b10f      	cbz	r7, 407346 <__d2b+0x22>
  407342:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407346:	9401      	str	r4, [sp, #4]
  407348:	b31d      	cbz	r5, 407392 <__d2b+0x6e>
  40734a:	a802      	add	r0, sp, #8
  40734c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407350:	f7ff fdda 	bl	406f08 <__lo0bits>
  407354:	2800      	cmp	r0, #0
  407356:	d134      	bne.n	4073c2 <__d2b+0x9e>
  407358:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40735c:	f8c8 2014 	str.w	r2, [r8, #20]
  407360:	2b00      	cmp	r3, #0
  407362:	bf0c      	ite	eq
  407364:	2101      	moveq	r1, #1
  407366:	2102      	movne	r1, #2
  407368:	f8c8 3018 	str.w	r3, [r8, #24]
  40736c:	f8c8 1010 	str.w	r1, [r8, #16]
  407370:	b9df      	cbnz	r7, 4073aa <__d2b+0x86>
  407372:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407376:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40737a:	6030      	str	r0, [r6, #0]
  40737c:	6918      	ldr	r0, [r3, #16]
  40737e:	f7ff fda3 	bl	406ec8 <__hi0bits>
  407382:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407388:	6018      	str	r0, [r3, #0]
  40738a:	4640      	mov	r0, r8
  40738c:	b002      	add	sp, #8
  40738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407392:	a801      	add	r0, sp, #4
  407394:	f7ff fdb8 	bl	406f08 <__lo0bits>
  407398:	9b01      	ldr	r3, [sp, #4]
  40739a:	f8c8 3014 	str.w	r3, [r8, #20]
  40739e:	2101      	movs	r1, #1
  4073a0:	3020      	adds	r0, #32
  4073a2:	f8c8 1010 	str.w	r1, [r8, #16]
  4073a6:	2f00      	cmp	r7, #0
  4073a8:	d0e3      	beq.n	407372 <__d2b+0x4e>
  4073aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073ac:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4073b0:	4407      	add	r7, r0
  4073b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4073b6:	6037      	str	r7, [r6, #0]
  4073b8:	6018      	str	r0, [r3, #0]
  4073ba:	4640      	mov	r0, r8
  4073bc:	b002      	add	sp, #8
  4073be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4073c6:	f1c0 0220 	rsb	r2, r0, #32
  4073ca:	fa03 f202 	lsl.w	r2, r3, r2
  4073ce:	430a      	orrs	r2, r1
  4073d0:	40c3      	lsrs	r3, r0
  4073d2:	9301      	str	r3, [sp, #4]
  4073d4:	f8c8 2014 	str.w	r2, [r8, #20]
  4073d8:	e7c2      	b.n	407360 <__d2b+0x3c>
  4073da:	bf00      	nop

004073dc <_realloc_r>:
  4073dc:	2900      	cmp	r1, #0
  4073de:	f000 8095 	beq.w	40750c <_realloc_r+0x130>
  4073e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073e6:	460d      	mov	r5, r1
  4073e8:	4616      	mov	r6, r2
  4073ea:	b083      	sub	sp, #12
  4073ec:	4680      	mov	r8, r0
  4073ee:	f106 070b 	add.w	r7, r6, #11
  4073f2:	f7fc fa9f 	bl	403934 <__malloc_lock>
  4073f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4073fa:	2f16      	cmp	r7, #22
  4073fc:	f02e 0403 	bic.w	r4, lr, #3
  407400:	f1a5 0908 	sub.w	r9, r5, #8
  407404:	d83c      	bhi.n	407480 <_realloc_r+0xa4>
  407406:	2210      	movs	r2, #16
  407408:	4617      	mov	r7, r2
  40740a:	42be      	cmp	r6, r7
  40740c:	d83d      	bhi.n	40748a <_realloc_r+0xae>
  40740e:	4294      	cmp	r4, r2
  407410:	da43      	bge.n	40749a <_realloc_r+0xbe>
  407412:	4bc4      	ldr	r3, [pc, #784]	; (407724 <_realloc_r+0x348>)
  407414:	6899      	ldr	r1, [r3, #8]
  407416:	eb09 0004 	add.w	r0, r9, r4
  40741a:	4288      	cmp	r0, r1
  40741c:	f000 80b4 	beq.w	407588 <_realloc_r+0x1ac>
  407420:	6843      	ldr	r3, [r0, #4]
  407422:	f023 0101 	bic.w	r1, r3, #1
  407426:	4401      	add	r1, r0
  407428:	6849      	ldr	r1, [r1, #4]
  40742a:	07c9      	lsls	r1, r1, #31
  40742c:	d54c      	bpl.n	4074c8 <_realloc_r+0xec>
  40742e:	f01e 0f01 	tst.w	lr, #1
  407432:	f000 809b 	beq.w	40756c <_realloc_r+0x190>
  407436:	4631      	mov	r1, r6
  407438:	4640      	mov	r0, r8
  40743a:	f7fb fee3 	bl	403204 <_malloc_r>
  40743e:	4606      	mov	r6, r0
  407440:	2800      	cmp	r0, #0
  407442:	d03a      	beq.n	4074ba <_realloc_r+0xde>
  407444:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407448:	f023 0301 	bic.w	r3, r3, #1
  40744c:	444b      	add	r3, r9
  40744e:	f1a0 0208 	sub.w	r2, r0, #8
  407452:	429a      	cmp	r2, r3
  407454:	f000 8121 	beq.w	40769a <_realloc_r+0x2be>
  407458:	1f22      	subs	r2, r4, #4
  40745a:	2a24      	cmp	r2, #36	; 0x24
  40745c:	f200 8107 	bhi.w	40766e <_realloc_r+0x292>
  407460:	2a13      	cmp	r2, #19
  407462:	f200 80db 	bhi.w	40761c <_realloc_r+0x240>
  407466:	4603      	mov	r3, r0
  407468:	462a      	mov	r2, r5
  40746a:	6811      	ldr	r1, [r2, #0]
  40746c:	6019      	str	r1, [r3, #0]
  40746e:	6851      	ldr	r1, [r2, #4]
  407470:	6059      	str	r1, [r3, #4]
  407472:	6892      	ldr	r2, [r2, #8]
  407474:	609a      	str	r2, [r3, #8]
  407476:	4629      	mov	r1, r5
  407478:	4640      	mov	r0, r8
  40747a:	f7ff f8e9 	bl	406650 <_free_r>
  40747e:	e01c      	b.n	4074ba <_realloc_r+0xde>
  407480:	f027 0707 	bic.w	r7, r7, #7
  407484:	2f00      	cmp	r7, #0
  407486:	463a      	mov	r2, r7
  407488:	dabf      	bge.n	40740a <_realloc_r+0x2e>
  40748a:	2600      	movs	r6, #0
  40748c:	230c      	movs	r3, #12
  40748e:	4630      	mov	r0, r6
  407490:	f8c8 3000 	str.w	r3, [r8]
  407494:	b003      	add	sp, #12
  407496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40749a:	462e      	mov	r6, r5
  40749c:	1be3      	subs	r3, r4, r7
  40749e:	2b0f      	cmp	r3, #15
  4074a0:	d81e      	bhi.n	4074e0 <_realloc_r+0x104>
  4074a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4074a6:	f003 0301 	and.w	r3, r3, #1
  4074aa:	4323      	orrs	r3, r4
  4074ac:	444c      	add	r4, r9
  4074ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4074b2:	6863      	ldr	r3, [r4, #4]
  4074b4:	f043 0301 	orr.w	r3, r3, #1
  4074b8:	6063      	str	r3, [r4, #4]
  4074ba:	4640      	mov	r0, r8
  4074bc:	f7fc fa40 	bl	403940 <__malloc_unlock>
  4074c0:	4630      	mov	r0, r6
  4074c2:	b003      	add	sp, #12
  4074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074c8:	f023 0303 	bic.w	r3, r3, #3
  4074cc:	18e1      	adds	r1, r4, r3
  4074ce:	4291      	cmp	r1, r2
  4074d0:	db1f      	blt.n	407512 <_realloc_r+0x136>
  4074d2:	68c3      	ldr	r3, [r0, #12]
  4074d4:	6882      	ldr	r2, [r0, #8]
  4074d6:	462e      	mov	r6, r5
  4074d8:	60d3      	str	r3, [r2, #12]
  4074da:	460c      	mov	r4, r1
  4074dc:	609a      	str	r2, [r3, #8]
  4074de:	e7dd      	b.n	40749c <_realloc_r+0xc0>
  4074e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4074e4:	eb09 0107 	add.w	r1, r9, r7
  4074e8:	f002 0201 	and.w	r2, r2, #1
  4074ec:	444c      	add	r4, r9
  4074ee:	f043 0301 	orr.w	r3, r3, #1
  4074f2:	4317      	orrs	r7, r2
  4074f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4074f8:	604b      	str	r3, [r1, #4]
  4074fa:	6863      	ldr	r3, [r4, #4]
  4074fc:	f043 0301 	orr.w	r3, r3, #1
  407500:	3108      	adds	r1, #8
  407502:	6063      	str	r3, [r4, #4]
  407504:	4640      	mov	r0, r8
  407506:	f7ff f8a3 	bl	406650 <_free_r>
  40750a:	e7d6      	b.n	4074ba <_realloc_r+0xde>
  40750c:	4611      	mov	r1, r2
  40750e:	f7fb be79 	b.w	403204 <_malloc_r>
  407512:	f01e 0f01 	tst.w	lr, #1
  407516:	d18e      	bne.n	407436 <_realloc_r+0x5a>
  407518:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40751c:	eba9 0a01 	sub.w	sl, r9, r1
  407520:	f8da 1004 	ldr.w	r1, [sl, #4]
  407524:	f021 0103 	bic.w	r1, r1, #3
  407528:	440b      	add	r3, r1
  40752a:	4423      	add	r3, r4
  40752c:	4293      	cmp	r3, r2
  40752e:	db25      	blt.n	40757c <_realloc_r+0x1a0>
  407530:	68c2      	ldr	r2, [r0, #12]
  407532:	6881      	ldr	r1, [r0, #8]
  407534:	4656      	mov	r6, sl
  407536:	60ca      	str	r2, [r1, #12]
  407538:	6091      	str	r1, [r2, #8]
  40753a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40753e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407542:	1f22      	subs	r2, r4, #4
  407544:	2a24      	cmp	r2, #36	; 0x24
  407546:	60c1      	str	r1, [r0, #12]
  407548:	6088      	str	r0, [r1, #8]
  40754a:	f200 8094 	bhi.w	407676 <_realloc_r+0x29a>
  40754e:	2a13      	cmp	r2, #19
  407550:	d96f      	bls.n	407632 <_realloc_r+0x256>
  407552:	6829      	ldr	r1, [r5, #0]
  407554:	f8ca 1008 	str.w	r1, [sl, #8]
  407558:	6869      	ldr	r1, [r5, #4]
  40755a:	f8ca 100c 	str.w	r1, [sl, #12]
  40755e:	2a1b      	cmp	r2, #27
  407560:	f200 80a2 	bhi.w	4076a8 <_realloc_r+0x2cc>
  407564:	3508      	adds	r5, #8
  407566:	f10a 0210 	add.w	r2, sl, #16
  40756a:	e063      	b.n	407634 <_realloc_r+0x258>
  40756c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407570:	eba9 0a03 	sub.w	sl, r9, r3
  407574:	f8da 1004 	ldr.w	r1, [sl, #4]
  407578:	f021 0103 	bic.w	r1, r1, #3
  40757c:	1863      	adds	r3, r4, r1
  40757e:	4293      	cmp	r3, r2
  407580:	f6ff af59 	blt.w	407436 <_realloc_r+0x5a>
  407584:	4656      	mov	r6, sl
  407586:	e7d8      	b.n	40753a <_realloc_r+0x15e>
  407588:	6841      	ldr	r1, [r0, #4]
  40758a:	f021 0b03 	bic.w	fp, r1, #3
  40758e:	44a3      	add	fp, r4
  407590:	f107 0010 	add.w	r0, r7, #16
  407594:	4583      	cmp	fp, r0
  407596:	da56      	bge.n	407646 <_realloc_r+0x26a>
  407598:	f01e 0f01 	tst.w	lr, #1
  40759c:	f47f af4b 	bne.w	407436 <_realloc_r+0x5a>
  4075a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4075a4:	eba9 0a01 	sub.w	sl, r9, r1
  4075a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4075ac:	f021 0103 	bic.w	r1, r1, #3
  4075b0:	448b      	add	fp, r1
  4075b2:	4558      	cmp	r0, fp
  4075b4:	dce2      	bgt.n	40757c <_realloc_r+0x1a0>
  4075b6:	4656      	mov	r6, sl
  4075b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4075bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4075c0:	1f22      	subs	r2, r4, #4
  4075c2:	2a24      	cmp	r2, #36	; 0x24
  4075c4:	60c1      	str	r1, [r0, #12]
  4075c6:	6088      	str	r0, [r1, #8]
  4075c8:	f200 808f 	bhi.w	4076ea <_realloc_r+0x30e>
  4075cc:	2a13      	cmp	r2, #19
  4075ce:	f240 808a 	bls.w	4076e6 <_realloc_r+0x30a>
  4075d2:	6829      	ldr	r1, [r5, #0]
  4075d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4075d8:	6869      	ldr	r1, [r5, #4]
  4075da:	f8ca 100c 	str.w	r1, [sl, #12]
  4075de:	2a1b      	cmp	r2, #27
  4075e0:	f200 808a 	bhi.w	4076f8 <_realloc_r+0x31c>
  4075e4:	3508      	adds	r5, #8
  4075e6:	f10a 0210 	add.w	r2, sl, #16
  4075ea:	6829      	ldr	r1, [r5, #0]
  4075ec:	6011      	str	r1, [r2, #0]
  4075ee:	6869      	ldr	r1, [r5, #4]
  4075f0:	6051      	str	r1, [r2, #4]
  4075f2:	68a9      	ldr	r1, [r5, #8]
  4075f4:	6091      	str	r1, [r2, #8]
  4075f6:	eb0a 0107 	add.w	r1, sl, r7
  4075fa:	ebab 0207 	sub.w	r2, fp, r7
  4075fe:	f042 0201 	orr.w	r2, r2, #1
  407602:	6099      	str	r1, [r3, #8]
  407604:	604a      	str	r2, [r1, #4]
  407606:	f8da 3004 	ldr.w	r3, [sl, #4]
  40760a:	f003 0301 	and.w	r3, r3, #1
  40760e:	431f      	orrs	r7, r3
  407610:	4640      	mov	r0, r8
  407612:	f8ca 7004 	str.w	r7, [sl, #4]
  407616:	f7fc f993 	bl	403940 <__malloc_unlock>
  40761a:	e751      	b.n	4074c0 <_realloc_r+0xe4>
  40761c:	682b      	ldr	r3, [r5, #0]
  40761e:	6003      	str	r3, [r0, #0]
  407620:	686b      	ldr	r3, [r5, #4]
  407622:	6043      	str	r3, [r0, #4]
  407624:	2a1b      	cmp	r2, #27
  407626:	d82d      	bhi.n	407684 <_realloc_r+0x2a8>
  407628:	f100 0308 	add.w	r3, r0, #8
  40762c:	f105 0208 	add.w	r2, r5, #8
  407630:	e71b      	b.n	40746a <_realloc_r+0x8e>
  407632:	4632      	mov	r2, r6
  407634:	6829      	ldr	r1, [r5, #0]
  407636:	6011      	str	r1, [r2, #0]
  407638:	6869      	ldr	r1, [r5, #4]
  40763a:	6051      	str	r1, [r2, #4]
  40763c:	68a9      	ldr	r1, [r5, #8]
  40763e:	6091      	str	r1, [r2, #8]
  407640:	461c      	mov	r4, r3
  407642:	46d1      	mov	r9, sl
  407644:	e72a      	b.n	40749c <_realloc_r+0xc0>
  407646:	eb09 0107 	add.w	r1, r9, r7
  40764a:	ebab 0b07 	sub.w	fp, fp, r7
  40764e:	f04b 0201 	orr.w	r2, fp, #1
  407652:	6099      	str	r1, [r3, #8]
  407654:	604a      	str	r2, [r1, #4]
  407656:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40765a:	f003 0301 	and.w	r3, r3, #1
  40765e:	431f      	orrs	r7, r3
  407660:	4640      	mov	r0, r8
  407662:	f845 7c04 	str.w	r7, [r5, #-4]
  407666:	f7fc f96b 	bl	403940 <__malloc_unlock>
  40766a:	462e      	mov	r6, r5
  40766c:	e728      	b.n	4074c0 <_realloc_r+0xe4>
  40766e:	4629      	mov	r1, r5
  407670:	f7ff fb56 	bl	406d20 <memmove>
  407674:	e6ff      	b.n	407476 <_realloc_r+0x9a>
  407676:	4629      	mov	r1, r5
  407678:	4630      	mov	r0, r6
  40767a:	461c      	mov	r4, r3
  40767c:	46d1      	mov	r9, sl
  40767e:	f7ff fb4f 	bl	406d20 <memmove>
  407682:	e70b      	b.n	40749c <_realloc_r+0xc0>
  407684:	68ab      	ldr	r3, [r5, #8]
  407686:	6083      	str	r3, [r0, #8]
  407688:	68eb      	ldr	r3, [r5, #12]
  40768a:	60c3      	str	r3, [r0, #12]
  40768c:	2a24      	cmp	r2, #36	; 0x24
  40768e:	d017      	beq.n	4076c0 <_realloc_r+0x2e4>
  407690:	f100 0310 	add.w	r3, r0, #16
  407694:	f105 0210 	add.w	r2, r5, #16
  407698:	e6e7      	b.n	40746a <_realloc_r+0x8e>
  40769a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40769e:	f023 0303 	bic.w	r3, r3, #3
  4076a2:	441c      	add	r4, r3
  4076a4:	462e      	mov	r6, r5
  4076a6:	e6f9      	b.n	40749c <_realloc_r+0xc0>
  4076a8:	68a9      	ldr	r1, [r5, #8]
  4076aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4076ae:	68e9      	ldr	r1, [r5, #12]
  4076b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4076b4:	2a24      	cmp	r2, #36	; 0x24
  4076b6:	d00c      	beq.n	4076d2 <_realloc_r+0x2f6>
  4076b8:	3510      	adds	r5, #16
  4076ba:	f10a 0218 	add.w	r2, sl, #24
  4076be:	e7b9      	b.n	407634 <_realloc_r+0x258>
  4076c0:	692b      	ldr	r3, [r5, #16]
  4076c2:	6103      	str	r3, [r0, #16]
  4076c4:	696b      	ldr	r3, [r5, #20]
  4076c6:	6143      	str	r3, [r0, #20]
  4076c8:	f105 0218 	add.w	r2, r5, #24
  4076cc:	f100 0318 	add.w	r3, r0, #24
  4076d0:	e6cb      	b.n	40746a <_realloc_r+0x8e>
  4076d2:	692a      	ldr	r2, [r5, #16]
  4076d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4076d8:	696a      	ldr	r2, [r5, #20]
  4076da:	f8ca 201c 	str.w	r2, [sl, #28]
  4076de:	3518      	adds	r5, #24
  4076e0:	f10a 0220 	add.w	r2, sl, #32
  4076e4:	e7a6      	b.n	407634 <_realloc_r+0x258>
  4076e6:	4632      	mov	r2, r6
  4076e8:	e77f      	b.n	4075ea <_realloc_r+0x20e>
  4076ea:	4629      	mov	r1, r5
  4076ec:	4630      	mov	r0, r6
  4076ee:	9301      	str	r3, [sp, #4]
  4076f0:	f7ff fb16 	bl	406d20 <memmove>
  4076f4:	9b01      	ldr	r3, [sp, #4]
  4076f6:	e77e      	b.n	4075f6 <_realloc_r+0x21a>
  4076f8:	68a9      	ldr	r1, [r5, #8]
  4076fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4076fe:	68e9      	ldr	r1, [r5, #12]
  407700:	f8ca 1014 	str.w	r1, [sl, #20]
  407704:	2a24      	cmp	r2, #36	; 0x24
  407706:	d003      	beq.n	407710 <_realloc_r+0x334>
  407708:	3510      	adds	r5, #16
  40770a:	f10a 0218 	add.w	r2, sl, #24
  40770e:	e76c      	b.n	4075ea <_realloc_r+0x20e>
  407710:	692a      	ldr	r2, [r5, #16]
  407712:	f8ca 2018 	str.w	r2, [sl, #24]
  407716:	696a      	ldr	r2, [r5, #20]
  407718:	f8ca 201c 	str.w	r2, [sl, #28]
  40771c:	3518      	adds	r5, #24
  40771e:	f10a 0220 	add.w	r2, sl, #32
  407722:	e762      	b.n	4075ea <_realloc_r+0x20e>
  407724:	20400438 	.word	0x20400438

00407728 <__sread>:
  407728:	b510      	push	{r4, lr}
  40772a:	460c      	mov	r4, r1
  40772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407730:	f000 fa88 	bl	407c44 <_read_r>
  407734:	2800      	cmp	r0, #0
  407736:	db03      	blt.n	407740 <__sread+0x18>
  407738:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40773a:	4403      	add	r3, r0
  40773c:	6523      	str	r3, [r4, #80]	; 0x50
  40773e:	bd10      	pop	{r4, pc}
  407740:	89a3      	ldrh	r3, [r4, #12]
  407742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407746:	81a3      	strh	r3, [r4, #12]
  407748:	bd10      	pop	{r4, pc}
  40774a:	bf00      	nop

0040774c <__swrite>:
  40774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407750:	4616      	mov	r6, r2
  407752:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407756:	461f      	mov	r7, r3
  407758:	05d3      	lsls	r3, r2, #23
  40775a:	460c      	mov	r4, r1
  40775c:	4605      	mov	r5, r0
  40775e:	d507      	bpl.n	407770 <__swrite+0x24>
  407760:	2200      	movs	r2, #0
  407762:	2302      	movs	r3, #2
  407764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407768:	f000 fa40 	bl	407bec <_lseek_r>
  40776c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407778:	81a2      	strh	r2, [r4, #12]
  40777a:	463b      	mov	r3, r7
  40777c:	4632      	mov	r2, r6
  40777e:	4628      	mov	r0, r5
  407780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407784:	f000 b85e 	b.w	407844 <_write_r>

00407788 <__sseek>:
  407788:	b510      	push	{r4, lr}
  40778a:	460c      	mov	r4, r1
  40778c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407790:	f000 fa2c 	bl	407bec <_lseek_r>
  407794:	89a3      	ldrh	r3, [r4, #12]
  407796:	1c42      	adds	r2, r0, #1
  407798:	bf0e      	itee	eq
  40779a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40779e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4077a2:	6520      	strne	r0, [r4, #80]	; 0x50
  4077a4:	81a3      	strh	r3, [r4, #12]
  4077a6:	bd10      	pop	{r4, pc}

004077a8 <__sclose>:
  4077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4077ac:	f000 b8f2 	b.w	407994 <_close_r>

004077b0 <__sprint_r.part.0>:
  4077b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4077b6:	049c      	lsls	r4, r3, #18
  4077b8:	4693      	mov	fp, r2
  4077ba:	d52f      	bpl.n	40781c <__sprint_r.part.0+0x6c>
  4077bc:	6893      	ldr	r3, [r2, #8]
  4077be:	6812      	ldr	r2, [r2, #0]
  4077c0:	b353      	cbz	r3, 407818 <__sprint_r.part.0+0x68>
  4077c2:	460e      	mov	r6, r1
  4077c4:	4607      	mov	r7, r0
  4077c6:	f102 0908 	add.w	r9, r2, #8
  4077ca:	e919 0420 	ldmdb	r9, {r5, sl}
  4077ce:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4077d2:	d017      	beq.n	407804 <__sprint_r.part.0+0x54>
  4077d4:	3d04      	subs	r5, #4
  4077d6:	2400      	movs	r4, #0
  4077d8:	e001      	b.n	4077de <__sprint_r.part.0+0x2e>
  4077da:	45a0      	cmp	r8, r4
  4077dc:	d010      	beq.n	407800 <__sprint_r.part.0+0x50>
  4077de:	4632      	mov	r2, r6
  4077e0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4077e4:	4638      	mov	r0, r7
  4077e6:	f000 f999 	bl	407b1c <_fputwc_r>
  4077ea:	1c43      	adds	r3, r0, #1
  4077ec:	f104 0401 	add.w	r4, r4, #1
  4077f0:	d1f3      	bne.n	4077da <__sprint_r.part.0+0x2a>
  4077f2:	2300      	movs	r3, #0
  4077f4:	f8cb 3008 	str.w	r3, [fp, #8]
  4077f8:	f8cb 3004 	str.w	r3, [fp, #4]
  4077fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407800:	f8db 3008 	ldr.w	r3, [fp, #8]
  407804:	f02a 0a03 	bic.w	sl, sl, #3
  407808:	eba3 030a 	sub.w	r3, r3, sl
  40780c:	f8cb 3008 	str.w	r3, [fp, #8]
  407810:	f109 0908 	add.w	r9, r9, #8
  407814:	2b00      	cmp	r3, #0
  407816:	d1d8      	bne.n	4077ca <__sprint_r.part.0+0x1a>
  407818:	2000      	movs	r0, #0
  40781a:	e7ea      	b.n	4077f2 <__sprint_r.part.0+0x42>
  40781c:	f7fe fffe 	bl	40681c <__sfvwrite_r>
  407820:	2300      	movs	r3, #0
  407822:	f8cb 3008 	str.w	r3, [fp, #8]
  407826:	f8cb 3004 	str.w	r3, [fp, #4]
  40782a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40782e:	bf00      	nop

00407830 <__sprint_r>:
  407830:	6893      	ldr	r3, [r2, #8]
  407832:	b10b      	cbz	r3, 407838 <__sprint_r+0x8>
  407834:	f7ff bfbc 	b.w	4077b0 <__sprint_r.part.0>
  407838:	b410      	push	{r4}
  40783a:	4618      	mov	r0, r3
  40783c:	6053      	str	r3, [r2, #4]
  40783e:	bc10      	pop	{r4}
  407840:	4770      	bx	lr
  407842:	bf00      	nop

00407844 <_write_r>:
  407844:	b570      	push	{r4, r5, r6, lr}
  407846:	460d      	mov	r5, r1
  407848:	4c08      	ldr	r4, [pc, #32]	; (40786c <_write_r+0x28>)
  40784a:	4611      	mov	r1, r2
  40784c:	4606      	mov	r6, r0
  40784e:	461a      	mov	r2, r3
  407850:	4628      	mov	r0, r5
  407852:	2300      	movs	r3, #0
  407854:	6023      	str	r3, [r4, #0]
  407856:	f7f8 fcff 	bl	400258 <_write>
  40785a:	1c43      	adds	r3, r0, #1
  40785c:	d000      	beq.n	407860 <_write_r+0x1c>
  40785e:	bd70      	pop	{r4, r5, r6, pc}
  407860:	6823      	ldr	r3, [r4, #0]
  407862:	2b00      	cmp	r3, #0
  407864:	d0fb      	beq.n	40785e <_write_r+0x1a>
  407866:	6033      	str	r3, [r6, #0]
  407868:	bd70      	pop	{r4, r5, r6, pc}
  40786a:	bf00      	nop
  40786c:	20400cc4 	.word	0x20400cc4

00407870 <__register_exitproc>:
  407870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407874:	4d2c      	ldr	r5, [pc, #176]	; (407928 <__register_exitproc+0xb8>)
  407876:	4606      	mov	r6, r0
  407878:	6828      	ldr	r0, [r5, #0]
  40787a:	4698      	mov	r8, r3
  40787c:	460f      	mov	r7, r1
  40787e:	4691      	mov	r9, r2
  407880:	f7ff f980 	bl	406b84 <__retarget_lock_acquire_recursive>
  407884:	4b29      	ldr	r3, [pc, #164]	; (40792c <__register_exitproc+0xbc>)
  407886:	681c      	ldr	r4, [r3, #0]
  407888:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40788c:	2b00      	cmp	r3, #0
  40788e:	d03e      	beq.n	40790e <__register_exitproc+0x9e>
  407890:	685a      	ldr	r2, [r3, #4]
  407892:	2a1f      	cmp	r2, #31
  407894:	dc1c      	bgt.n	4078d0 <__register_exitproc+0x60>
  407896:	f102 0e01 	add.w	lr, r2, #1
  40789a:	b176      	cbz	r6, 4078ba <__register_exitproc+0x4a>
  40789c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4078a0:	2401      	movs	r4, #1
  4078a2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4078a6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4078aa:	4094      	lsls	r4, r2
  4078ac:	4320      	orrs	r0, r4
  4078ae:	2e02      	cmp	r6, #2
  4078b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4078b4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4078b8:	d023      	beq.n	407902 <__register_exitproc+0x92>
  4078ba:	3202      	adds	r2, #2
  4078bc:	f8c3 e004 	str.w	lr, [r3, #4]
  4078c0:	6828      	ldr	r0, [r5, #0]
  4078c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4078c6:	f7ff f95f 	bl	406b88 <__retarget_lock_release_recursive>
  4078ca:	2000      	movs	r0, #0
  4078cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4078d0:	4b17      	ldr	r3, [pc, #92]	; (407930 <__register_exitproc+0xc0>)
  4078d2:	b30b      	cbz	r3, 407918 <__register_exitproc+0xa8>
  4078d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4078d8:	f7fb fc84 	bl	4031e4 <malloc>
  4078dc:	4603      	mov	r3, r0
  4078de:	b1d8      	cbz	r0, 407918 <__register_exitproc+0xa8>
  4078e0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4078e4:	6002      	str	r2, [r0, #0]
  4078e6:	2100      	movs	r1, #0
  4078e8:	6041      	str	r1, [r0, #4]
  4078ea:	460a      	mov	r2, r1
  4078ec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4078f0:	f04f 0e01 	mov.w	lr, #1
  4078f4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4078f8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4078fc:	2e00      	cmp	r6, #0
  4078fe:	d0dc      	beq.n	4078ba <__register_exitproc+0x4a>
  407900:	e7cc      	b.n	40789c <__register_exitproc+0x2c>
  407902:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407906:	430c      	orrs	r4, r1
  407908:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40790c:	e7d5      	b.n	4078ba <__register_exitproc+0x4a>
  40790e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407912:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407916:	e7bb      	b.n	407890 <__register_exitproc+0x20>
  407918:	6828      	ldr	r0, [r5, #0]
  40791a:	f7ff f935 	bl	406b88 <__retarget_lock_release_recursive>
  40791e:	f04f 30ff 	mov.w	r0, #4294967295
  407922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407926:	bf00      	nop
  407928:	20400848 	.word	0x20400848
  40792c:	0040875c 	.word	0x0040875c
  407930:	004031e5 	.word	0x004031e5

00407934 <_calloc_r>:
  407934:	b510      	push	{r4, lr}
  407936:	fb02 f101 	mul.w	r1, r2, r1
  40793a:	f7fb fc63 	bl	403204 <_malloc_r>
  40793e:	4604      	mov	r4, r0
  407940:	b1d8      	cbz	r0, 40797a <_calloc_r+0x46>
  407942:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407946:	f022 0203 	bic.w	r2, r2, #3
  40794a:	3a04      	subs	r2, #4
  40794c:	2a24      	cmp	r2, #36	; 0x24
  40794e:	d818      	bhi.n	407982 <_calloc_r+0x4e>
  407950:	2a13      	cmp	r2, #19
  407952:	d914      	bls.n	40797e <_calloc_r+0x4a>
  407954:	2300      	movs	r3, #0
  407956:	2a1b      	cmp	r2, #27
  407958:	6003      	str	r3, [r0, #0]
  40795a:	6043      	str	r3, [r0, #4]
  40795c:	d916      	bls.n	40798c <_calloc_r+0x58>
  40795e:	2a24      	cmp	r2, #36	; 0x24
  407960:	6083      	str	r3, [r0, #8]
  407962:	60c3      	str	r3, [r0, #12]
  407964:	bf11      	iteee	ne
  407966:	f100 0210 	addne.w	r2, r0, #16
  40796a:	6103      	streq	r3, [r0, #16]
  40796c:	6143      	streq	r3, [r0, #20]
  40796e:	f100 0218 	addeq.w	r2, r0, #24
  407972:	2300      	movs	r3, #0
  407974:	6013      	str	r3, [r2, #0]
  407976:	6053      	str	r3, [r2, #4]
  407978:	6093      	str	r3, [r2, #8]
  40797a:	4620      	mov	r0, r4
  40797c:	bd10      	pop	{r4, pc}
  40797e:	4602      	mov	r2, r0
  407980:	e7f7      	b.n	407972 <_calloc_r+0x3e>
  407982:	2100      	movs	r1, #0
  407984:	f7fb ff88 	bl	403898 <memset>
  407988:	4620      	mov	r0, r4
  40798a:	bd10      	pop	{r4, pc}
  40798c:	f100 0208 	add.w	r2, r0, #8
  407990:	e7ef      	b.n	407972 <_calloc_r+0x3e>
  407992:	bf00      	nop

00407994 <_close_r>:
  407994:	b538      	push	{r3, r4, r5, lr}
  407996:	4c07      	ldr	r4, [pc, #28]	; (4079b4 <_close_r+0x20>)
  407998:	2300      	movs	r3, #0
  40799a:	4605      	mov	r5, r0
  40799c:	4608      	mov	r0, r1
  40799e:	6023      	str	r3, [r4, #0]
  4079a0:	f7f9 f98c 	bl	400cbc <_close>
  4079a4:	1c43      	adds	r3, r0, #1
  4079a6:	d000      	beq.n	4079aa <_close_r+0x16>
  4079a8:	bd38      	pop	{r3, r4, r5, pc}
  4079aa:	6823      	ldr	r3, [r4, #0]
  4079ac:	2b00      	cmp	r3, #0
  4079ae:	d0fb      	beq.n	4079a8 <_close_r+0x14>
  4079b0:	602b      	str	r3, [r5, #0]
  4079b2:	bd38      	pop	{r3, r4, r5, pc}
  4079b4:	20400cc4 	.word	0x20400cc4

004079b8 <_fclose_r>:
  4079b8:	b570      	push	{r4, r5, r6, lr}
  4079ba:	b159      	cbz	r1, 4079d4 <_fclose_r+0x1c>
  4079bc:	4605      	mov	r5, r0
  4079be:	460c      	mov	r4, r1
  4079c0:	b110      	cbz	r0, 4079c8 <_fclose_r+0x10>
  4079c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4079c4:	2b00      	cmp	r3, #0
  4079c6:	d03c      	beq.n	407a42 <_fclose_r+0x8a>
  4079c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4079ca:	07d8      	lsls	r0, r3, #31
  4079cc:	d505      	bpl.n	4079da <_fclose_r+0x22>
  4079ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079d2:	b92b      	cbnz	r3, 4079e0 <_fclose_r+0x28>
  4079d4:	2600      	movs	r6, #0
  4079d6:	4630      	mov	r0, r6
  4079d8:	bd70      	pop	{r4, r5, r6, pc}
  4079da:	89a3      	ldrh	r3, [r4, #12]
  4079dc:	0599      	lsls	r1, r3, #22
  4079de:	d53c      	bpl.n	407a5a <_fclose_r+0xa2>
  4079e0:	4621      	mov	r1, r4
  4079e2:	4628      	mov	r0, r5
  4079e4:	f7fe fc9a 	bl	40631c <__sflush_r>
  4079e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4079ea:	4606      	mov	r6, r0
  4079ec:	b133      	cbz	r3, 4079fc <_fclose_r+0x44>
  4079ee:	69e1      	ldr	r1, [r4, #28]
  4079f0:	4628      	mov	r0, r5
  4079f2:	4798      	blx	r3
  4079f4:	2800      	cmp	r0, #0
  4079f6:	bfb8      	it	lt
  4079f8:	f04f 36ff 	movlt.w	r6, #4294967295
  4079fc:	89a3      	ldrh	r3, [r4, #12]
  4079fe:	061a      	lsls	r2, r3, #24
  407a00:	d422      	bmi.n	407a48 <_fclose_r+0x90>
  407a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407a04:	b141      	cbz	r1, 407a18 <_fclose_r+0x60>
  407a06:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407a0a:	4299      	cmp	r1, r3
  407a0c:	d002      	beq.n	407a14 <_fclose_r+0x5c>
  407a0e:	4628      	mov	r0, r5
  407a10:	f7fe fe1e 	bl	406650 <_free_r>
  407a14:	2300      	movs	r3, #0
  407a16:	6323      	str	r3, [r4, #48]	; 0x30
  407a18:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407a1a:	b121      	cbz	r1, 407a26 <_fclose_r+0x6e>
  407a1c:	4628      	mov	r0, r5
  407a1e:	f7fe fe17 	bl	406650 <_free_r>
  407a22:	2300      	movs	r3, #0
  407a24:	6463      	str	r3, [r4, #68]	; 0x44
  407a26:	f7fe fd9d 	bl	406564 <__sfp_lock_acquire>
  407a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407a2c:	2200      	movs	r2, #0
  407a2e:	07db      	lsls	r3, r3, #31
  407a30:	81a2      	strh	r2, [r4, #12]
  407a32:	d50e      	bpl.n	407a52 <_fclose_r+0x9a>
  407a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a36:	f7ff f8a3 	bl	406b80 <__retarget_lock_close_recursive>
  407a3a:	f7fe fd99 	bl	406570 <__sfp_lock_release>
  407a3e:	4630      	mov	r0, r6
  407a40:	bd70      	pop	{r4, r5, r6, pc}
  407a42:	f7fe fd63 	bl	40650c <__sinit>
  407a46:	e7bf      	b.n	4079c8 <_fclose_r+0x10>
  407a48:	6921      	ldr	r1, [r4, #16]
  407a4a:	4628      	mov	r0, r5
  407a4c:	f7fe fe00 	bl	406650 <_free_r>
  407a50:	e7d7      	b.n	407a02 <_fclose_r+0x4a>
  407a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a54:	f7ff f898 	bl	406b88 <__retarget_lock_release_recursive>
  407a58:	e7ec      	b.n	407a34 <_fclose_r+0x7c>
  407a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a5c:	f7ff f892 	bl	406b84 <__retarget_lock_acquire_recursive>
  407a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a64:	2b00      	cmp	r3, #0
  407a66:	d1bb      	bne.n	4079e0 <_fclose_r+0x28>
  407a68:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407a6a:	f016 0601 	ands.w	r6, r6, #1
  407a6e:	d1b1      	bne.n	4079d4 <_fclose_r+0x1c>
  407a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a72:	f7ff f889 	bl	406b88 <__retarget_lock_release_recursive>
  407a76:	4630      	mov	r0, r6
  407a78:	bd70      	pop	{r4, r5, r6, pc}
  407a7a:	bf00      	nop

00407a7c <__fputwc>:
  407a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407a80:	b082      	sub	sp, #8
  407a82:	4680      	mov	r8, r0
  407a84:	4689      	mov	r9, r1
  407a86:	4614      	mov	r4, r2
  407a88:	f000 f8a2 	bl	407bd0 <__locale_mb_cur_max>
  407a8c:	2801      	cmp	r0, #1
  407a8e:	d036      	beq.n	407afe <__fputwc+0x82>
  407a90:	464a      	mov	r2, r9
  407a92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407a96:	a901      	add	r1, sp, #4
  407a98:	4640      	mov	r0, r8
  407a9a:	f000 f941 	bl	407d20 <_wcrtomb_r>
  407a9e:	1c42      	adds	r2, r0, #1
  407aa0:	4606      	mov	r6, r0
  407aa2:	d025      	beq.n	407af0 <__fputwc+0x74>
  407aa4:	b3a8      	cbz	r0, 407b12 <__fputwc+0x96>
  407aa6:	f89d e004 	ldrb.w	lr, [sp, #4]
  407aaa:	2500      	movs	r5, #0
  407aac:	f10d 0a04 	add.w	sl, sp, #4
  407ab0:	e009      	b.n	407ac6 <__fputwc+0x4a>
  407ab2:	6823      	ldr	r3, [r4, #0]
  407ab4:	1c5a      	adds	r2, r3, #1
  407ab6:	6022      	str	r2, [r4, #0]
  407ab8:	f883 e000 	strb.w	lr, [r3]
  407abc:	3501      	adds	r5, #1
  407abe:	42b5      	cmp	r5, r6
  407ac0:	d227      	bcs.n	407b12 <__fputwc+0x96>
  407ac2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407ac6:	68a3      	ldr	r3, [r4, #8]
  407ac8:	3b01      	subs	r3, #1
  407aca:	2b00      	cmp	r3, #0
  407acc:	60a3      	str	r3, [r4, #8]
  407ace:	daf0      	bge.n	407ab2 <__fputwc+0x36>
  407ad0:	69a7      	ldr	r7, [r4, #24]
  407ad2:	42bb      	cmp	r3, r7
  407ad4:	4671      	mov	r1, lr
  407ad6:	4622      	mov	r2, r4
  407ad8:	4640      	mov	r0, r8
  407ada:	db02      	blt.n	407ae2 <__fputwc+0x66>
  407adc:	f1be 0f0a 	cmp.w	lr, #10
  407ae0:	d1e7      	bne.n	407ab2 <__fputwc+0x36>
  407ae2:	f000 f8c5 	bl	407c70 <__swbuf_r>
  407ae6:	1c43      	adds	r3, r0, #1
  407ae8:	d1e8      	bne.n	407abc <__fputwc+0x40>
  407aea:	b002      	add	sp, #8
  407aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407af0:	89a3      	ldrh	r3, [r4, #12]
  407af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407af6:	81a3      	strh	r3, [r4, #12]
  407af8:	b002      	add	sp, #8
  407afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407afe:	f109 33ff 	add.w	r3, r9, #4294967295
  407b02:	2bfe      	cmp	r3, #254	; 0xfe
  407b04:	d8c4      	bhi.n	407a90 <__fputwc+0x14>
  407b06:	fa5f fe89 	uxtb.w	lr, r9
  407b0a:	4606      	mov	r6, r0
  407b0c:	f88d e004 	strb.w	lr, [sp, #4]
  407b10:	e7cb      	b.n	407aaa <__fputwc+0x2e>
  407b12:	4648      	mov	r0, r9
  407b14:	b002      	add	sp, #8
  407b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407b1a:	bf00      	nop

00407b1c <_fputwc_r>:
  407b1c:	b530      	push	{r4, r5, lr}
  407b1e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407b20:	f013 0f01 	tst.w	r3, #1
  407b24:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407b28:	4614      	mov	r4, r2
  407b2a:	b083      	sub	sp, #12
  407b2c:	4605      	mov	r5, r0
  407b2e:	b29a      	uxth	r2, r3
  407b30:	d101      	bne.n	407b36 <_fputwc_r+0x1a>
  407b32:	0590      	lsls	r0, r2, #22
  407b34:	d51c      	bpl.n	407b70 <_fputwc_r+0x54>
  407b36:	0490      	lsls	r0, r2, #18
  407b38:	d406      	bmi.n	407b48 <_fputwc_r+0x2c>
  407b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407b44:	81a3      	strh	r3, [r4, #12]
  407b46:	6662      	str	r2, [r4, #100]	; 0x64
  407b48:	4628      	mov	r0, r5
  407b4a:	4622      	mov	r2, r4
  407b4c:	f7ff ff96 	bl	407a7c <__fputwc>
  407b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407b52:	07da      	lsls	r2, r3, #31
  407b54:	4605      	mov	r5, r0
  407b56:	d402      	bmi.n	407b5e <_fputwc_r+0x42>
  407b58:	89a3      	ldrh	r3, [r4, #12]
  407b5a:	059b      	lsls	r3, r3, #22
  407b5c:	d502      	bpl.n	407b64 <_fputwc_r+0x48>
  407b5e:	4628      	mov	r0, r5
  407b60:	b003      	add	sp, #12
  407b62:	bd30      	pop	{r4, r5, pc}
  407b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407b66:	f7ff f80f 	bl	406b88 <__retarget_lock_release_recursive>
  407b6a:	4628      	mov	r0, r5
  407b6c:	b003      	add	sp, #12
  407b6e:	bd30      	pop	{r4, r5, pc}
  407b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407b72:	9101      	str	r1, [sp, #4]
  407b74:	f7ff f806 	bl	406b84 <__retarget_lock_acquire_recursive>
  407b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b7c:	9901      	ldr	r1, [sp, #4]
  407b7e:	b29a      	uxth	r2, r3
  407b80:	e7d9      	b.n	407b36 <_fputwc_r+0x1a>
  407b82:	bf00      	nop

00407b84 <_fstat_r>:
  407b84:	b538      	push	{r3, r4, r5, lr}
  407b86:	460b      	mov	r3, r1
  407b88:	4c07      	ldr	r4, [pc, #28]	; (407ba8 <_fstat_r+0x24>)
  407b8a:	4605      	mov	r5, r0
  407b8c:	4611      	mov	r1, r2
  407b8e:	4618      	mov	r0, r3
  407b90:	2300      	movs	r3, #0
  407b92:	6023      	str	r3, [r4, #0]
  407b94:	f7f9 f896 	bl	400cc4 <_fstat>
  407b98:	1c43      	adds	r3, r0, #1
  407b9a:	d000      	beq.n	407b9e <_fstat_r+0x1a>
  407b9c:	bd38      	pop	{r3, r4, r5, pc}
  407b9e:	6823      	ldr	r3, [r4, #0]
  407ba0:	2b00      	cmp	r3, #0
  407ba2:	d0fb      	beq.n	407b9c <_fstat_r+0x18>
  407ba4:	602b      	str	r3, [r5, #0]
  407ba6:	bd38      	pop	{r3, r4, r5, pc}
  407ba8:	20400cc4 	.word	0x20400cc4

00407bac <_isatty_r>:
  407bac:	b538      	push	{r3, r4, r5, lr}
  407bae:	4c07      	ldr	r4, [pc, #28]	; (407bcc <_isatty_r+0x20>)
  407bb0:	2300      	movs	r3, #0
  407bb2:	4605      	mov	r5, r0
  407bb4:	4608      	mov	r0, r1
  407bb6:	6023      	str	r3, [r4, #0]
  407bb8:	f7f9 f88a 	bl	400cd0 <_isatty>
  407bbc:	1c43      	adds	r3, r0, #1
  407bbe:	d000      	beq.n	407bc2 <_isatty_r+0x16>
  407bc0:	bd38      	pop	{r3, r4, r5, pc}
  407bc2:	6823      	ldr	r3, [r4, #0]
  407bc4:	2b00      	cmp	r3, #0
  407bc6:	d0fb      	beq.n	407bc0 <_isatty_r+0x14>
  407bc8:	602b      	str	r3, [r5, #0]
  407bca:	bd38      	pop	{r3, r4, r5, pc}
  407bcc:	20400cc4 	.word	0x20400cc4

00407bd0 <__locale_mb_cur_max>:
  407bd0:	4b04      	ldr	r3, [pc, #16]	; (407be4 <__locale_mb_cur_max+0x14>)
  407bd2:	4a05      	ldr	r2, [pc, #20]	; (407be8 <__locale_mb_cur_max+0x18>)
  407bd4:	681b      	ldr	r3, [r3, #0]
  407bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407bd8:	2b00      	cmp	r3, #0
  407bda:	bf08      	it	eq
  407bdc:	4613      	moveq	r3, r2
  407bde:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407be2:	4770      	bx	lr
  407be4:	2040000c 	.word	0x2040000c
  407be8:	2040084c 	.word	0x2040084c

00407bec <_lseek_r>:
  407bec:	b570      	push	{r4, r5, r6, lr}
  407bee:	460d      	mov	r5, r1
  407bf0:	4c08      	ldr	r4, [pc, #32]	; (407c14 <_lseek_r+0x28>)
  407bf2:	4611      	mov	r1, r2
  407bf4:	4606      	mov	r6, r0
  407bf6:	461a      	mov	r2, r3
  407bf8:	4628      	mov	r0, r5
  407bfa:	2300      	movs	r3, #0
  407bfc:	6023      	str	r3, [r4, #0]
  407bfe:	f7f9 f869 	bl	400cd4 <_lseek>
  407c02:	1c43      	adds	r3, r0, #1
  407c04:	d000      	beq.n	407c08 <_lseek_r+0x1c>
  407c06:	bd70      	pop	{r4, r5, r6, pc}
  407c08:	6823      	ldr	r3, [r4, #0]
  407c0a:	2b00      	cmp	r3, #0
  407c0c:	d0fb      	beq.n	407c06 <_lseek_r+0x1a>
  407c0e:	6033      	str	r3, [r6, #0]
  407c10:	bd70      	pop	{r4, r5, r6, pc}
  407c12:	bf00      	nop
  407c14:	20400cc4 	.word	0x20400cc4

00407c18 <__ascii_mbtowc>:
  407c18:	b082      	sub	sp, #8
  407c1a:	b149      	cbz	r1, 407c30 <__ascii_mbtowc+0x18>
  407c1c:	b15a      	cbz	r2, 407c36 <__ascii_mbtowc+0x1e>
  407c1e:	b16b      	cbz	r3, 407c3c <__ascii_mbtowc+0x24>
  407c20:	7813      	ldrb	r3, [r2, #0]
  407c22:	600b      	str	r3, [r1, #0]
  407c24:	7812      	ldrb	r2, [r2, #0]
  407c26:	1c10      	adds	r0, r2, #0
  407c28:	bf18      	it	ne
  407c2a:	2001      	movne	r0, #1
  407c2c:	b002      	add	sp, #8
  407c2e:	4770      	bx	lr
  407c30:	a901      	add	r1, sp, #4
  407c32:	2a00      	cmp	r2, #0
  407c34:	d1f3      	bne.n	407c1e <__ascii_mbtowc+0x6>
  407c36:	4610      	mov	r0, r2
  407c38:	b002      	add	sp, #8
  407c3a:	4770      	bx	lr
  407c3c:	f06f 0001 	mvn.w	r0, #1
  407c40:	e7f4      	b.n	407c2c <__ascii_mbtowc+0x14>
  407c42:	bf00      	nop

00407c44 <_read_r>:
  407c44:	b570      	push	{r4, r5, r6, lr}
  407c46:	460d      	mov	r5, r1
  407c48:	4c08      	ldr	r4, [pc, #32]	; (407c6c <_read_r+0x28>)
  407c4a:	4611      	mov	r1, r2
  407c4c:	4606      	mov	r6, r0
  407c4e:	461a      	mov	r2, r3
  407c50:	4628      	mov	r0, r5
  407c52:	2300      	movs	r3, #0
  407c54:	6023      	str	r3, [r4, #0]
  407c56:	f7f8 fae1 	bl	40021c <_read>
  407c5a:	1c43      	adds	r3, r0, #1
  407c5c:	d000      	beq.n	407c60 <_read_r+0x1c>
  407c5e:	bd70      	pop	{r4, r5, r6, pc}
  407c60:	6823      	ldr	r3, [r4, #0]
  407c62:	2b00      	cmp	r3, #0
  407c64:	d0fb      	beq.n	407c5e <_read_r+0x1a>
  407c66:	6033      	str	r3, [r6, #0]
  407c68:	bd70      	pop	{r4, r5, r6, pc}
  407c6a:	bf00      	nop
  407c6c:	20400cc4 	.word	0x20400cc4

00407c70 <__swbuf_r>:
  407c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407c72:	460d      	mov	r5, r1
  407c74:	4614      	mov	r4, r2
  407c76:	4606      	mov	r6, r0
  407c78:	b110      	cbz	r0, 407c80 <__swbuf_r+0x10>
  407c7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	d04b      	beq.n	407d18 <__swbuf_r+0xa8>
  407c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407c84:	69a3      	ldr	r3, [r4, #24]
  407c86:	60a3      	str	r3, [r4, #8]
  407c88:	b291      	uxth	r1, r2
  407c8a:	0708      	lsls	r0, r1, #28
  407c8c:	d539      	bpl.n	407d02 <__swbuf_r+0x92>
  407c8e:	6923      	ldr	r3, [r4, #16]
  407c90:	2b00      	cmp	r3, #0
  407c92:	d036      	beq.n	407d02 <__swbuf_r+0x92>
  407c94:	b2ed      	uxtb	r5, r5
  407c96:	0489      	lsls	r1, r1, #18
  407c98:	462f      	mov	r7, r5
  407c9a:	d515      	bpl.n	407cc8 <__swbuf_r+0x58>
  407c9c:	6822      	ldr	r2, [r4, #0]
  407c9e:	6961      	ldr	r1, [r4, #20]
  407ca0:	1ad3      	subs	r3, r2, r3
  407ca2:	428b      	cmp	r3, r1
  407ca4:	da1c      	bge.n	407ce0 <__swbuf_r+0x70>
  407ca6:	3301      	adds	r3, #1
  407ca8:	68a1      	ldr	r1, [r4, #8]
  407caa:	1c50      	adds	r0, r2, #1
  407cac:	3901      	subs	r1, #1
  407cae:	60a1      	str	r1, [r4, #8]
  407cb0:	6020      	str	r0, [r4, #0]
  407cb2:	7015      	strb	r5, [r2, #0]
  407cb4:	6962      	ldr	r2, [r4, #20]
  407cb6:	429a      	cmp	r2, r3
  407cb8:	d01a      	beq.n	407cf0 <__swbuf_r+0x80>
  407cba:	89a3      	ldrh	r3, [r4, #12]
  407cbc:	07db      	lsls	r3, r3, #31
  407cbe:	d501      	bpl.n	407cc4 <__swbuf_r+0x54>
  407cc0:	2d0a      	cmp	r5, #10
  407cc2:	d015      	beq.n	407cf0 <__swbuf_r+0x80>
  407cc4:	4638      	mov	r0, r7
  407cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407cc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407cce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407cd2:	81a2      	strh	r2, [r4, #12]
  407cd4:	6822      	ldr	r2, [r4, #0]
  407cd6:	6661      	str	r1, [r4, #100]	; 0x64
  407cd8:	6961      	ldr	r1, [r4, #20]
  407cda:	1ad3      	subs	r3, r2, r3
  407cdc:	428b      	cmp	r3, r1
  407cde:	dbe2      	blt.n	407ca6 <__swbuf_r+0x36>
  407ce0:	4621      	mov	r1, r4
  407ce2:	4630      	mov	r0, r6
  407ce4:	f7fe fbba 	bl	40645c <_fflush_r>
  407ce8:	b940      	cbnz	r0, 407cfc <__swbuf_r+0x8c>
  407cea:	6822      	ldr	r2, [r4, #0]
  407cec:	2301      	movs	r3, #1
  407cee:	e7db      	b.n	407ca8 <__swbuf_r+0x38>
  407cf0:	4621      	mov	r1, r4
  407cf2:	4630      	mov	r0, r6
  407cf4:	f7fe fbb2 	bl	40645c <_fflush_r>
  407cf8:	2800      	cmp	r0, #0
  407cfa:	d0e3      	beq.n	407cc4 <__swbuf_r+0x54>
  407cfc:	f04f 37ff 	mov.w	r7, #4294967295
  407d00:	e7e0      	b.n	407cc4 <__swbuf_r+0x54>
  407d02:	4621      	mov	r1, r4
  407d04:	4630      	mov	r0, r6
  407d06:	f7fd fad7 	bl	4052b8 <__swsetup_r>
  407d0a:	2800      	cmp	r0, #0
  407d0c:	d1f6      	bne.n	407cfc <__swbuf_r+0x8c>
  407d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407d12:	6923      	ldr	r3, [r4, #16]
  407d14:	b291      	uxth	r1, r2
  407d16:	e7bd      	b.n	407c94 <__swbuf_r+0x24>
  407d18:	f7fe fbf8 	bl	40650c <__sinit>
  407d1c:	e7b0      	b.n	407c80 <__swbuf_r+0x10>
  407d1e:	bf00      	nop

00407d20 <_wcrtomb_r>:
  407d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  407d22:	4606      	mov	r6, r0
  407d24:	b085      	sub	sp, #20
  407d26:	461f      	mov	r7, r3
  407d28:	b189      	cbz	r1, 407d4e <_wcrtomb_r+0x2e>
  407d2a:	4c10      	ldr	r4, [pc, #64]	; (407d6c <_wcrtomb_r+0x4c>)
  407d2c:	4d10      	ldr	r5, [pc, #64]	; (407d70 <_wcrtomb_r+0x50>)
  407d2e:	6824      	ldr	r4, [r4, #0]
  407d30:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407d32:	2c00      	cmp	r4, #0
  407d34:	bf08      	it	eq
  407d36:	462c      	moveq	r4, r5
  407d38:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407d3c:	47a0      	blx	r4
  407d3e:	1c43      	adds	r3, r0, #1
  407d40:	d103      	bne.n	407d4a <_wcrtomb_r+0x2a>
  407d42:	2200      	movs	r2, #0
  407d44:	238a      	movs	r3, #138	; 0x8a
  407d46:	603a      	str	r2, [r7, #0]
  407d48:	6033      	str	r3, [r6, #0]
  407d4a:	b005      	add	sp, #20
  407d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d4e:	460c      	mov	r4, r1
  407d50:	4906      	ldr	r1, [pc, #24]	; (407d6c <_wcrtomb_r+0x4c>)
  407d52:	4a07      	ldr	r2, [pc, #28]	; (407d70 <_wcrtomb_r+0x50>)
  407d54:	6809      	ldr	r1, [r1, #0]
  407d56:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407d58:	2900      	cmp	r1, #0
  407d5a:	bf08      	it	eq
  407d5c:	4611      	moveq	r1, r2
  407d5e:	4622      	mov	r2, r4
  407d60:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407d64:	a901      	add	r1, sp, #4
  407d66:	47a0      	blx	r4
  407d68:	e7e9      	b.n	407d3e <_wcrtomb_r+0x1e>
  407d6a:	bf00      	nop
  407d6c:	2040000c 	.word	0x2040000c
  407d70:	2040084c 	.word	0x2040084c

00407d74 <__ascii_wctomb>:
  407d74:	b121      	cbz	r1, 407d80 <__ascii_wctomb+0xc>
  407d76:	2aff      	cmp	r2, #255	; 0xff
  407d78:	d804      	bhi.n	407d84 <__ascii_wctomb+0x10>
  407d7a:	700a      	strb	r2, [r1, #0]
  407d7c:	2001      	movs	r0, #1
  407d7e:	4770      	bx	lr
  407d80:	4608      	mov	r0, r1
  407d82:	4770      	bx	lr
  407d84:	238a      	movs	r3, #138	; 0x8a
  407d86:	6003      	str	r3, [r0, #0]
  407d88:	f04f 30ff 	mov.w	r0, #4294967295
  407d8c:	4770      	bx	lr
  407d8e:	bf00      	nop

00407d90 <__aeabi_dmul>:
  407d90:	b570      	push	{r4, r5, r6, lr}
  407d92:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407d96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407d9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407d9e:	bf1d      	ittte	ne
  407da0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407da4:	ea94 0f0c 	teqne	r4, ip
  407da8:	ea95 0f0c 	teqne	r5, ip
  407dac:	f000 f8de 	bleq	407f6c <__aeabi_dmul+0x1dc>
  407db0:	442c      	add	r4, r5
  407db2:	ea81 0603 	eor.w	r6, r1, r3
  407db6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407dba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407dbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407dc2:	bf18      	it	ne
  407dc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407dd0:	d038      	beq.n	407e44 <__aeabi_dmul+0xb4>
  407dd2:	fba0 ce02 	umull	ip, lr, r0, r2
  407dd6:	f04f 0500 	mov.w	r5, #0
  407dda:	fbe1 e502 	umlal	lr, r5, r1, r2
  407dde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407de2:	fbe0 e503 	umlal	lr, r5, r0, r3
  407de6:	f04f 0600 	mov.w	r6, #0
  407dea:	fbe1 5603 	umlal	r5, r6, r1, r3
  407dee:	f09c 0f00 	teq	ip, #0
  407df2:	bf18      	it	ne
  407df4:	f04e 0e01 	orrne.w	lr, lr, #1
  407df8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407dfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407e00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407e04:	d204      	bcs.n	407e10 <__aeabi_dmul+0x80>
  407e06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407e0a:	416d      	adcs	r5, r5
  407e0c:	eb46 0606 	adc.w	r6, r6, r6
  407e10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407e14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407e18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407e1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407e20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407e24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407e28:	bf88      	it	hi
  407e2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407e2e:	d81e      	bhi.n	407e6e <__aeabi_dmul+0xde>
  407e30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407e34:	bf08      	it	eq
  407e36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407e3a:	f150 0000 	adcs.w	r0, r0, #0
  407e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e42:	bd70      	pop	{r4, r5, r6, pc}
  407e44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407e48:	ea46 0101 	orr.w	r1, r6, r1
  407e4c:	ea40 0002 	orr.w	r0, r0, r2
  407e50:	ea81 0103 	eor.w	r1, r1, r3
  407e54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407e58:	bfc2      	ittt	gt
  407e5a:	ebd4 050c 	rsbsgt	r5, r4, ip
  407e5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407e62:	bd70      	popgt	{r4, r5, r6, pc}
  407e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e68:	f04f 0e00 	mov.w	lr, #0
  407e6c:	3c01      	subs	r4, #1
  407e6e:	f300 80ab 	bgt.w	407fc8 <__aeabi_dmul+0x238>
  407e72:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407e76:	bfde      	ittt	le
  407e78:	2000      	movle	r0, #0
  407e7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407e7e:	bd70      	pople	{r4, r5, r6, pc}
  407e80:	f1c4 0400 	rsb	r4, r4, #0
  407e84:	3c20      	subs	r4, #32
  407e86:	da35      	bge.n	407ef4 <__aeabi_dmul+0x164>
  407e88:	340c      	adds	r4, #12
  407e8a:	dc1b      	bgt.n	407ec4 <__aeabi_dmul+0x134>
  407e8c:	f104 0414 	add.w	r4, r4, #20
  407e90:	f1c4 0520 	rsb	r5, r4, #32
  407e94:	fa00 f305 	lsl.w	r3, r0, r5
  407e98:	fa20 f004 	lsr.w	r0, r0, r4
  407e9c:	fa01 f205 	lsl.w	r2, r1, r5
  407ea0:	ea40 0002 	orr.w	r0, r0, r2
  407ea4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407eac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407eb0:	fa21 f604 	lsr.w	r6, r1, r4
  407eb4:	eb42 0106 	adc.w	r1, r2, r6
  407eb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ebc:	bf08      	it	eq
  407ebe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ec2:	bd70      	pop	{r4, r5, r6, pc}
  407ec4:	f1c4 040c 	rsb	r4, r4, #12
  407ec8:	f1c4 0520 	rsb	r5, r4, #32
  407ecc:	fa00 f304 	lsl.w	r3, r0, r4
  407ed0:	fa20 f005 	lsr.w	r0, r0, r5
  407ed4:	fa01 f204 	lsl.w	r2, r1, r4
  407ed8:	ea40 0002 	orr.w	r0, r0, r2
  407edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ee0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407ee4:	f141 0100 	adc.w	r1, r1, #0
  407ee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407eec:	bf08      	it	eq
  407eee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ef2:	bd70      	pop	{r4, r5, r6, pc}
  407ef4:	f1c4 0520 	rsb	r5, r4, #32
  407ef8:	fa00 f205 	lsl.w	r2, r0, r5
  407efc:	ea4e 0e02 	orr.w	lr, lr, r2
  407f00:	fa20 f304 	lsr.w	r3, r0, r4
  407f04:	fa01 f205 	lsl.w	r2, r1, r5
  407f08:	ea43 0302 	orr.w	r3, r3, r2
  407f0c:	fa21 f004 	lsr.w	r0, r1, r4
  407f10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f14:	fa21 f204 	lsr.w	r2, r1, r4
  407f18:	ea20 0002 	bic.w	r0, r0, r2
  407f1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f24:	bf08      	it	eq
  407f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f2a:	bd70      	pop	{r4, r5, r6, pc}
  407f2c:	f094 0f00 	teq	r4, #0
  407f30:	d10f      	bne.n	407f52 <__aeabi_dmul+0x1c2>
  407f32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407f36:	0040      	lsls	r0, r0, #1
  407f38:	eb41 0101 	adc.w	r1, r1, r1
  407f3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f40:	bf08      	it	eq
  407f42:	3c01      	subeq	r4, #1
  407f44:	d0f7      	beq.n	407f36 <__aeabi_dmul+0x1a6>
  407f46:	ea41 0106 	orr.w	r1, r1, r6
  407f4a:	f095 0f00 	teq	r5, #0
  407f4e:	bf18      	it	ne
  407f50:	4770      	bxne	lr
  407f52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407f56:	0052      	lsls	r2, r2, #1
  407f58:	eb43 0303 	adc.w	r3, r3, r3
  407f5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407f60:	bf08      	it	eq
  407f62:	3d01      	subeq	r5, #1
  407f64:	d0f7      	beq.n	407f56 <__aeabi_dmul+0x1c6>
  407f66:	ea43 0306 	orr.w	r3, r3, r6
  407f6a:	4770      	bx	lr
  407f6c:	ea94 0f0c 	teq	r4, ip
  407f70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407f74:	bf18      	it	ne
  407f76:	ea95 0f0c 	teqne	r5, ip
  407f7a:	d00c      	beq.n	407f96 <__aeabi_dmul+0x206>
  407f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f80:	bf18      	it	ne
  407f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f86:	d1d1      	bne.n	407f2c <__aeabi_dmul+0x19c>
  407f88:	ea81 0103 	eor.w	r1, r1, r3
  407f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f90:	f04f 0000 	mov.w	r0, #0
  407f94:	bd70      	pop	{r4, r5, r6, pc}
  407f96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f9a:	bf06      	itte	eq
  407f9c:	4610      	moveq	r0, r2
  407f9e:	4619      	moveq	r1, r3
  407fa0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407fa4:	d019      	beq.n	407fda <__aeabi_dmul+0x24a>
  407fa6:	ea94 0f0c 	teq	r4, ip
  407faa:	d102      	bne.n	407fb2 <__aeabi_dmul+0x222>
  407fac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407fb0:	d113      	bne.n	407fda <__aeabi_dmul+0x24a>
  407fb2:	ea95 0f0c 	teq	r5, ip
  407fb6:	d105      	bne.n	407fc4 <__aeabi_dmul+0x234>
  407fb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407fbc:	bf1c      	itt	ne
  407fbe:	4610      	movne	r0, r2
  407fc0:	4619      	movne	r1, r3
  407fc2:	d10a      	bne.n	407fda <__aeabi_dmul+0x24a>
  407fc4:	ea81 0103 	eor.w	r1, r1, r3
  407fc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407fcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407fd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407fd4:	f04f 0000 	mov.w	r0, #0
  407fd8:	bd70      	pop	{r4, r5, r6, pc}
  407fda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407fde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407fe2:	bd70      	pop	{r4, r5, r6, pc}

00407fe4 <__aeabi_ddiv>:
  407fe4:	b570      	push	{r4, r5, r6, lr}
  407fe6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407fea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407fee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407ff2:	bf1d      	ittte	ne
  407ff4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ff8:	ea94 0f0c 	teqne	r4, ip
  407ffc:	ea95 0f0c 	teqne	r5, ip
  408000:	f000 f8a7 	bleq	408152 <__aeabi_ddiv+0x16e>
  408004:	eba4 0405 	sub.w	r4, r4, r5
  408008:	ea81 0e03 	eor.w	lr, r1, r3
  40800c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408010:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408014:	f000 8088 	beq.w	408128 <__aeabi_ddiv+0x144>
  408018:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40801c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408020:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408024:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408028:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40802c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408030:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408034:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408038:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40803c:	429d      	cmp	r5, r3
  40803e:	bf08      	it	eq
  408040:	4296      	cmpeq	r6, r2
  408042:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408046:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40804a:	d202      	bcs.n	408052 <__aeabi_ddiv+0x6e>
  40804c:	085b      	lsrs	r3, r3, #1
  40804e:	ea4f 0232 	mov.w	r2, r2, rrx
  408052:	1ab6      	subs	r6, r6, r2
  408054:	eb65 0503 	sbc.w	r5, r5, r3
  408058:	085b      	lsrs	r3, r3, #1
  40805a:	ea4f 0232 	mov.w	r2, r2, rrx
  40805e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408062:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408066:	ebb6 0e02 	subs.w	lr, r6, r2
  40806a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40806e:	bf22      	ittt	cs
  408070:	1ab6      	subcs	r6, r6, r2
  408072:	4675      	movcs	r5, lr
  408074:	ea40 000c 	orrcs.w	r0, r0, ip
  408078:	085b      	lsrs	r3, r3, #1
  40807a:	ea4f 0232 	mov.w	r2, r2, rrx
  40807e:	ebb6 0e02 	subs.w	lr, r6, r2
  408082:	eb75 0e03 	sbcs.w	lr, r5, r3
  408086:	bf22      	ittt	cs
  408088:	1ab6      	subcs	r6, r6, r2
  40808a:	4675      	movcs	r5, lr
  40808c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408090:	085b      	lsrs	r3, r3, #1
  408092:	ea4f 0232 	mov.w	r2, r2, rrx
  408096:	ebb6 0e02 	subs.w	lr, r6, r2
  40809a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40809e:	bf22      	ittt	cs
  4080a0:	1ab6      	subcs	r6, r6, r2
  4080a2:	4675      	movcs	r5, lr
  4080a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4080a8:	085b      	lsrs	r3, r3, #1
  4080aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4080ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4080b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080b6:	bf22      	ittt	cs
  4080b8:	1ab6      	subcs	r6, r6, r2
  4080ba:	4675      	movcs	r5, lr
  4080bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4080c0:	ea55 0e06 	orrs.w	lr, r5, r6
  4080c4:	d018      	beq.n	4080f8 <__aeabi_ddiv+0x114>
  4080c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4080ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4080ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4080d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4080d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4080da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4080de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4080e2:	d1c0      	bne.n	408066 <__aeabi_ddiv+0x82>
  4080e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080e8:	d10b      	bne.n	408102 <__aeabi_ddiv+0x11e>
  4080ea:	ea41 0100 	orr.w	r1, r1, r0
  4080ee:	f04f 0000 	mov.w	r0, #0
  4080f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4080f6:	e7b6      	b.n	408066 <__aeabi_ddiv+0x82>
  4080f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080fc:	bf04      	itt	eq
  4080fe:	4301      	orreq	r1, r0
  408100:	2000      	moveq	r0, #0
  408102:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408106:	bf88      	it	hi
  408108:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40810c:	f63f aeaf 	bhi.w	407e6e <__aeabi_dmul+0xde>
  408110:	ebb5 0c03 	subs.w	ip, r5, r3
  408114:	bf04      	itt	eq
  408116:	ebb6 0c02 	subseq.w	ip, r6, r2
  40811a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40811e:	f150 0000 	adcs.w	r0, r0, #0
  408122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408126:	bd70      	pop	{r4, r5, r6, pc}
  408128:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40812c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408130:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408134:	bfc2      	ittt	gt
  408136:	ebd4 050c 	rsbsgt	r5, r4, ip
  40813a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40813e:	bd70      	popgt	{r4, r5, r6, pc}
  408140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408144:	f04f 0e00 	mov.w	lr, #0
  408148:	3c01      	subs	r4, #1
  40814a:	e690      	b.n	407e6e <__aeabi_dmul+0xde>
  40814c:	ea45 0e06 	orr.w	lr, r5, r6
  408150:	e68d      	b.n	407e6e <__aeabi_dmul+0xde>
  408152:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408156:	ea94 0f0c 	teq	r4, ip
  40815a:	bf08      	it	eq
  40815c:	ea95 0f0c 	teqeq	r5, ip
  408160:	f43f af3b 	beq.w	407fda <__aeabi_dmul+0x24a>
  408164:	ea94 0f0c 	teq	r4, ip
  408168:	d10a      	bne.n	408180 <__aeabi_ddiv+0x19c>
  40816a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40816e:	f47f af34 	bne.w	407fda <__aeabi_dmul+0x24a>
  408172:	ea95 0f0c 	teq	r5, ip
  408176:	f47f af25 	bne.w	407fc4 <__aeabi_dmul+0x234>
  40817a:	4610      	mov	r0, r2
  40817c:	4619      	mov	r1, r3
  40817e:	e72c      	b.n	407fda <__aeabi_dmul+0x24a>
  408180:	ea95 0f0c 	teq	r5, ip
  408184:	d106      	bne.n	408194 <__aeabi_ddiv+0x1b0>
  408186:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40818a:	f43f aefd 	beq.w	407f88 <__aeabi_dmul+0x1f8>
  40818e:	4610      	mov	r0, r2
  408190:	4619      	mov	r1, r3
  408192:	e722      	b.n	407fda <__aeabi_dmul+0x24a>
  408194:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408198:	bf18      	it	ne
  40819a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40819e:	f47f aec5 	bne.w	407f2c <__aeabi_dmul+0x19c>
  4081a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4081a6:	f47f af0d 	bne.w	407fc4 <__aeabi_dmul+0x234>
  4081aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4081ae:	f47f aeeb 	bne.w	407f88 <__aeabi_dmul+0x1f8>
  4081b2:	e712      	b.n	407fda <__aeabi_dmul+0x24a>

004081b4 <__gedf2>:
  4081b4:	f04f 3cff 	mov.w	ip, #4294967295
  4081b8:	e006      	b.n	4081c8 <__cmpdf2+0x4>
  4081ba:	bf00      	nop

004081bc <__ledf2>:
  4081bc:	f04f 0c01 	mov.w	ip, #1
  4081c0:	e002      	b.n	4081c8 <__cmpdf2+0x4>
  4081c2:	bf00      	nop

004081c4 <__cmpdf2>:
  4081c4:	f04f 0c01 	mov.w	ip, #1
  4081c8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4081cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081d8:	bf18      	it	ne
  4081da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4081de:	d01b      	beq.n	408218 <__cmpdf2+0x54>
  4081e0:	b001      	add	sp, #4
  4081e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4081e6:	bf0c      	ite	eq
  4081e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4081ec:	ea91 0f03 	teqne	r1, r3
  4081f0:	bf02      	ittt	eq
  4081f2:	ea90 0f02 	teqeq	r0, r2
  4081f6:	2000      	moveq	r0, #0
  4081f8:	4770      	bxeq	lr
  4081fa:	f110 0f00 	cmn.w	r0, #0
  4081fe:	ea91 0f03 	teq	r1, r3
  408202:	bf58      	it	pl
  408204:	4299      	cmppl	r1, r3
  408206:	bf08      	it	eq
  408208:	4290      	cmpeq	r0, r2
  40820a:	bf2c      	ite	cs
  40820c:	17d8      	asrcs	r0, r3, #31
  40820e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408212:	f040 0001 	orr.w	r0, r0, #1
  408216:	4770      	bx	lr
  408218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40821c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408220:	d102      	bne.n	408228 <__cmpdf2+0x64>
  408222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408226:	d107      	bne.n	408238 <__cmpdf2+0x74>
  408228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40822c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408230:	d1d6      	bne.n	4081e0 <__cmpdf2+0x1c>
  408232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408236:	d0d3      	beq.n	4081e0 <__cmpdf2+0x1c>
  408238:	f85d 0b04 	ldr.w	r0, [sp], #4
  40823c:	4770      	bx	lr
  40823e:	bf00      	nop

00408240 <__aeabi_cdrcmple>:
  408240:	4684      	mov	ip, r0
  408242:	4610      	mov	r0, r2
  408244:	4662      	mov	r2, ip
  408246:	468c      	mov	ip, r1
  408248:	4619      	mov	r1, r3
  40824a:	4663      	mov	r3, ip
  40824c:	e000      	b.n	408250 <__aeabi_cdcmpeq>
  40824e:	bf00      	nop

00408250 <__aeabi_cdcmpeq>:
  408250:	b501      	push	{r0, lr}
  408252:	f7ff ffb7 	bl	4081c4 <__cmpdf2>
  408256:	2800      	cmp	r0, #0
  408258:	bf48      	it	mi
  40825a:	f110 0f00 	cmnmi.w	r0, #0
  40825e:	bd01      	pop	{r0, pc}

00408260 <__aeabi_dcmpeq>:
  408260:	f84d ed08 	str.w	lr, [sp, #-8]!
  408264:	f7ff fff4 	bl	408250 <__aeabi_cdcmpeq>
  408268:	bf0c      	ite	eq
  40826a:	2001      	moveq	r0, #1
  40826c:	2000      	movne	r0, #0
  40826e:	f85d fb08 	ldr.w	pc, [sp], #8
  408272:	bf00      	nop

00408274 <__aeabi_dcmplt>:
  408274:	f84d ed08 	str.w	lr, [sp, #-8]!
  408278:	f7ff ffea 	bl	408250 <__aeabi_cdcmpeq>
  40827c:	bf34      	ite	cc
  40827e:	2001      	movcc	r0, #1
  408280:	2000      	movcs	r0, #0
  408282:	f85d fb08 	ldr.w	pc, [sp], #8
  408286:	bf00      	nop

00408288 <__aeabi_dcmple>:
  408288:	f84d ed08 	str.w	lr, [sp, #-8]!
  40828c:	f7ff ffe0 	bl	408250 <__aeabi_cdcmpeq>
  408290:	bf94      	ite	ls
  408292:	2001      	movls	r0, #1
  408294:	2000      	movhi	r0, #0
  408296:	f85d fb08 	ldr.w	pc, [sp], #8
  40829a:	bf00      	nop

0040829c <__aeabi_dcmpge>:
  40829c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082a0:	f7ff ffce 	bl	408240 <__aeabi_cdrcmple>
  4082a4:	bf94      	ite	ls
  4082a6:	2001      	movls	r0, #1
  4082a8:	2000      	movhi	r0, #0
  4082aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4082ae:	bf00      	nop

004082b0 <__aeabi_dcmpgt>:
  4082b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082b4:	f7ff ffc4 	bl	408240 <__aeabi_cdrcmple>
  4082b8:	bf34      	ite	cc
  4082ba:	2001      	movcc	r0, #1
  4082bc:	2000      	movcs	r0, #0
  4082be:	f85d fb08 	ldr.w	pc, [sp], #8
  4082c2:	bf00      	nop

004082c4 <__aeabi_dcmpun>:
  4082c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082cc:	d102      	bne.n	4082d4 <__aeabi_dcmpun+0x10>
  4082ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4082d2:	d10a      	bne.n	4082ea <__aeabi_dcmpun+0x26>
  4082d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082dc:	d102      	bne.n	4082e4 <__aeabi_dcmpun+0x20>
  4082de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4082e2:	d102      	bne.n	4082ea <__aeabi_dcmpun+0x26>
  4082e4:	f04f 0000 	mov.w	r0, #0
  4082e8:	4770      	bx	lr
  4082ea:	f04f 0001 	mov.w	r0, #1
  4082ee:	4770      	bx	lr

004082f0 <__aeabi_d2iz>:
  4082f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4082f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4082f8:	d215      	bcs.n	408326 <__aeabi_d2iz+0x36>
  4082fa:	d511      	bpl.n	408320 <__aeabi_d2iz+0x30>
  4082fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408300:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408304:	d912      	bls.n	40832c <__aeabi_d2iz+0x3c>
  408306:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40830a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40830e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408316:	fa23 f002 	lsr.w	r0, r3, r2
  40831a:	bf18      	it	ne
  40831c:	4240      	negne	r0, r0
  40831e:	4770      	bx	lr
  408320:	f04f 0000 	mov.w	r0, #0
  408324:	4770      	bx	lr
  408326:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40832a:	d105      	bne.n	408338 <__aeabi_d2iz+0x48>
  40832c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408330:	bf08      	it	eq
  408332:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408336:	4770      	bx	lr
  408338:	f04f 0000 	mov.w	r0, #0
  40833c:	4770      	bx	lr
  40833e:	bf00      	nop

00408340 <__aeabi_uldivmod>:
  408340:	b953      	cbnz	r3, 408358 <__aeabi_uldivmod+0x18>
  408342:	b94a      	cbnz	r2, 408358 <__aeabi_uldivmod+0x18>
  408344:	2900      	cmp	r1, #0
  408346:	bf08      	it	eq
  408348:	2800      	cmpeq	r0, #0
  40834a:	bf1c      	itt	ne
  40834c:	f04f 31ff 	movne.w	r1, #4294967295
  408350:	f04f 30ff 	movne.w	r0, #4294967295
  408354:	f000 b97a 	b.w	40864c <__aeabi_idiv0>
  408358:	f1ad 0c08 	sub.w	ip, sp, #8
  40835c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408360:	f000 f806 	bl	408370 <__udivmoddi4>
  408364:	f8dd e004 	ldr.w	lr, [sp, #4]
  408368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40836c:	b004      	add	sp, #16
  40836e:	4770      	bx	lr

00408370 <__udivmoddi4>:
  408370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408374:	468c      	mov	ip, r1
  408376:	460d      	mov	r5, r1
  408378:	4604      	mov	r4, r0
  40837a:	9e08      	ldr	r6, [sp, #32]
  40837c:	2b00      	cmp	r3, #0
  40837e:	d151      	bne.n	408424 <__udivmoddi4+0xb4>
  408380:	428a      	cmp	r2, r1
  408382:	4617      	mov	r7, r2
  408384:	d96d      	bls.n	408462 <__udivmoddi4+0xf2>
  408386:	fab2 fe82 	clz	lr, r2
  40838a:	f1be 0f00 	cmp.w	lr, #0
  40838e:	d00b      	beq.n	4083a8 <__udivmoddi4+0x38>
  408390:	f1ce 0c20 	rsb	ip, lr, #32
  408394:	fa01 f50e 	lsl.w	r5, r1, lr
  408398:	fa20 fc0c 	lsr.w	ip, r0, ip
  40839c:	fa02 f70e 	lsl.w	r7, r2, lr
  4083a0:	ea4c 0c05 	orr.w	ip, ip, r5
  4083a4:	fa00 f40e 	lsl.w	r4, r0, lr
  4083a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4083ac:	0c25      	lsrs	r5, r4, #16
  4083ae:	fbbc f8fa 	udiv	r8, ip, sl
  4083b2:	fa1f f987 	uxth.w	r9, r7
  4083b6:	fb0a cc18 	mls	ip, sl, r8, ip
  4083ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4083be:	fb08 f309 	mul.w	r3, r8, r9
  4083c2:	42ab      	cmp	r3, r5
  4083c4:	d90a      	bls.n	4083dc <__udivmoddi4+0x6c>
  4083c6:	19ed      	adds	r5, r5, r7
  4083c8:	f108 32ff 	add.w	r2, r8, #4294967295
  4083cc:	f080 8123 	bcs.w	408616 <__udivmoddi4+0x2a6>
  4083d0:	42ab      	cmp	r3, r5
  4083d2:	f240 8120 	bls.w	408616 <__udivmoddi4+0x2a6>
  4083d6:	f1a8 0802 	sub.w	r8, r8, #2
  4083da:	443d      	add	r5, r7
  4083dc:	1aed      	subs	r5, r5, r3
  4083de:	b2a4      	uxth	r4, r4
  4083e0:	fbb5 f0fa 	udiv	r0, r5, sl
  4083e4:	fb0a 5510 	mls	r5, sl, r0, r5
  4083e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4083ec:	fb00 f909 	mul.w	r9, r0, r9
  4083f0:	45a1      	cmp	r9, r4
  4083f2:	d909      	bls.n	408408 <__udivmoddi4+0x98>
  4083f4:	19e4      	adds	r4, r4, r7
  4083f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4083fa:	f080 810a 	bcs.w	408612 <__udivmoddi4+0x2a2>
  4083fe:	45a1      	cmp	r9, r4
  408400:	f240 8107 	bls.w	408612 <__udivmoddi4+0x2a2>
  408404:	3802      	subs	r0, #2
  408406:	443c      	add	r4, r7
  408408:	eba4 0409 	sub.w	r4, r4, r9
  40840c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408410:	2100      	movs	r1, #0
  408412:	2e00      	cmp	r6, #0
  408414:	d061      	beq.n	4084da <__udivmoddi4+0x16a>
  408416:	fa24 f40e 	lsr.w	r4, r4, lr
  40841a:	2300      	movs	r3, #0
  40841c:	6034      	str	r4, [r6, #0]
  40841e:	6073      	str	r3, [r6, #4]
  408420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408424:	428b      	cmp	r3, r1
  408426:	d907      	bls.n	408438 <__udivmoddi4+0xc8>
  408428:	2e00      	cmp	r6, #0
  40842a:	d054      	beq.n	4084d6 <__udivmoddi4+0x166>
  40842c:	2100      	movs	r1, #0
  40842e:	e886 0021 	stmia.w	r6, {r0, r5}
  408432:	4608      	mov	r0, r1
  408434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408438:	fab3 f183 	clz	r1, r3
  40843c:	2900      	cmp	r1, #0
  40843e:	f040 808e 	bne.w	40855e <__udivmoddi4+0x1ee>
  408442:	42ab      	cmp	r3, r5
  408444:	d302      	bcc.n	40844c <__udivmoddi4+0xdc>
  408446:	4282      	cmp	r2, r0
  408448:	f200 80fa 	bhi.w	408640 <__udivmoddi4+0x2d0>
  40844c:	1a84      	subs	r4, r0, r2
  40844e:	eb65 0503 	sbc.w	r5, r5, r3
  408452:	2001      	movs	r0, #1
  408454:	46ac      	mov	ip, r5
  408456:	2e00      	cmp	r6, #0
  408458:	d03f      	beq.n	4084da <__udivmoddi4+0x16a>
  40845a:	e886 1010 	stmia.w	r6, {r4, ip}
  40845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408462:	b912      	cbnz	r2, 40846a <__udivmoddi4+0xfa>
  408464:	2701      	movs	r7, #1
  408466:	fbb7 f7f2 	udiv	r7, r7, r2
  40846a:	fab7 fe87 	clz	lr, r7
  40846e:	f1be 0f00 	cmp.w	lr, #0
  408472:	d134      	bne.n	4084de <__udivmoddi4+0x16e>
  408474:	1beb      	subs	r3, r5, r7
  408476:	0c3a      	lsrs	r2, r7, #16
  408478:	fa1f fc87 	uxth.w	ip, r7
  40847c:	2101      	movs	r1, #1
  40847e:	fbb3 f8f2 	udiv	r8, r3, r2
  408482:	0c25      	lsrs	r5, r4, #16
  408484:	fb02 3318 	mls	r3, r2, r8, r3
  408488:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40848c:	fb0c f308 	mul.w	r3, ip, r8
  408490:	42ab      	cmp	r3, r5
  408492:	d907      	bls.n	4084a4 <__udivmoddi4+0x134>
  408494:	19ed      	adds	r5, r5, r7
  408496:	f108 30ff 	add.w	r0, r8, #4294967295
  40849a:	d202      	bcs.n	4084a2 <__udivmoddi4+0x132>
  40849c:	42ab      	cmp	r3, r5
  40849e:	f200 80d1 	bhi.w	408644 <__udivmoddi4+0x2d4>
  4084a2:	4680      	mov	r8, r0
  4084a4:	1aed      	subs	r5, r5, r3
  4084a6:	b2a3      	uxth	r3, r4
  4084a8:	fbb5 f0f2 	udiv	r0, r5, r2
  4084ac:	fb02 5510 	mls	r5, r2, r0, r5
  4084b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4084b4:	fb0c fc00 	mul.w	ip, ip, r0
  4084b8:	45a4      	cmp	ip, r4
  4084ba:	d907      	bls.n	4084cc <__udivmoddi4+0x15c>
  4084bc:	19e4      	adds	r4, r4, r7
  4084be:	f100 33ff 	add.w	r3, r0, #4294967295
  4084c2:	d202      	bcs.n	4084ca <__udivmoddi4+0x15a>
  4084c4:	45a4      	cmp	ip, r4
  4084c6:	f200 80b8 	bhi.w	40863a <__udivmoddi4+0x2ca>
  4084ca:	4618      	mov	r0, r3
  4084cc:	eba4 040c 	sub.w	r4, r4, ip
  4084d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4084d4:	e79d      	b.n	408412 <__udivmoddi4+0xa2>
  4084d6:	4631      	mov	r1, r6
  4084d8:	4630      	mov	r0, r6
  4084da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084de:	f1ce 0420 	rsb	r4, lr, #32
  4084e2:	fa05 f30e 	lsl.w	r3, r5, lr
  4084e6:	fa07 f70e 	lsl.w	r7, r7, lr
  4084ea:	fa20 f804 	lsr.w	r8, r0, r4
  4084ee:	0c3a      	lsrs	r2, r7, #16
  4084f0:	fa25 f404 	lsr.w	r4, r5, r4
  4084f4:	ea48 0803 	orr.w	r8, r8, r3
  4084f8:	fbb4 f1f2 	udiv	r1, r4, r2
  4084fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408500:	fb02 4411 	mls	r4, r2, r1, r4
  408504:	fa1f fc87 	uxth.w	ip, r7
  408508:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40850c:	fb01 f30c 	mul.w	r3, r1, ip
  408510:	42ab      	cmp	r3, r5
  408512:	fa00 f40e 	lsl.w	r4, r0, lr
  408516:	d909      	bls.n	40852c <__udivmoddi4+0x1bc>
  408518:	19ed      	adds	r5, r5, r7
  40851a:	f101 30ff 	add.w	r0, r1, #4294967295
  40851e:	f080 808a 	bcs.w	408636 <__udivmoddi4+0x2c6>
  408522:	42ab      	cmp	r3, r5
  408524:	f240 8087 	bls.w	408636 <__udivmoddi4+0x2c6>
  408528:	3902      	subs	r1, #2
  40852a:	443d      	add	r5, r7
  40852c:	1aeb      	subs	r3, r5, r3
  40852e:	fa1f f588 	uxth.w	r5, r8
  408532:	fbb3 f0f2 	udiv	r0, r3, r2
  408536:	fb02 3310 	mls	r3, r2, r0, r3
  40853a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40853e:	fb00 f30c 	mul.w	r3, r0, ip
  408542:	42ab      	cmp	r3, r5
  408544:	d907      	bls.n	408556 <__udivmoddi4+0x1e6>
  408546:	19ed      	adds	r5, r5, r7
  408548:	f100 38ff 	add.w	r8, r0, #4294967295
  40854c:	d26f      	bcs.n	40862e <__udivmoddi4+0x2be>
  40854e:	42ab      	cmp	r3, r5
  408550:	d96d      	bls.n	40862e <__udivmoddi4+0x2be>
  408552:	3802      	subs	r0, #2
  408554:	443d      	add	r5, r7
  408556:	1aeb      	subs	r3, r5, r3
  408558:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40855c:	e78f      	b.n	40847e <__udivmoddi4+0x10e>
  40855e:	f1c1 0720 	rsb	r7, r1, #32
  408562:	fa22 f807 	lsr.w	r8, r2, r7
  408566:	408b      	lsls	r3, r1
  408568:	fa05 f401 	lsl.w	r4, r5, r1
  40856c:	ea48 0303 	orr.w	r3, r8, r3
  408570:	fa20 fe07 	lsr.w	lr, r0, r7
  408574:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408578:	40fd      	lsrs	r5, r7
  40857a:	ea4e 0e04 	orr.w	lr, lr, r4
  40857e:	fbb5 f9fc 	udiv	r9, r5, ip
  408582:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408586:	fb0c 5519 	mls	r5, ip, r9, r5
  40858a:	fa1f f883 	uxth.w	r8, r3
  40858e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408592:	fb09 f408 	mul.w	r4, r9, r8
  408596:	42ac      	cmp	r4, r5
  408598:	fa02 f201 	lsl.w	r2, r2, r1
  40859c:	fa00 fa01 	lsl.w	sl, r0, r1
  4085a0:	d908      	bls.n	4085b4 <__udivmoddi4+0x244>
  4085a2:	18ed      	adds	r5, r5, r3
  4085a4:	f109 30ff 	add.w	r0, r9, #4294967295
  4085a8:	d243      	bcs.n	408632 <__udivmoddi4+0x2c2>
  4085aa:	42ac      	cmp	r4, r5
  4085ac:	d941      	bls.n	408632 <__udivmoddi4+0x2c2>
  4085ae:	f1a9 0902 	sub.w	r9, r9, #2
  4085b2:	441d      	add	r5, r3
  4085b4:	1b2d      	subs	r5, r5, r4
  4085b6:	fa1f fe8e 	uxth.w	lr, lr
  4085ba:	fbb5 f0fc 	udiv	r0, r5, ip
  4085be:	fb0c 5510 	mls	r5, ip, r0, r5
  4085c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4085c6:	fb00 f808 	mul.w	r8, r0, r8
  4085ca:	45a0      	cmp	r8, r4
  4085cc:	d907      	bls.n	4085de <__udivmoddi4+0x26e>
  4085ce:	18e4      	adds	r4, r4, r3
  4085d0:	f100 35ff 	add.w	r5, r0, #4294967295
  4085d4:	d229      	bcs.n	40862a <__udivmoddi4+0x2ba>
  4085d6:	45a0      	cmp	r8, r4
  4085d8:	d927      	bls.n	40862a <__udivmoddi4+0x2ba>
  4085da:	3802      	subs	r0, #2
  4085dc:	441c      	add	r4, r3
  4085de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4085e2:	eba4 0408 	sub.w	r4, r4, r8
  4085e6:	fba0 8902 	umull	r8, r9, r0, r2
  4085ea:	454c      	cmp	r4, r9
  4085ec:	46c6      	mov	lr, r8
  4085ee:	464d      	mov	r5, r9
  4085f0:	d315      	bcc.n	40861e <__udivmoddi4+0x2ae>
  4085f2:	d012      	beq.n	40861a <__udivmoddi4+0x2aa>
  4085f4:	b156      	cbz	r6, 40860c <__udivmoddi4+0x29c>
  4085f6:	ebba 030e 	subs.w	r3, sl, lr
  4085fa:	eb64 0405 	sbc.w	r4, r4, r5
  4085fe:	fa04 f707 	lsl.w	r7, r4, r7
  408602:	40cb      	lsrs	r3, r1
  408604:	431f      	orrs	r7, r3
  408606:	40cc      	lsrs	r4, r1
  408608:	6037      	str	r7, [r6, #0]
  40860a:	6074      	str	r4, [r6, #4]
  40860c:	2100      	movs	r1, #0
  40860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408612:	4618      	mov	r0, r3
  408614:	e6f8      	b.n	408408 <__udivmoddi4+0x98>
  408616:	4690      	mov	r8, r2
  408618:	e6e0      	b.n	4083dc <__udivmoddi4+0x6c>
  40861a:	45c2      	cmp	sl, r8
  40861c:	d2ea      	bcs.n	4085f4 <__udivmoddi4+0x284>
  40861e:	ebb8 0e02 	subs.w	lr, r8, r2
  408622:	eb69 0503 	sbc.w	r5, r9, r3
  408626:	3801      	subs	r0, #1
  408628:	e7e4      	b.n	4085f4 <__udivmoddi4+0x284>
  40862a:	4628      	mov	r0, r5
  40862c:	e7d7      	b.n	4085de <__udivmoddi4+0x26e>
  40862e:	4640      	mov	r0, r8
  408630:	e791      	b.n	408556 <__udivmoddi4+0x1e6>
  408632:	4681      	mov	r9, r0
  408634:	e7be      	b.n	4085b4 <__udivmoddi4+0x244>
  408636:	4601      	mov	r1, r0
  408638:	e778      	b.n	40852c <__udivmoddi4+0x1bc>
  40863a:	3802      	subs	r0, #2
  40863c:	443c      	add	r4, r7
  40863e:	e745      	b.n	4084cc <__udivmoddi4+0x15c>
  408640:	4608      	mov	r0, r1
  408642:	e708      	b.n	408456 <__udivmoddi4+0xe6>
  408644:	f1a8 0802 	sub.w	r8, r8, #2
  408648:	443d      	add	r5, r7
  40864a:	e72b      	b.n	4084a4 <__udivmoddi4+0x134>

0040864c <__aeabi_idiv0>:
  40864c:	4770      	bx	lr
  40864e:	bf00      	nop

00408650 <CSWTCH.7>:
  408650:	0100 0000 0300 0000 0200 0000 4449 454c     ............IDLE
  408660:	0000 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  408670:	7653 0063 6166 686c 2061 6d65 6320 6972     Svc.falha em cri
  408680:	7261 6120 7120 6575 6575 7820 7551 7565     ar a queue xQueu
  408690:	5065 6f72 2063 0000 6166 686c 2061 6d65     eProc ..falha em
  4086a0:	6320 6972 7261 6120 7120 6575 6575 7820      criar a queue x
  4086b0:	7551 7565 4165 4344 0020 0000 4441 0043     QueueADC ...ADC.
  4086c0:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  4086d0:	7420 7365 2074 5250 434f 7420 7361 0d6b      test PROC task.
  4086e0:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  4086f0:	6165 6574 7420 7365 2074 4441 2043 6174     eate test ADC ta
  408700:	6b73 000d 4441 5f43 3a31 2520 322e 2066     sk..ADC_1: %.2f 
  408710:	000a 0000 614e 206f 6863 6765 756f 7520     ....Nao chegou u
  408720:	206d 6f6e 6f76 6420 6461 206f 6d65 3120     m novo dado em 1
  408730:	7320 6765 6e75 6f64 0000 0000 6954 656d      segundo....Time
  408740:	0072 0000 7473 6361 206b 766f 7265 6c66     r...stack overfl
  408750:	776f 2520 2078 7325 0a0d 0000               ow %x %s....

0040875c <_global_impure_ptr>:
  40875c:	0010 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  40876c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40877c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40878c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40879c:	296c 0000 0030 0000                         l)..0...

004087a4 <blanks.7238>:
  4087a4:	2020 2020 2020 2020 2020 2020 2020 2020                     

004087b4 <zeroes.7239>:
  4087b4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4087c4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4087d4:	0000 0000                                   ....

004087d8 <__mprec_bigtens>:
  4087d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4087e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4087f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408800 <__mprec_tens>:
  408800:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408810:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408820:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408830:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408840:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408850:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408860:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408870:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  408880:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408890:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4088a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4088b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4088c0:	9db4 79d9 7843 44ea                         ...yCx.D

004088c8 <p05.6055>:
  4088c8:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4088d8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004088e4 <_ctype_>:
  4088e4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4088f4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408904:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408914:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408924:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408934:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408944:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408954:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408964:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004089e8 <_init>:
  4089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4089ea:	bf00      	nop
  4089ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4089ee:	bc08      	pop	{r3}
  4089f0:	469e      	mov	lr, r3
  4089f2:	4770      	bx	lr

004089f4 <__init_array_start>:
  4089f4:	00405381 	.word	0x00405381

004089f8 <__frame_dummy_init_array_entry>:
  4089f8:	00400165                                e.@.

004089fc <_fini>:
  4089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4089fe:	bf00      	nop
  408a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408a02:	bc08      	pop	{r3}
  408a04:	469e      	mov	lr, r3
  408a06:	4770      	bx	lr

00408a08 <__fini_array_start>:
  408a08:	00400141 	.word	0x00400141
